dom:
  grid.module:
    ':box': box
    ':node': node
    ':data-bound-socket-data': dataBoundSocketData
    ui.dnd.dropzone:
      @drop-item: onDropItem
      component:
        ':class': getViewClass(node)
        ':style': node.style?.css
        ':is': getNodeCompName(node)
        ':box': box
        ':node': node
        ':data-bound-socket-data': dataBoundSocketData
        ':active-node': activeNode
        @node-hovered: (...args) => $emit('node-hovered', ...args)
props:
  box: null
  node: null
  activeNode: null
  dataBoundSocketData: null
data: null
methods:
  onDropItem: | #js
    function(dragItem) {
      if (dragItem.viewNode) {
        const parentNodeID = this.node._id;
        const newNode = dragItem.viewNode;
        this.getBoxVue().$femit("create.node", this.box._id, parentNodeID, newNode);
      }
      else if (dragItem.field) {
        debugger;
      }
      else {
        alertify.error("Unknown drag item");
      }
    }
  getBoxVue: | #js
    function() {
      return this.$root.vm.getAncestors(this, "grid.ui.box")[0];
    }
  getViewClass: | #js
    function(node) {
      const cls = {};
      cls.highlighted = this.isHighlighted;
      cls["h-100pc"] = true;
      cls["_view-comp"] = true;
      cls[this.getNodeIdClass()] = true;
      cls["_grid-view-node"] = true;
      cls["_grid-hovered"] = (node._id == this.activeNode?._id);
      if (node.style?.bg?.class) cls[node.style.bg.class] = true;
      return cls;
    }
  getNodeIdClass: | #js
    function() {
      return `box_${this.box._id}_node_${this.node._id}`;
    }
  getNodeCompName: | #js
    function(node) {
      return `grid.ui.node.view.${node.type}`.replace(/\./g, "-");
    }
computed:
  isHighlighted: | #js
    function() {
      return this.$root.highlighted.nodes.value.some(nr => (nr.box._id == this.box._id) && (nr.node._id == this.node._id));
    }
  cssClass: | #js
    function() {
      const cls = {};
      cls[this.getNodeIdClass()] = true;
      cls["_grid-hovered"] = (this.node._id == this.activeNode?._id);
      return cls;
    }
style:
  .comp-grid-ui-node-view:
    height: 100%
  div:
    height: 100%
  .empty:
    display: flex
    align-items: center
    justify-content: center
    font-size: 150%
    opacity: 0.3
    background: >-
      repeating-linear-gradient(-45deg, #ffffff10, #ffffff10 20px, #ffffff20
      10px, #ffffff20 40px)
  .empty > div:
    height: auto
  ._view-comp:
    transition: 0.1s
  ._grid-view-node:
    height: 100%
  ._grid-hovered:
    border: 3px dashed yellow
    box-shadow: '-4px 4px 2px black'
    transition: 0.1s
_:
  examples:
    count: 0
name: grid-ui-node-view
template: >-
  <grid-module class="comp-grid-ui-node-view" :box="box" :node="node"
  :data-bound-socket-data="dataBoundSocketData"
  path="1824264671."><ui-dnd-dropzone @drop-item="onDropItem"
  path="1824264671.0"><component :class="getViewClass(node)"
  :style="node.style?.css" :is="getNodeCompName(node)" :box="box" :node="node"
  :data-bound-socket-data="dataBoundSocketData" :active-node="activeNode"
  @node-hovered="(...args) =&gt; $emit('node-hovered', ...args)"
  path="1824264671.0.0"></component></ui-dnd-dropzone></grid-module>
