helpers:
  or: | #ts
    (context, a, b) => {
      if (a != undefined) return JSON.stringify(a);
      return JSON.stringify(b);
    }
  dom: | #ts
    (context, dom, compName) => {
      return context.toTemplate(context, dom, 0, compName).join("\n");
    }
  addCode: | #ts
    (context, methodBody, code) => {
      if (!methodBody) methodBody = "function() {}";
      methodBody = methodBody.replace(/\{/, `{\n${code}\n`);
      return methodBody;
    }
  prefixCssSelectors: | #ts
    (context, compName, selectors) => {
      const s = [];
      const scopeClass = `comp-${compName.replace(/\./g, "-")}`;
      const classSelectors = selectors.split(',').map(s => s.trim()).filter(s => s.startsWith("."));
      const otherSelectors = selectors.split(',').map(s => s.trim()).filter(s => !s.startsWith("."));
      s.push(...classSelectors.map(s => `.${scopeClass}${s}`));
      s.push(...classSelectors.map(s => `.${scopeClass} ${s}`));
      s.push(...otherSelectors.map(s => `.${scopeClass} ${s}`));
      return s.join(", ");
    }
  unkebabize: | #ts
    (context, str) => {
      return str?.replace(/-/g, ".");
    }
