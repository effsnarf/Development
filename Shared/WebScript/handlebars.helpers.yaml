helpers:
  or: | #ts
    (context: any, a: any, b: any) => {
      if (a != undefined) return JSON.stringify(a);
      return JSON.stringify(b);
    };
  dom: | #ts
    (context: any, dom: any, compName: string) => {
      return context.toTemplate(context, dom, 0, compName).join("\n");
    };
  addCode: | #ts
    (context: any, methodBody: string, code: string) => {
      if (!methodBody) methodBody = "function() {}";
      methodBody = methodBody.replace(/\{/, `{\n${code}\n`);
      return methodBody;
    };
  addLogMethod: | #ts
    (context: any, methodName: string, methodBody: string) => {
      if (!methodBody) methodBody = "function() {}";
      methodBody = methodBody.replace(/\{/, `{\n this._log_method("${methodName}", [...arguments]); \n `);
      return methodBody;
    };
  prefixCssSelectors: | #ts
    (context: any, compName: string, selectors: string) => {
      const s = [];
      const scopeClass = `comp-${compName.replace(/\./g, "-")}`;
      const classSelectors = selectors.split(',').map(s => s.trim()).filter(s => s.startsWith("."));
      const otherSelectors = selectors.split(',').map(s => s.trim()).filter(s => !s.startsWith("."));
      s.push(...classSelectors.map(s => `.${scopeClass}${s}`));
      s.push(...classSelectors.map(s => `.${scopeClass} ${s}`));
      s.push(...otherSelectors.map(s => `.${scopeClass} ${s}`));
      return s.join(", ");
    };
  unkebabize: | #ts
    (context: any, str: string) => {
      return str?.replace(/-/g, ".");
    };
