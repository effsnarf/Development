helpers:
  or: | #ts
    (context, a, b) => {
      if (a != undefined) return JSON.stringify(a);
      return JSON.stringify(b);
    }
  dom: | #ts
    (context, dom, compName) => {
      return context.toTemplate(context, dom, 0, compName).join("\n");
    }
  hasKey: | #ts
    (context, object, key, options) => {
      if (!object) return false;
      if (typeof object !== "object") return false;
      const hasKey = (key in object);
      return hasKey;
    }
  addCode: | #ts
    (context, methodBody, code) => {
      if (!methodBody?.length) methodBody = "function() {}";

      // Remove lines starting with "//" at the beginning of the line
      methodBody = methodBody.replace(/^\s*\/\/.*$/gm, "");
      
      methodBody = methodBody.trim();

      if (!["function", "async"].some(s => methodBody.startsWith(s)))
      {
        methodBody = `function() {\n${methodBody}\n}`;
        // If method body includes "await" (regex with word boundaries)
        if (/\bawait\b/.test(methodBody))
        {
          methodBody = `async ${methodBody}`;
        }
      }

      if (!code?.length) return methodBody;

      if (!methodBody) methodBody = "function() {}";
      methodBody = methodBody.replace(/\{/, `{\n${code}\n`);
      return methodBody;
    }
  prefixCssSelectors: | #ts
    (context, compName, selectors) => {
      const s = [];
      const scopeClass = `comp-${compName.replace(/\./g, "-")}`;
      const classSelectors = selectors.split(',').map(s => s.trim()).filter(s => s.startsWith("."));
      const otherSelectors = selectors.split(',').map(s => s.trim()).filter(s => !s.startsWith("."));
      s.push(...classSelectors.map(s => `.${scopeClass}${s}`));
      s.push(...classSelectors.map(s => `.${scopeClass} ${s}`));
      s.push(...otherSelectors.map(s => `.${scopeClass} ${s}`));
      return s.join(", ");
    }
  unkebabize: | #ts
    (context, str) => {
      return str?.replace(/-/g, ".");
    }
  methodSignature: | #ts
    (context, prefix, name, args) => {
      return `async ${prefix}${name}(${args.join(", ")})`;
    }
