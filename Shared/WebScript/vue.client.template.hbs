{
  props: {
    {{#each props}}
    {{@key}}: {
      default: {{{or this null}}}
    },
    {{/each}}
  },
  data: function () {
    return {
        {{#each data}}
        {{@key}}: {{{or this null}}},
        {{/each}}
        _: {
          comp: {
            name: `{{unkebabize name}}`,
          },
          state: StateTracker.new(this._uid, this.$root.client),
        }
    }
  },
  mounted: {{{addCode mounted "this.$root.onVueMounted(this);"}}},
  unmounted: {{{addCode unmounted "this.$root.onVueUnmounted(this);"}}},
  methods: {
    {{#each methods}}
    {{@key}}: {{{addLogMethod @key this}}},
    {{/each}}
    _log_method: function (methodName, args) {
      if ([`processQueue`, `recalc`, `getFontSize`,
        `onMouseMove`, `onMouseUp`,
        `preventDefaults`,
        `highlight`, `unhighlight`,
        `getCssClass`, `getTabClass`, `getLayerClass`, `getLayerType`
        ].includes(methodName)) return;
      if ([`draw`].some(s => methodName.includes(s))) return;
      const compName = `{{name}}`;
      return;
      console.log(
        `ðŸ§Š %c${compName} %c${methodName} %o`,
        'color: green;',
        'color: yellow;',
        args);
    },
    _log_data: function (key, newValue, oldValue) {
      if ([`queue`, `width`, `height`, `generators`, `items`].includes(key)) return;
      if (!newValue && !oldValue) return;
      this.$data._.state.log(key, newValue, oldValue);
      if (!oldValue)
      {
        if (false)
        {
          console.log(
            `ðŸ§Š %c${this._.comp.name} %c${key} %o`,
            'color: green;',
            'color: cyan;',
            newValue);
        }
      }
    },
  },
  computed: {
    {{#each computed}}
    {{#if get}}
    {{@key}}: {
      get: {{{get}}},
    },
    {{else}}
    {{@key}}: {{{this}}},
    {{/if}}
    {{/each}}
  },
  watch: {
    {{#each data}}
    {{@key}}: {
      handler: function (newValue, oldValue) {
        this._log_data(`{{@key}}`, newValue, oldValue);
      },
      immediate: true,
    },
    {{/each}}
    
    {{#each props}}
    {{@key}}: {
      handler: function (newValue, oldValue) {
        this._log_data(`{{@key}}`, newValue, oldValue);
      },
      immediate: true,
    },
    {{/each}}

    {{#each watch}}
    {{#if handler}}
    {{@key}}: {
      handler: {{{handler}}},
      immediate: {{{or immediate false}}},
      deep: {{{or deep false}}},
    },
    {{else}}
    {{@key}}: {{{this}}},
    {{/if}}
    {{/each}}
  },
  template: `{{{dom dom name}}}`
}
