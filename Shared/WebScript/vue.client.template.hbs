{
  mixins: [],
  props: {
    {{#each props}}
    {{@key}}: {
      default: {{{or this null}}}
      },
    {{/each}}
  },
  data: function () {
    return {
        {{#each data}}
        {{@key}}: {{{or this null}}},
        {{/each}}
        _: {
          comp: {
            name: `{{unkebabize name}}`,
          },
        }
    }
  },
  created: {{{addCode created ""}}},
  mounted: {{{addCode mounted ""}}},
  unmounted: {{{addCode unmounted ""}}},
  methods: {
    {{#each methods}}
    {{@key}}: {{{addCode this "const _started = Date.now(); if (window.vueIdeApp?.isPauseOnMethod(this.$options._componentTag, '{{method}}')) debugger;" @key "window.vueIdeApp?.perf.track.elapsed(this.$options._componentTag + '.{{method}}', (Date.now() - _started));"}}},
    {{/each}}
  },
  computed: {
    {{#each computed}}
    {{#if get}}
    {{@key}}: {
      get: {{{addCode get ""}}},
    },
    {{else}}
    {{@key}}: {{{addCode this "const _started = Date.now();" @key "window.vueIdeApp?.perf.track.elapsed(this.$options._componentTag + '.{{method}}', (Date.now() - _started));"}}},
    {{/if}}
    {{/each}}
  },
  watch: {    
    {{#each watch}}
    {{#if handler}}
    {{@key}}: {
      handler: {{{addCode handler "const _started = Date.now();" @key "window.vueIdeApp?.perf.track.elapsed(this.$options._componentTag + '.{{method}}', (Date.now() - _started));"}}},
      immediate: {{{or immediate false}}},
      deep: {{{or deep false}}},
    },
    {{else}}
    {{@key}}: {{{this}}},
    {{/if}}
    {{/each}}
  },
  template: `{{{dom dom name}}}`
}
