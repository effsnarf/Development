- http-server:
    varName: dbProxyServer
    config: config.server
    routes:
      /: | #ts
        - return res.send("Add a database name to the URL: /[database]");
      /*.js: #ts
        - const fileName =: | #ts
            req.url.substring(1);
        - If a .ts version exists, transpile it and return it: #ts
            - variables: #ts
                - const tsUrl = :|
                  req.url.substring(0, req.url.length - 3) + ".ts";
                - const tsFilePath = :|
                  path.join(
                  __dirname,
                  "../Client",
                  fileName.replace(/\.js$/, ".ts")
                  );
            - if (fs.existsSync(tsFilePath)): |
                // Read the TypeScript file
                const tsCode = fs.readFileSync(tsFilePath, "utf8");
                // Return the transpiled TypeScript code
                return res.send(TypeScript.transpile(tsCode));
        - If a .js version exists, return it: #ts
            - const jsFilePath = :|
              path.join(__dirname, "../Client", fileName);
            - if (fs.existsSync(jsFilePath)) :|
              // Read the JavaScript file
              const jsCode = fs.readFileSync(jsFilePath, "utf8");
              // Return the JavaScript code
              return res.send(jsCode);
        - If the file doesnt exist, return 404: #ts
            - return res.status(404).send(`${jsFilePath} not found`);
      /:database:
        - # If database name has a dot, its a file: | #ts
          if (req.params.database.indexOf(".") > -1): | #ts
            return res.status(404).send(`File ${req.params.database} not found`);
        - # Get the database:
          - const db =: |
              await dbs.get(req.params.database);
          - if (!db): return res.status(404).send(`Database ${req.params.database} not found`);
        - # Get the list of the entities:
          - const entities =: |
              (await db?.getCollectionNames()).filter(
                (e: string) => !e.startsWith("_")
              );
          - return res.send(entities);
      /:database/api:
