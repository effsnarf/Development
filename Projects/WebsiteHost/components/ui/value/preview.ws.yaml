dom:
  div: 
    ':class': '{ preview: preview }'
    ui.image:
      v-if: isImageUrl
      ':url': value
    ui.value.preview.function:
      v-else-if: isFunction
      ':value': value
    ui.value.color:
      v-else-if: isColor
      ':value': value
    div: 
      v-else-if: 'true'
      ':class': cssClass
      div: 
        ':class': '{ clickable: true, ''value-as-string'': true }'
        v-text: valueAsString
        @click: onClickValue(valueAsString)
      transition:
        name: slide
        ui.value.any:
          v-if: isLargeType && isMoreVisible
          ':value': value
props:
  value: null
  preview: true
  large: false
data:
  isMoreVisible: false
methods:
  onClickValue: | #js
    function(value) {
      if (typeof value == "string") return this.$root.html.copyToClipboard(value);
      this.console.log(value);
      alertify.message(`Logged to console`);
    }
  getCssClass: | #js
    function(value) {
      const cls = [];
      if ([undefined, null].includes(value)) cls.push("opacity-30");
      cls.push(this.typeColor);
      if (this.large) cls.push("large");
      return cls;
    }
  valueToString: | #js
    function(value, depth) {
      if (!depth) depth = 0;
      if (depth > 4) return "…";
      if (value == undefined) return "undefined";
      if (value == null) return "null";
      if (value instanceof Date) return value.toShortString();
      if (typeof value == "string") {
        if (!value.length) return `“”`;
        return `${!this.preview ? value : value}`;
      }
      if (typeof value == "number") return value.toString();
      if (typeof value == "boolean") return value ? "✔️" : "✖";
      if (typeof value == "function") return value.toString();
      if (Array.isArray(value)) return `[${value.length}…]`;
      //if (typeof value == "object") return `{${Object.keys(value).take(5).map(k => `${k}: ${this.valueToString(value[k], depth+1)}`).join(', ')}}`;
      if (typeof value == "object") return `{${Object.keys(value).take(10).join(', ')}}`;
      return value.toString();
    }
computed:
  cssClass: | #js
    function() {
      return this.getCssClass(this.value);
    }
  type: | #js
    function() {
      return Objects.getType(this.value)?.name.toLowerCase();
    }
  typeColor: | #js
    function() {
      if (this.type == "boolean") return this.value ? "green" : "red";
      return ({
        "string": "yellow",
        "number": "green",
        "object": "cyan",
        "array": "white"
      }[this.type]) || null;
    }
  valueAsString: | #js
    function() {
      return this.valueToString(this.value);
    }
  isLargeType: | #js
    function() {
      // object or array
      return (this.type == "object" || this.type == "array");
    }
  isImageUrl: | #js
    function() {
      const value = this.value;
      if (typeof value != "string") return false;
      if (!value.startsWith("http")) return false;
      if ([".png", ".jpg", ".jpeg", ".gif"].some(ext => value.endsWith(ext))) return true;
      return false;
    }
  isFunction: | #js
    function() {
      const value = this.value;
      return typeof value == "function";
    }
  isColor: | #js
    function() {
      const value = this.value;
      if (typeof value != "string") return false;
      if (!value.startsWith("#")) return false;
      if (value.length != 7) return false;
      return true;
    }
style:
  .large:
    font-size: 140%
  .value-as-string:
    white-space: nowrap
    overflow: hidden
    text-overflow: ellipsis
  .comp-ui-image:
    width: 15em
  .preview .comp-ui-image:
    width: 4em
name: ui-value-preview
_:
  examples:
    count: 0
template: >-
  <div class="comp-ui-value-preview" :class="{ preview: preview }"
  path="-272450959."><ui-image v-if="isImageUrl" :url="value"
  path="-272450959.0"></ui-image><ui-value-preview-function
  v-else-if="isFunction" :value="value"
  path="-272450959.1"></ui-value-preview-function><ui-value-color
  v-else-if="isColor" :value="value" path="-272450959.2"></ui-value-color><div
  v-else-if="true" :class="cssClass" path="-272450959.3"><div :class="{
  clickable: true, 'value-as-string': true }" v-text="valueAsString"
  @click="onClickValue(valueAsString)" path="-272450959.3.0"></div><transition
  name="slide" path="-272450959.3.1"><ui-value-any v-if="isLargeType &amp;&amp;
  isMoreVisible" :value="value"
  path="-272450959.3.1.0"></ui-value-any></transition></div></div>
