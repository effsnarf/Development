dom:
  div:

props:
  interval:
  delay:
  count:
  enabled: true

data:
  started:
  tickIndex: 0
  is:
    running: false

mounted: | #js
  function() {
  }

methods:
  start: | #js
    function() {
      if (this.is.running) return;
      const now = new Date();
      if (!this.started) this.started = Date.now();
      setTimeout(this.anotherTick.bind(this), (this.delay ?? 0));
    }
  stop: | #js
    function() {
      if (!this.is.running) return;
      this.is.running = false;
    }
  tick: | #js
    function() {
      if (this.enabled) this.$emit("tick", this.tickIndex);
      if (this.count) this.tickIndex = (this.tickIndex + 1) % this.count;
    }
  anotherTick: | #js
    async function() {
      if (!this.interval) throw new Error("interval is required");
      if (!this.is.running) return;
      this.tick();
      setTimeout(this.anotherTick.bind(this), this.interval);
    }

watch:
  enabled:
    immediate: true
    handler: | #js
      function(enabled) {
        if (enabled) this.start();
        else this.stop();
      }
