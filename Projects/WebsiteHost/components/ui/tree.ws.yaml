dom:
  ul:
    v-if: root
    li:
      ui.tree.node:
        ':root': root
        ':node': root
        ':depth': '0'
        ':initial-expanded': initialExpanded
        ':expandable': initialExpandable
        ':item-type': itemType
        ':get-item': getItem || ((node) => (node?.item || node))
        ':get-item-key': getItemKey1
        ':get-children': getChildren || ((node) => node.children||[])
        ':selected-node': selectedNode1
        ':item-props': itemProps
        ':max-depth': maxDepth
        @node-click: onChildClick
        @node-hover: onChildHover
        @node-unhover: onChildUnhover
        @node-hovered: onChildHovered
props:
  root: null
  customNodeSelect: null
  selectedNodeId: null
  initialExpanded: false
  expandable: true
  itemType: null
  getItem: null
  getItemKey: null
  getChildren: null
  itemProps: null
  maxDepth: null
data:
  mySelectedNode: null
methods:
  selectNode: | #js
    function(node) {
      this.mySelectedNode = node;
    }
  onChildClick: | #js
    function(child) {
      this.$emit('node-click', child);
      this.mySelectedNode = (child == this.mySelectedNode) ? null : child;
    }
  onChildHover: | #js
    function (child) {
      this.$emit('node-hover', child);
    }
  onChildUnhover: | #js
    function (child) {
      this.$emit('node-hover', null);
      this.$emit('node-unhover', child);
    }
  onChildHovered: | #js
    function (child, isHovered) {
      this.$emit('node-hovered', child, isHovered);
    }
computed:
  selectedNode1: | #js
    function() {
      if (this.customNodeSelect) return { id: this.selectedNodeId };
      return this.mySelectedNode;
    }
  getItemKey1: | #js
    function() {
      return (this.getItemKey || this.$root.getKey);
    }
  initialExpandable: | #js
    function() {
      if (typeof this.initialExpanded == 'boolean') return !this.initialExpanded;
      return this.expandable;
    }
  depth: | #js
    function() {
      return 0;
    }
watch:
  mySelectedNode: | #js
    function(newVal, oldVal) {
      this.$emit('node-select', newVal);
    }
style:
  ul.comp-ui-tree:
    max-height: 50vh
    scroll: auto
    padding: 0 2em 0 0
example:
  dom:
    ui.tree:
      ':root': root
      div: null
  data:
    root: null
  mounted: | #js #js
    function() {
      this.root = ({
        item: "root",
        children: [
          {
            item: "node 1",
            children: [
              { item: "node 1.1" }
            ]
          },
          {
            item: "node 2",
            children: [
              { item: "node 2.1" }
            ]
          }
        ]
      });
    }
name: ui-tree
_:
  examples:
    count: 1
template: >-
  <ul class="comp-ui-tree" v-if="root" path="-484140360."><li
  path="-484140360.0"><ui-tree-node :node="root" :depth="0"
  :initial-expanded="initialExpanded" :expandable="initialExpandable"
  :item-type="itemType" :get-item="getItem || ((node) =&gt; node?.item)"
  :get-item-key="getItemKey || $root.getKey" :get-children="getChildren ||
  ((node) =&gt; node.children||[])" :selected-node="selectedNode"
  :item-props="itemProps" @node-click="onChildClick" @node-hover="onChildHover"
  @node-unhover="onChildUnhover" @node-hovered="onChildHovered"
  path="-484140360.0.0"></ui-tree-node></li></ul>
