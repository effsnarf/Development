dom:
  div:
    ui.ticker:
      :interval: duration1
      :delay: itemIndexStagger
      :count: 2
      :enabled: autoPlayLoop
      @tick: nextAutoPlayTick
    ui.html.style:
      :component: "{ source: { style: animCssStyleObj } }"
    div:
      :class: animCls
      :style: animStyle
      slot:

props:
  anim:
  animState:
  duration:
  itemIndex: 0
  itemsCount: 1
  autoPlayLoop: false
  debug:

data:
  animStateFrame: null
  autoPlayAnimState: null
  default:
    duration: 1000
  transition:
    disabled: false

methods:
  init: | #js
    function() {
    }
  nextAutoPlayTick: | #js
    async function(index) {
      const anim = this.anim;
      if (!anim) return;
      this.autoPlayAnimState = this.getNextAnimState(this.autoPlayAnimState);
    }
  getNextAnimState: | #js
    function(animState) {
      switch (animState) {
        case "entering":
          return "leaving";
        case "leaving":
          return "entering";
        default:
          return "entering";
      }
    }
  setAnimStateFrame: | #js
    async function(animState) {
      this.animStateFrame = animState;
      // when switching to [entering],
      // we want to set transition time to 0 for a moment
      // to jump immediately to the entering position
      // when we remove [entering]
      // the animation starts smoothly to the default position
      if (animState == "entering") {
        this.transition.disabled = true;
        requestAnimationFrame(() => {
          this.transition.disabled = false;
          this.animStateFrame = null;
        });
      }
    }
  getAnimCssStyleObj: | #js
    function(anim) {
      if (!anim) return null;
      const s = {};

      s[`.studio-anim-${anim.name}`] = { transition: `${this.duration1}ms` };
      const enterSelector = `.studio-anim-${anim.name}.anim-entering`;
      const leaveSelector = `.studio-anim-${anim.name}.anim-leaving`;
      s[enterSelector] = anim.enter.from;
      s[leaveSelector] = anim.leave.to;

      return s;
    }
  getStyleObj: | #js
    function() {
      const s = {};
      if (this.transition.disabled) {
        s['transition'] = '0s';
      }
      return s;
    }

computed:
  animCls: | #js
    function() {
      if (!this.anim) return [];

      const listCls = [];
      listCls.push("studio-anim");
      listCls.push(`studio-anim-${this.anim.name}`);

      if (this.animStateFrame) listCls.push(`anim-${this.animStateFrame}`);

      return listCls;
    }
  animCssStyleObj: | #js
    function() {
      return this.getAnimCssStyleObj(this.anim);
    }
  duration1: | #js
    function() {
      return (this.duration || this.default.duration);
    }
  stagger: | #js
    function() {
      return Math.round(this.duration1 / this.itemsCount);
    }
  itemIndexStagger: | #js
    function() {
      return ((this.itemIndex ?? 0) * this.stagger);
    }
  animStyle: | #js
    function() {
      return this.getStyleObj();
    }

watch:
  anim:
    immediate: true
    deep: false
    handler: | #js
      function(newAnim) {
        this.init();
      }
  animState:
    immediate: true
    handler: | #js
      function(newAnimState) {
        this.setAnimStateFrame(newAnimState);
      }
  autoPlayLoop:
    immediate: true
    handler: | #js
      function(apl) {
        // when starting auto-play, we start from entering
        if (apl) this.autoPlayAnimState = "entering";
        // when stopping auto-play, we set frame 0
        if (!apl) setTimeout(() => this.nextAutoPlayTick(0), (this.duration1 + 100));
      }
  autoPlayAnimState:
    immediate: true
    handler: | #js
      function(newAnimState) {
        if (this.autoPlayLoop) this.setAnimStateFrame(newAnimState);
      }

style:
