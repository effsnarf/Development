dom:
  div:
    ':class': '{ dropzone: true }'
    @dragover: onDragOver
    @dragenter: onDragEnter
    @dragleave: onDragLeave
    @drop: onDrop
    @click: onClick
    slot: null
    div:
      :style: "{ display: 'none' }"
      div:
        ref: tooltip
        slot:
          name: tooltip
props:
  enabled: true
  accepts:
  tooltip: true
data:
  isDraggedOver: false
  ghost:
    dropzone: null
    tooltip: null
mounted: | #js
  function() {
    this.$root.e.on("drag.start", this.onDragStart.bind(this));
    this.$root.e.on("drag.end", this.onDragEnd.bind(this));
  }
methods:
  createGhost: | #js
    function() {
      if (this.ghost.dropzone) return;
      this.ghost.dropzone = document.createElement('div');
      this.ghost.dropzone.classList.add('ghost-dropzone');
      // copy $el content into an inner div
      const inner = document.createElement('div');
      inner.innerHTML = this.$el?.innerHTML;
      inner.style.pointerEvents = 'none';
      this.ghost.dropzone.appendChild(inner);
      // position the ghost exactly where this $el is
      const rect = this.$root.getAbsoluteRect(this.$el);
      this.ghost.dropzone.style.position = 'fixed';
      this.ghost.dropzone.style.top = rect.top + 'px';
      this.ghost.dropzone.style.left = rect.left + 'px';
      this.ghost.dropzone.style.width = rect.width + 'px';
      this.ghost.dropzone.style.height = rect.height + 'px';
      this.ghost.dropzone.style.zIndex = 1000;
      // create ghost tooltip
      this.ghost.tooltip = document.createElement('div');
      this.ghost.tooltip.classList.add('ghost-tooltip');
      this.ghost.tooltip.innerHTML = this.$refs.tooltip?.innerHTML;
      this.ghost.dropzone.appendChild(this.ghost.tooltip);
      // bind all the drag and drop events
      const dMethodKeys = Object.keys(this.$options.methods)
        .filter(m => m.startsWith("onD"));
      dMethodKeys.forEach(m => {
        this.ghost.dropzone.addEventListener(m.substring(2).toLowerCase(), this[m].bind(this));
      });
      // add the ghost to the document
      document.body.appendChild(this.ghost.dropzone);
    }
  removeGhost: | #js
    function() {
      if (!this.ghost.dropzone) return;
      // remove the dropzone
      this.ghost.dropzone.remove();
      this.ghost.dropzone = null;
      // remove the tooltip
      this.ghost.tooltip.remove();
      this.ghost.tooltip = null;
    }
  setTooltipPosition: | #js
    function(e) {
      const rect = this.$root.getAbsoluteRect(this.$el);
      const t = this.ghost.tooltip;
      t.style.position = 'fixed';
      t.style.top = e.clientY + 0 + 'px';
      t.style.left = e.clientX + 50 + 'px';
      t.style.transform = 'translate(0, -50%)';
      t.innerHTML = this.$refs.tooltip?.innerHTML;
    }
  onDragStart: | #js
    function(e, dragItem) {
      if (!this.enabled) return;
      if (!this.accepts?.includes(dragItem.type)) return;
      this.createGhost();
    }
  onDragEnd: | #js
    function(e) {
      if (!this.enabled) return;
      this.removeGhost();
    }
  onDragOver: | #js
    function(e) {
      if (!this.enabled) return;
      if (!this.accepts?.includes(this.$root.dragItem?.type)) return;
      this.cancelEvent(e);
      this.isDraggedOver = true;
      this.ghost.dropzone.classList.add('drag-over');
      if (this.tooltip) this.ghost.tooltip.classList.add('visible');
      this.setTooltipPosition(e);
    }
  onDragEnter: | #js
    function(e) {
      if (!this.enabled) return;
      this.cancelEvent(e);
      this.isDraggedOver = true;
      this.$emit("drag-enter", this.$root.dragItem);
    }
  onDragLeave: | #js
    function(e) {
      if (!this.enabled) return;
      this.cancelEvent(e);
      this.isDraggedOver = false;
      this.ghost.tooltip.classList.remove('visible');
      this.ghost.dropzone.classList.remove('drag-over');
    }
  onDrop: | #js
    function(e) {
      if (!this.enabled) return;
      this.cancelEvent(e);
      this.isDraggedOver = false;
      const dragItem = this.$root.dragItem;
      this.$root.dragItem = null;
      this.$emit('drag-over', false);
      this.$emit('drop-item', dragItem);
    }
  onClick: | #js
    function(e) {
      this.$emit('click', e);
    }
  cancelEvent: | #js
    function(e) {
      e.preventDefault();
      //e.stopPropagation();
    }
style:
  .drag-over:
    background-color: rgba(255, 255, 255, 0.1)
    border: 3px dashed rgba(20, 128, 255, 0.5)
example:
  dom:
    ui.dnd.dropzone:
      .box1.w-100pc.text-center:
        v-text: '''Drop here'''
      @drop-item: onDropItem
  methods:
    onDropItem: | #js
      function(dragItem) {
        alertify.message("Dropped item");
      }
_:
  examples:
    count: 1
name: ui-dnd-dropzone
template: >-
  <div class="comp-ui-dnd-dropzone" :class="{ dropzone: true, 'drag-over':
  isDraggedOver }" @dragover="onDragOver" @dragenter="onDragEnter"
  @dragleave="onDragLeave" @drop="onDrop" @click="onClick"
  path="-2085012855."><slot></slot></div>
