dom:
  div:
    v-if: '!multiline'
    ':class': '{ disabled: !enabled, camouflage: (is.focused ? false : camouflage) }'
    .icon:
      v-if: icon
      v-text: icon
    input:
      ref: input1
      ':class': '{ hasIcon: icon }'
      ':style': textBoxStyle1
      ':type': type
      ':placeholder': hint
      ':value': value
      ':disabled': '!enabled'
      @focus: is.focused = true
      @blur: is.focused = false
      @input: onInput
      @keydown: onTextBoxKeyDown
  div:
    v-else-if: multiline
    textarea:
      ref: textarea1
      ':value': value
      ':placeholder': hint
      @focus: $emit('focus')
      @blur: $emit('blur')
      @input: onTextAreaInput
      @keydown: onTextAreaKeyDown
      @keyup: onTextAreaKeyUp
      @click: onTextAreaClick
    pre:
      v-if: "false"
      code:
        v-text: value
props:
  type: text
  value: ""
  hint: ""
  icon: ""
  enabled: true
  multiline: false
  autoResize: false
  autoFocus: false
  camouflage: false
  textBoxStyle: null
  debounce: 0
data:
  hovered:
    identifier:
      path:
  is:
    focused: false
  _onInput: null
mounted: | #js
  function() {
    if (this.autoFocus) {
      this.$nextTick(() => {
        this.$refs.input1.focus();
      });
    }
  }
methods:
  detectIdentifierPath: | #js
    function(e) {
      this.hovered.identifier.path = this.getExpUnderCursor(e);
      this.$emit('hovered-identifier-path', this.hovered.identifier.path);
    }
  getExpUnderCursor: | #js
    function(e) {
      const textbox = e.target;
      const caretPos = textbox.selectionStart;
      const text = textbox.value;
      // Find the start of the identifier by moving left
      let start = caretPos;
      while (start > 0 && /[$\w\u00A0-\uFFFF]/.test(text[start - 1])) {
        start--;
      }
      // Find the end of the identifier by moving right, stopping at dots
      let end = caretPos;
      while (end < text.length && /[$\w\u00A0-\uFFFF]/.test(text[end])) {
        end++;
      }
      // Now stop at the first dot (.) encountered
      while (end < text.length && text[end] === '.') {
        end++;
      }
      // Now find the full path by moving left to include preceding parts
      let fullPathStart = start;
      while (fullPathStart > 0 && /[\w$.]/.test(text[fullPathStart - 1])) {
        fullPathStart--;
      }
      // Extract the full path up to the current identifier
      let fullPath = text.slice(fullPathStart, end);
      if (fullPath.endsWith('.')) fullPath = fullPath.slice(0, -1);
      // if [fullPath] is a number, ignore it
      if (!isNaN(fullPath)) fullPath = null;
      return fullPath; // Return the complete path up to the current identifier
    }
  getCharIndexFromCursor: | #js
    function(textbox, offsetX) {
      const text = textbox.value;
      const font = window.getComputedStyle(textbox).font;
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      context.font = font;
      let width = 0;
      for (let i = 0; i < text.length; i++) {
        const charWidth = context.measureText(text[i]).width;
        width += charWidth;
        if (width > offsetX) return i;
      }
      return -1;
    }
  onInput: | #js
    function(e) {
      const self = this;
      const input = e.target;
      if (!this._onInput) this._onInput = ((value) => {
        self.$emit('input', value);
      }).debounce(this.debounce);
      this._onInput(input.value);
      this.resizeInput(input);
    }
  onTextBoxKeyDown: | #js
    function(e) {
      // emit 'enter'
      if (e.key?.toLowerCase() == 'enter') {
        this.$emit('enter', e);
      }
    }
  onTextAreaClick: | #js
    function(e) {
      this.detectIdentifierPath(e);
    }
  onTextAreaKeyUp: | #js
    function(e) {
      this.detectIdentifierPath(e);
    }
  onTextAreaKeyDown: | #js
    function(e) {
      if (e.key == 'Tab') {
        e.preventDefault();
        let start = e.target.selectionStart;
        let end = e.target.selectionEnd;
        let value = e.target.value;
        e.target.value = value.substring(0, start) + "  " + value.substring(end);
        e.target.selectionStart = e.target.selectionEnd = start + 2;
      }
      return false;
    }
  onTextAreaInput: | #js
    function(e) {
      const textarea = e.target;
      this.$emit('input', textarea.value);
      this.resizeTextArea(textarea);
      Prism.highlightAll();
    }
  resizeInput: | #js
    function(input) {
      if (!this.autoResize) return;
      if (!input) return;
      const chars = (Math.max(input.value.length, 8) + 2);
      const width = `${chars}ch`;
      input.style.width = "";
      input.style.width = `${width}`;
    }
  resizeTextArea: | #js
    function(textarea, heightLimit) {
      if (!this.autoResize) return;
      heightLimit = heightLimit || 200;
      let height = Math.max(50, Math.min(textarea.scrollHeight, heightLimit));
      height = `${height}px`;
      textarea.style.height = "";
      textarea.style.height = `${height}`;
    }  
computed:
  textBoxStyle1: | #js
    function() {
      const style = Objects.clone(this.textBoxStyle ?? {});
      if (this.icon) {
        style.paddingLeft = `${(1 + (this.icon.length / 2))}em !important`;
      }
      return style;
    }
watch:
  value:
    handler: | #js
      async function(value) {
        await this.$nextTick();
        this.resizeInput(this.$refs.input1);
        if (this.multiline) {
          this.resizeTextArea(this.$refs.textarea1);
        }
      }
    immediate: true
name: ui-input-text-box
style:
  .camouflage:not(:hover) input, .camouflage:not(:hover) textarea:
    border: none
    background: no-repeat
    box-shadow: none
    opacity: 0.5
  .icon:
    position: absolute
    margin: 0.25em
    width: fit-content
    z-index: 10
_:
  examples:
    count: 0
template: >-
  <div class="comp-ui-input-text-box" v-if="!multiline" :class="{ disabled:
  !enabled, camouflage }" path="739613128."><div class="icon" v-if="icon"
  v-text="icon" path="739613128.0"></div><input ref="input1" :class="{ hasIcon:
  icon }" :style="textBoxStyle" :type="type" :placeholder="hint" :value="value"
  :disabled="!enabled" @input="onInput" path="739613128.1"/></div><textarea
  ref="textarea1" v-else-if="multiline" :value="value" :placeholder="hint"
  @focus="$emit('focus')" @blur="$emit('blur')" @input="onTextAreaInput"
  @keydown="onTextAreaKeyDown"></textarea>
