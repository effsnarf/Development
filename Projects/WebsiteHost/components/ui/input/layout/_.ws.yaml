dom:
  div:
    .layout-type-options:
      div:
        v-for: layoutType in shownLayoutTypes
        :class: "{ selected: (layoutType == initial.layout?.type) }"
        @mouseenter: previewLayoutType(layoutType)
        @mouseleave: previewLayoutType(null)
        @click: selectLayoutType(layoutType)
        component:
          :is: "('ui.input.' + layoutType + '.example').kebabize()"
      h2:
        v-if: "false"
        ui.tabs:
          :options: shownLayoutTypes
          direction: horizontal
          :can-select-none: "false"
          v-model: layoutTypeIndex
    .flex:
      ui.tabs:
        :options: tabOptionNames
        direction: vertical
        :can-select-none: "true"
        :drawer: "false"
        v-model: selectedTabIndex
      .flex-grow-1:
        transition.group:
          name: slide-hor-ver
          v-for: (tabOption, i) in tabOptions
          div:
            v-if: (i == selectedTabIndex)
            :key: tabOption
            component:
              :is: "('ui.input.layout.'+tabOption).replaceAll('.', '-')"
              :layout-type: layout?.type
              :direction: layout.direction
              :value: getComponentValue(tabOption)
              @preview: (value) => onComponentPreview(tabOption, value)
              @input: (value) => onComponentInput(tabOption, value)
props:
  value: null
  layoutTypes: null
data:
  layout:
  tabOptions:
  selectedTabIndex: 0
  layoutPropNames: ["grid", "gap", "order", "justify.content", "align.items", "size"]
  allLayoutTypes: ["grid.y", "grid.x", "grid.uniform", "grid.mosaic"]
  layoutTypeIndex: null
  initial:
    layout:
methods:
  previewLayoutType: | #js
    function(layoutType) {
      this.onComponentPreview("type", layoutType);
    }
  selectLayoutType: | #js
    function(layoutType) {
      this.onComponentInput("type", layoutType);
    }
  onComponentPreview: | #js
    function(tabOption, value) {
      if (value) return Objects.setProperty(this.layout, tabOption, value);
      const initialValue = Objects.getProperty(this.initial.layout, tabOption);
      Objects.setProperty(this.layout, tabOption, initialValue);
      this.$emit("preview", this.layout);
    }
  onComponentInput: | #js
    function(tabOption, value) {
      if (!this.layout) return;
      Objects.setProperty(this.layout, tabOption, value);
      Objects.setProperty(this.initial.layout, tabOption, value);
      this.$emit("preview", this.layout);
      this.$emit("input", this.layout);
    }
  getComponentValue: | #js
    function(tabOption) {
      return Objects.getProperty(this.initial.layout, tabOption);
    }
  getTabOptions: | #js
    function(layout) {
      const options = [];
      for (const key of this.layoutPropNames) {
        if (Objects.pathExists(layout, key)) options.push(key);
      }
      return options;
    }
computed:
  shownLayoutTypes: | #js
    function() {
      return (this.layoutTypes ?? this.allLayoutTypes);
    }
  layoutTypeName: | #js
    function() {
      return this.shownLayoutTypes[this.layoutTypeIndex];
    }
  tabOptionNames: | #js
    function() {
      return this.tabOptions
        .map(t => t.replaceAll('.', '-'))
        .map(t => `ðŸ§± ${t}`);
    }
  Objects: | #js
    function() {
      return window.Objects;
    }
watch:
  layoutTypes:
    immediate: true
    handler: | #js
      async function(newLayoutTypes) {
        this.layoutTypeIndex = null;
        if (this.shownLayoutTypes.length == 1) {
          this.layoutTypeIndex = 0;
        }
      }
  layoutTypeIndex:
    immediate: true
    handler: | #js
      function(newIndex) {
        this.onComponentInput("type", this.allLayoutTypes[newIndex]);
      }
  layout:
    handler: | #js
      function(layout) {
        if (Objects.areEqual(layout, this.value)) return;
        this.$emit('input', layout);
      }
    deep: true
  value:
    handler: | #js
      function(layout) {
        if (!this.initial.layout) this.initial.layout = Objects.clone(layout);
        this.layout = layout;
        this.tabOptions = this.getTabOptions(layout);
      }
    immediate: true
    deep: true
style:
  .layout-type-options:
    display: flex
  .layout-type-options > *:
    flex: 1
    padding: 0.5em
    cursor: pointer
  .layout-type-options > *:hover:
    background: "#ffffff40"
_:
  examples:
    count: 0
name: ui-input-layout
template: >-
  <div class="comp-ui-input-layout" path="-1483325720."><h2
  path="-1483325720.0"><ui-title icon="ðŸ§©" text="layout"
  path="-1483325720.0.0"></ui-title></h2><ui-tabs :options="['ðŸ§© direction', 'ðŸ‘‰
  order', 'ðŸŽ« item size', 'ðŸŽ« justify']" direction="vertical"
  :can-select-none="true" path="-1483325720.1"><template v-slot="tab0"
  path="-1483325720.1.0"><ui-input-layout-direction v-model="direction"
  path="-1483325720.1.0.0"></ui-input-layout-direction></template><template
  v-slot="tab1" path="-1483325720.1.1"><ui-input-layout-order
  :direction="direction" v-model="order"
  path="-1483325720.1.1.0"></ui-input-layout-order></template><template
  v-slot="tab2" path="-1483325720.1.2"><ui-input-layout-item-size
  v-model="item.size"
  path="-1483325720.1.2.0"></ui-input-layout-item-size></template><template
  v-slot="tab3" path="-1483325720.1.3"><ui-input-layout-justify
  v-model="item.justify"
  path="-1483325720.1.3.0"></ui-input-layout-justify></template></ui-tabs></div>
