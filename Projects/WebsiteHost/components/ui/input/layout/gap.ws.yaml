dom:
  div:
    .flex-x:
      .flex-y:
        v-for: x in [0, 1, 2, 3, 4]
        .gap-option:
          v-for: y in [0, 1, 2, 3, 4]
          :class: "{ selected: (value == getGapValue(x, y)) }"
          @mouseenter: onPreview(getGapValue(x, y))
          @mouseleave: onPreview(null)
          @click: onSelect(getGapValue(x, y))
          ui.dom.example:
            :boxes: "4"
            :box-aspect: "1"
            :box-width: "'1rem'"
            :grid-template: "'1fr 1fr / 1fr 1fr'"
            :gap: "getGapValue(x, y)"
          .dimmed.text-center:
            v-text: "parseFloat(getGapValue(x, y))"

props:
  value:

data:
  clearPreviewTimeout:

methods:
  onPreview: | #js
    function(gap) {
      clearTimeout(this.clearPreviewTimeout);
      if (gap) return this.$emit("preview", gap);
      this.clearPreviewTimeout = setTimeout(() => this.$emit("preview", null), 400);
    }
  onSelect: | #js
    function(gap) {
      clearTimeout(this.clearPreviewTimeout);
      this.$emit("input", gap);
    }
  getGapValue: | #js
    function(x, y) {
      return ((x*3+y)/10)+'rem';
    }

style:
  .flex-x, .flex-y:
    display: flex
    gap: 1em
  .flex-x:
    flex-direction: row
    align-items: baseline
  .flex-y:
    flex-direction: column
    justify-content: space-around
  .gap-option:not(:nth-child(1)):
    display: none
    opacity: 0.5
  .flex-y:hover .gap-option:not(:nth-child(1)):
    display: block
  .gap-option:
    border: 1px solid gray
    padding: 0.5em
    opacity: 0.8
    cursor: pointer
    transition: opacity 0
  .gap-option:hover:
    background: "#80808040"
    opacity: 1
    transition: opacity 0.3
