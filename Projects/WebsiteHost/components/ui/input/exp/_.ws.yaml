dom:
  div:
    ui.input.text.box:
      hint: expression
      :multiline: "true"
      :auto-resize: "true"
      @input: onInput
      v-model: tempExp
    .error:
      v-if: error
      v-text: error
    div:
      h3:
        v-text: "'ðŸ§Š context'"
      div:
        .flex:
          ui.title:
            v-for: field in contextFields
            icon: ðŸ§Š
            :text: field
        .flex.flex-wrap:
          ui.title:
            v-for: field in dataItemFields
            icon: ðŸ§Š
            :text: field
    div:
      v-if: dataItems?.length
      :key: key1
      :style: "{ 'max-width': '40em' }"
      div:
        ui.value:
          :value: "sampleDataItems"
      div:
        ui.value:
          :value: "expDataItems"

props:
  dataItems:
  dataItemContextKey: "$item"
  context:
  evalExpItem:
  error:
  value:

data:
  contextFields:
  dataItemFields:
  expFields:
  fields:
  tempExp:
  sampleDataItems:
  expDataItems:
  sampleDataItemsSize: 3
  is:
    inited: false
  key1: 1

mounted: | #js
  function() {
  }
methods:
  getContextFields: | #js
    function() {
      return Object.keys(this.context);
    }
  getExpFields: | #js
    function(item) {
      const contextFields = Object.keys(this.context);
      const itemFields = this.getDataItemFields([item]).except(contextFields);
      const fields = [...contextFields, ...itemFields];
      return fields;
    }
  getDataItemFields: | #js
    function(dataItems) {
      return dataItems
        .take(10)
        .flatMap(d => Object.keys(d??{}))
        .distinct()
        .sortBy(f => f);
    }
  onInput: | #js
    function(value) {
      if (!this.__onInput) this.__onInput = this._onInput.bind(this).throttle(400);
      this.__onInput(value);
    }
  _onInput: | #js
    function(value) {
      this.expDataItems = this.sampleDataItems.map((dataItem) => this.evalExpItem(this.tempExp, dataItem));
      this.$emit('input', value);
    }
  refresh: | #js
    function() {
      this.key1++;
    }

watch:
  context:
    immediate: true
    handler: | #js
      function(context) {
        this.contextFields = this.getContextFields(context);
      }
  value:
    handler: | #js
      function(value) {
        if (this.is.inited) return;
        this.is.inited = true;
        this.tempExp = value;
      }
    immediate: true
  dataItems:
    handler: | #js
      function(dataItems) {
        this.dataItemFields = this.getDataItemFields(dataItems);
        this.expFields = this.getExpFields(dataItems?.[0]);
        this.sampleDataItems = [...dataItems].take(this.sampleDataItemsSize);
        this.expDataItems = this.sampleDataItems.map(this.evalExpItem.bind(this, this.tempExp));
        this.refresh();
      }
    immediate: true
    deep: false

computed:

style:
  .comp-ui-input-exp > .flex > *:
    width: 50%
    overflow: hidden
    white-space: nowrap
