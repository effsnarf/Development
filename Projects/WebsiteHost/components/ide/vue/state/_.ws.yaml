dom:
  .flex:
    div:
      ':class': getSliderClass()
      h3: 
        ui.title: 
          text: ðŸ§Š State
      transition: 
        name: slide
        table:
          class: list1
          ide.vue.state.item:
            v-for: field in getFields(vue())
            ':class': getCssClass(field)
            @click: toggleWatch(field)
            ':vue': vue
            ':item': field
            ':key': vue()._uid+'.'+field.key
    transition: 
      name: slide-hor
      .watches:
        v-if: watchedFieldKeys.length
        transition.group:
          tag: ul
          name: slide
          li:
            v-for: field in watchedFields
            class: clickable
            @click: console.log(vue()[field.key])
            ':key': field.key
            h3: 
              class: opacity-50
              ui.title: 
                ':icon': $root.getIcon(field)
                ':text': field.key
            ui.value.any:
              ':value': field.newValue.value
              ':preview': 'false'
props:
  vue: null
data:
  watchedFieldKeys: []
  selectedItem: null
mounted: | #js
  async function() {
    //this.$root.$on("state-changed", this.onStateChanged.bind(this));
  }
methods:
  getFields: | #js
    function(vue) {
      if (!vue) return [];
      let fields = [];
      fields.push(...Object.keys(vue.$data || {}).map((k) => {
          return { type: "d", key: k, newValue: StateValue.from(vue.$data[k]) };
      }));
      fields.push(...Object.keys(vue.$props || {}).map((k) => {
          return { type: "p", key: k, newValue: StateValue.from(vue.$props[k]) };
      }));
      fields.push(...this.getComputedKeys(vue).map((k) => {
          return { type: "c", key: k, newValue: StateValue.from(vue[k]) };
      }));
      fields = fields.filter((f) => !f.key.startsWith("_"));
      fields = fields.sortBy((f) => f.type, (f) => f.key);
      return fields;
    }
  getComputedKeys: | #js
    function(vue) {
      if (!vue) return [];
      let keys = Object.keys(vue._computedWatchers || vue.$options._computedWatchers || {});
      keys = keys.filter((k) => !k.startsWith("$"));
      keys = keys.sortBy((k) => k);
      return keys;
    }
  getSliderClass: | #js
    function() {
      const cls = {};
      if (this.watchedFieldKeys.length) {
        cls["slider-closed"] = true;
      }
      else
      {
        cls["slider-opened"] = true;
      }
      return cls;
    }
  toggleWatch: | #js
    function(field) {
      if (this.watchedFieldKeys.includes(field.key)) {
        this.watchedFieldKeys = this.watchedFieldKeys.filter(w => w != field.key);
      } else {
        this.watchedFieldKeys.push(field.key);
      }
    }
  getCssClass: | #js
    function(item) {
      const cls = {};
      cls.clickable = true;
      cls.selected = (this.watchedFieldKeys.includes(item.key));
      return cls;
    }
  onStateChanged: | #js
    function(change) {
      if (!change) return;
      if (this.vue()._uid == change.uid) this.refresh();
    }
  refresh: | #js
    function() {
      this.key1++;
    }
computed:
  watchedFields: | #js
    function() {
      const fields = this.getFields(this.vue());
      return fields.filter(f => this.watchedFieldKeys.includes(f.key));
    }
  console: | #js
    function() {
      return console;
    }
style:
  .comp-ide-state-tracker:
    overflow: hidden
  .watches:
    max-height: 50vh
    overflow: auto
    padding: 1em 2em
  .watches ul:
    gap: 1em
  .watches h3:
    font-size: 1.2rem
  .comp-ui-title:
    border-radius: 0
    border-bottom: '1px solid #000'
  .flex:
    gap: 1em
  ul:
    display: flex
    flex-direction: column-reverse
  ul:not(.changes) .grid:
    opacity: 0.5
  tr:hover:
    background: '#ffffff10'
    transition: 0s
name: ide-vue-state
_:
  examples:
    count: 0
template: >-
  <div class="comp-ide-vue-state flex" path="2112019429."><div
  :class="getSliderClass()" path="2112019429.0"><h3
  path="2112019429.0.0"><ui-title text="ðŸ§Š State"
  path="2112019429.0.0.0"></ui-title></h3><transition name="slide"
  path="2112019429.0.1"><table class="list1"
  path="2112019429.0.1.0"><ide-vue-state-item v-for="field in getFields(vue())"
  :class="getCssClass(field)" @click="toggleWatch(field)" :vue="vue"
  :item="field" :key="vue()._uid+'.'+field.key"
  path="2112019429.0.1.0.0"></ide-vue-state-item></table></transition></div><transition
  name="slide-hor" path="2112019429.1"><div class="watches"
  v-if="watchedFieldKeys.length" path="2112019429.1.0"><transition-group
  tag="ul" name="slide" path="2112019429.1.0.0"><li class="clickable"
  v-for="field in watchedFields" @click="console.log(vue()[field.key])"
  :key="field.key" path="2112019429.1.0.0.0"><h3 class="opacity-50"
  path="2112019429.1.0.0.0.0"><ui-title :icon="$root.getIcon(field)"
  :text="field.key" path="2112019429.1.0.0.0.0.0"></ui-title></h3><ui-value-any
  :value="field.newValue.value" :preview="false"
  path="2112019429.1.0.0.0.1"></ui-value-any></li></transition-group></div></transition></div>
