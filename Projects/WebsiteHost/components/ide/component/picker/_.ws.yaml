dom:
  div: 
    class: highlighted
    ui.keyboard:
      @ctrl: isCtrl=$event
    ui.mouse:
      @hovered-element: onHoveredElement
      ':global': true
    ui.context.window:
      ref: context1
      v-show: showPicker
      ':global': 'true'
      @pinned: onPinned
      .flex.flex-row.gap-1:
        .flex.flex-column.gap-1:
          div: 
            ':class': componentTreeClass
            ide.component.picker.vue.list: 
              ':vues': parentChainVues
              :show-ide-components: showIdeComponents
              ':tree': 'true'
              ':selectedVue': selectedVue
              @hover: onHoverVue
              @select: onSelectVue
            ide.component.picker.vue.list: 
              ':vues': childChainVues
              :show-ide-components: showIdeComponents
              ':selectedVue': selectedVue
              ':style': childChainStyle
              @hover: onHoverVue
              @select: onSelectVue
            .opacity-hover.mt-l2:
              ui.checkbox:
                text: ide components
                v-model: showIdeComponents
          ide.element.inspector:
            class: hidden
            ':element': hoveredElement
        div: 
          ide.vue.inspector:
            ':vue': selectedVue
props: null
data:
  hoveredElement: null
  hoveredVue: null
  selectedVue: null
  parentChainVues: null
  childChainVues: null
  showPicker: false
  isCtrl: false
  selectedViewNode: null
  selectedEditorTabIndex: 0
  isPinned: false
  showIdeComponents: false
methods:
  onPinned: | #js
    function(pinned) {
      this.isPinned = pinned;
      if (pinned) return;
      this.selectedVue = null;
    }
  onHoverVue: | #js
    function(vue) {
      this.hoveredVue = (!vue ? null : (() => vue));
    }
  onSelectVue: | #js
    function(vue) {
      if ((vue && this.selectedVue) && (vue._uid == this.selectedVue()._uid)) vue = null;
      this.selectedVue = (!vue ? null : (() => vue));
    }
  onHoveredElement: | #js
    function(el) {
      if (this.$refs.context1?.isPinned) return;
      this.hoveredElement = el;
    }
  getParentChainVues: | #js
    function(vue) {
      if (!vue) return [];
      const maxChainLength = 6;
      let chain = [];
      let parent = vue;
      while (parent && (chain.length < maxChainLength)) {
        const parentVue = parent;
        chain.push(() => parentVue);
        parent = this.getParentVue(parent);
      }
      chain = chain.reverse();
      return chain;
    }
  getChildChainVues: | #js
    function(vue) {
      if (!vue) return [];
      const children = [];
      const addChildren = (vue) => {
        if (!vue) return;
        for (const child of vue.$children) {
          if (["transition", "transition-group"].includes(child.$options._componentTag)) {
            addChildren(child);
            continue;
          }
          const childVue = child;
          children.push(() => childVue);
        }
      };
      addChildren(vue);
      return children;
    }
  getParentVue: | #js
    function(vue) {
      return this.getVueFromVnode(vue.$parent);
    }
  getVueFromElement: | #js
    function(el) {
      const vue = this.getVueFromVnode(this.getVnodeFromElement(el));
      return vue;
    }
  getVnodeFromElement: | #js
    function(el) {
      if (!el) return null;
      if (el.__vue__) return el.__vue__;
      return this.getVnodeFromElement(el.parentElement);
    }
  getVueFromVnode: | #js
    // Skip vnodes like <keep-alive>, <transition>, etc.
    function(vnode) {
      if (!vnode) return null;
      if (this.vNodeIsVue(vnode)) return vnode;
      return this.getVueFromVnode(vnode.$parent);
    }
  vNodeIsVue: | #js
    function(vnode) {
      if ([`transition`, `transition-group`, `keep-alive`].includes(vnode.$options._componentTag)) return false;
      return true;
    }
  updateChains: | #js
    function(vue) {
      this.parentChainVues = this.getParentChainVues(vue);
      this.childChainVues = this.getChildChainVues(vue);
    }
computed:
  childChainStyle: | #js
    function() {
      return {
        'margin-left': `${(this.parentChainVues?.length||0) * 0.8}em`
      };
    }
  showComponentTree: | #js
    function() {
      return true;
    }
  componentTreeClass: | #js
    function() {
      return {
        'component-tree': true,
        'slider-closed': (!!this.selectedVue),
        'slider-opened': (!!!this.selectedVue)
      };
    }
  activeVue: | #js
    function() {
      return this.hoveredVue || this.selectedVue;
    }
watch:
  isCtrl:
    handler: | #js
      function(isCtrl) {
        this.showPicker = (isCtrl || this.$refs.context1?.isPinned);
      }
  hoveredElement: | #js
    function(newEl, oldEl) {
      const vue = this.getVueFromElement(newEl);
      this.hoveredVue = (!vue ? null : () => vue);
    }
  hoveredVue:
    handler: | #js
      function(newVue, oldVue) {
        (oldVue?.())?.$el.classList?.remove(`highlighted`);
        if (this.showPicker)
        {
          (newVue?.())?.$el.classList?.add(`highlighted`);
        }
        if (!this.$refs.context1?.isPinned) this.updateChains((newVue?.()));
      }
    immediate: true
  selectedVue:
    handler: | #js
      function(newVue, oldVue) {
        (oldVue?.())?.$el.classList?.remove(`highlighted2`)
        if (!newVue) return;
        (newVue?.())?.$el.classList?.add(`highlighted2`);
        this.updateChains((newVue?.()));
      }
    immediate: true
  showPicker:
    handler: | #js
      function(showPicker) {
        if (!showPicker && !this.$refs.context1?.isPinned) this.selectedVue = null;
      }
    immediate: true
style:
  .component-tree:
    max-height: 50vh
    margin-top: 1em
    margin-right: 2em
    overflow-x: hidden
    overflow-y: auto
  div:
    font-family: monospace
name: ide-component-picker
_:
  examples:
    count: 0
template: >-
  <div class="comp-ide-component-picker highlighted"
  path="-646340253."><ui-keyboard @ctrl="isCtrl=$event"
  path="-646340253.0"></ui-keyboard><ui-mouse
  @hovered-element="onHoveredElement" :global="true"
  path="-646340253.1"></ui-mouse><ui-context-window ref="context1"
  v-if="showPicker" :global="true" @pinned="onPinned" path="-646340253.2"><div
  class="flex flex-row gap-1" path="-646340253.2.0"><div class="flex flex-column
  gap-1" path="-646340253.2.0.0"><div :class="componentTreeClass"
  path="-646340253.2.0.0.0"><ide-component-picker-vue-list
  :vues="parentChainVues" :tree="true" :selectedVue="selectedVue"
  @hover="onHoverVue" @select="onSelectVue"
  path="-646340253.2.0.0.0.0"></ide-component-picker-vue-list><ide-component-picker-vue-list
  :vues="childChainVues" :selectedVue="selectedVue" :style="childChainStyle"
  @hover="onHoverVue" @select="onSelectVue"
  path="-646340253.2.0.0.0.1"></ide-component-picker-vue-list></div><ide-element-inspector
  class="hidden" :element="hoveredElement"
  path="-646340253.2.0.0.1"></ide-element-inspector></div><div
  path="-646340253.2.0.1"><ide-vue-inspector :vue="selectedVue"
  path="-646340253.2.0.1.0"></ide-vue-inspector></div></div></ui-context-window></div>
