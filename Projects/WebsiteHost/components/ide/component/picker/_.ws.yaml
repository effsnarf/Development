dom:
  div: 
    class: highlighted
    ui.keyboard:
      @ctrl: isCtrl=$event
    ui.mouse:
      @hovered-element: onHoveredElement
      ':global': true
    ui.context.window:
      ref: context1
      v-if: showPicker
      ':global': 'true'
      @pinned: onPinned
      .flex.flex-row.gap-1:
        .flex.flex-column.gap-1:
          div: 
            ':class': componentTreeClass
            ide.component.picker.vue.list: 
              ':uids': parentChainUIDs
              ':selectedVueUID': selectedVueUID
              className: parent-chain
              @hover: onHoverVue
              @select: onSelectVue
            ide.component.picker.vue.list: 
              ':uids': childChainUIDs
              ':selectedVueUID': selectedVueUID
              className: child-chain
              ':style': childChainStyle
              @hover: onHoverVue
              @select: onSelectVue
          ide.element.inspector:
            class: hidden
            ':element': hoveredElement
        h2:
          v-if: 'false'
          ui.title:
            icon: ðŸ“¦
            ':text': getTitle(hoveredVueUID)
        div: 
          v-show: activeVueUID
          ide.component.editor:
            ':vue-uid': activeVueUID
            @selected-view-node: selectedViewNode=$event
            @selected-tab-index: selectedEditorTabIndex=$event
props: null
data:
  hoveredElement: null
  hoveredVueUID: null
  selectedVueUID: null
  parentChainUIDs: null
  childChainUIDs: null
  showPicker: false
  isCtrl: false
  selectedViewNode: null
  selectedEditorTabIndex: 0
  isPinned: false
methods:
  onPinned: | #js
    function(pinned) {
      this.isPinned = pinned;
      if (pinned)
      {
        //this.selectedVueUID = this.hoveredVueUID;
        return;
      }
      this.selectedVueUID = null;
    }
  onHoverVue: | #js
    function(uid, hovered) {
      this.hoveredVueUID = hovered ? uid : null;
    }
  onSelectVue: | #js
    function(uid) {
      if (uid == this.selectedVueUID) uid = null;
      this.selectedVueUID = uid;
    }
  getTitle: | #js
    function(vue) {
      return this.$root.vm.getVue(vue)?.$options._componentTag;
    }
  onHoveredElement: | #js
    function(el) {
      if (this.$refs.context1?.isPinned) return;
      this.hoveredElement = el;
    }
  getParentChainUIDs: | #js
    function(vue) {
      this.$root.vm.registerVue(vue);
      const maxChainLength = 6;
      let chain = [];
      let parent = vue;
      while (parent && (chain.length < maxChainLength)) {
        this.$root.vm.registerVue(parent);
        chain.push(parent._uid);
        parent = this.getParentVue(parent);
      }
      chain = chain.reverse();
      return chain;
    }
  getChildChainUIDs: | #js
    function(vue) {
      return this.$root.vm.getDescendants(vue).map(v => v._uid);
      
      this.$root.vm.registerVue(vue);
      const children = [];
      const addChildren = (vue) => {
        if (!vue) return;
        this.$root.vm.registerVue(vue);
        for (const child of vue.$children) {
          if (["transition", "transition-group"].includes(child.$options._componentTag)) {
            addChildren(child);
            continue;
          }
          children.push(child._uid);
        }
      };
      addChildren(vue);
      return children;
    }
  getParentVue: | #js
    function(vue) {
      return this.getVueFromVnode(vue.$parent);
    }
  getVueFromElement: | #js
    function(el) {
      const vue = this.getVueFromVnode(this.getVnodeFromElement(el));
      this.$root.vm.registerVue(vue);
      return vue;
    }
  getVnodeFromElement: | #js
    function(el) {
      if (!el) return null;
      if (el.__vue__) return el.__vue__;
      return this.getVnodeFromElement(el.parentElement);
    }
  getVueFromVnode: | #js
    // Skip vnodes like <keep-alive>, <transition>, etc.
    function(vnode) {
      if (!vnode) return null;
      if (this.vNodeIsVue(vnode)) return vnode;
      return this.getVueFromVnode(vnode.$parent);
    }
  vNodeIsVue: | #js
    function(vnode) {
      if ([`transition`, `transition-group`, `keep-alive`].includes(vnode.$options._componentTag)) return false;
      return true;
    }
  updateChains: | #js
    function(vue) {
      this.$root.vm.registerVue(vue);
      this.parentChainUIDs = this.getParentChainUIDs(vue);
      this.childChainUIDs = this.getChildChainUIDs(vue);
    }
computed:
  childChainStyle: | #js
    function() {
      return {
        'margin-left': `${(this.parentChainUIDs?.length||0) * 0.8}em`
      };
    }
  showComponentTree: | #js
    function() {
      return true;
    }
  componentTreeClass: | #js
    function() {
      return {
        'component-tree': true,
        'slider-closed': (!!this.selectedVueUID),
        'slider-opened': (!!!this.selectedVueUID)
      };
    }
  activeVueUID: | #js
    function() {
      return this.hoveredVueUID || this.selectedVueUID;
    }
watch:
  isCtrl:
    handler: | #js
      function(isCtrl) {
        this.showPicker = (isCtrl || this.$refs.context1?.isPinned);
      }
  hoveredElement: | #js
    function(newEl, oldEl) {
      const vue = this.getVueFromElement(newEl);
      this.hoveredVueUID = vue?._uid;
    }
  activeVueUID:
    handler: | #js
      function(newVueUID, oldVueUID) {
      }
    immediate: true
  hoveredVueUID:
    handler: | #js
      function(newVueUID, oldVueUID) {
        if (oldVueUID) this.$root.vm.getVue(oldVueUID)?.$el.classList?.remove(`highlighted`);
        if (this.showPicker)
        {
          if (newVueUID) this.$root.vm.getVue(newVueUID)?.$el.classList?.add(`highlighted`);
        }
        const vue = this.$root.vm.getVue(newVueUID);
        if (!this.$refs.context1?.isPinned) this.updateChains(vue);
      }
    immediate: true
  selectedVueUID:
    handler: | #js
      function(newVueUID, oldVueUID) {
        this.$root.vm.getVue(oldVueUID)?.$el.classList?.remove(`highlighted2`)
        if (!newVueUID) return;
        const vue = this.$root.vm.getVue(newVueUID);
        this.$root.vm.getVue(newVueUID)?.$el.classList?.add(`highlighted2`);
        this.updateChains(vue);
      }
    immediate: true
  showPicker:
    handler: | #js
      function(showPicker) {
        if (!showPicker && !this.$refs.context1?.isPinned) this.selectedVueUID = null;
      }
    immediate: true
style:
  .component-tree:
    max-height: 50vh
    margin-top: 1em
    margin-right: 2em
    overflow-x: hidden
    overflow-y: auto
  div:
    font-family: monospace
  .parent-chain: null
  .parent-chain > :nth-child(1):
    margin-left: 0.5em
  .parent-chain > :nth-child(2):
    margin-left: 1em
  .parent-chain > :nth-child(3):
    margin-left: 1.5em
  .parent-chain > :nth-child(4):
    margin-left: 2em
  .parent-chain > :nth-child(5):
    margin-left: 2.5em
  .parent-chain > :nth-child(6):
    margin-left: 3em
  .parent-chain > :nth-child(7):
    margin-left: 3.5em
  .parent-chain > :nth-child(8):
    margin-left: 4em
name: ide-component-picker
_:
  examples:
    count: 0
template: >-
  <div class="comp-ide-component-picker highlighted"
  path="-646340253."><ui-keyboard @ctrl="isCtrl=$event"
  path="-646340253.0"></ui-keyboard><ui-mouse
  @hovered-element="onHoveredElement" :global="true"
  path="-646340253.1"></ui-mouse><ui-context-window ref="context1"
  v-if="showPicker" :global="true" @pinned="onPinned" path="-646340253.2"><div
  class="flex flex-row gap-1" path="-646340253.2.0"><div class="flex flex-column
  gap-1" path="-646340253.2.0.0"><div :class="componentTreeClass"
  path="-646340253.2.0.0.0"><ide-component-picker-vue-list
  :uids="parentChainUIDs" :selectedVueUID="selectedVueUID"
  className="parent-chain" @hover="onHoverVue" @select="onSelectVue"
  path="-646340253.2.0.0.0.0"></ide-component-picker-vue-list><ide-component-picker-vue-list
  :uids="childChainUIDs" :selectedVueUID="selectedVueUID"
  className="child-chain" :style="childChainStyle" @hover="onHoverVue"
  @select="onSelectVue"
  path="-646340253.2.0.0.0.1"></ide-component-picker-vue-list></div><ide-element-inspector
  class="hidden" :element="hoveredElement"
  path="-646340253.2.0.0.1"></ide-element-inspector></div><h2 v-if="false"
  path="-646340253.2.0.1"><ui-title icon="ðŸ“¦" :text="getTitle(hoveredVueUID)"
  path="-646340253.2.0.1.0"></ui-title></h2><div v-show="activeVueUID"
  path="-646340253.2.0.2"><ide-component-editor :vue-uid="activeVueUID"
  @selected-view-node="selectedViewNode=$event"
  @selected-tab-index="selectedEditorTabIndex=$event"
  path="-646340253.2.0.2.0"></ide-component-editor></div></div></ui-context-window></div>
