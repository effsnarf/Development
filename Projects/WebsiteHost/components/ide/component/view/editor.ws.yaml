dom:
  div: 
    ':style': '{ ''min-width'': ''30em'' }'
    v-if: component
    .flex.gap-2:
      div: 
        transition: 
          name: slide-hor
          div: 
            v-show: (selectedTabIndex == 0)
            ui.tree:
              ':root': dom
              ':expandable': 'false'
              ':initial-expanded': true
              item-type: ide.component.view.node
              ':get-item': (node) => node
              ':get-children': (node) => node.children
              @node-hover: onNodeHover
              @node-select: onNodeSelect
      .w-100pc:
        transition: 
          name: slide-hor-key
          div: 
            ':key': selectedNode?.cid
            transition: 
              name: slide
              h2:
                v-if: (selectedNode)
                ui.title:
                  icon: 📁
                  ':text': selectedNode.tag
            transition: 
              name: slide-hor
              div: 
                v-show: selectedNode
                ui.tabs:
                  ':options': '[''✏️ edit'']'
                  v-model: selectedTabIndex
                  direction: horizontal
                  template: 
                    v-slot: header
                  template: 
                    v-slot: tab0
                    ide.component.view.node.editor:
                      ':node': selectedNode
props:
  component: null
data:
  dom: null
  domYaml: null
  hoveredNode: null
  selectedNode: null
  contextElement: null
  selectedTabIndex: 0
computed:
  activeNode: | #js
    function() {
      return (this.hoveredNode || this.selectedNode);
    }
  selectedNodeSelector: | #js
    function() {
      if (!this.selectedNode) return null;
      return null;
      //return `.comp-${this.component.name.replace(/\./g, '-')} [path="${this.selectedNode[1].path}"]`;
    }
watch:
  component:
    handler: | #js
      function(component) {
        const dom = component.source.dom;
        this.dom = JSON.parse(JSON.stringify(dom));
        this.domYaml = !dom ? null : jsyaml.dump(dom);
        this.selectedNode = null;
      }
    immediate: true
  selectedNodeSelector:
    handler: | #js
      function(selector, oldSelector) {
        let els = [...document.querySelectorAll(oldSelector)];
        els.forEach(el => el.classList.remove("highlighted2"));
        this.contextElement = null;
        if (!selector) return;
        els = [...document.querySelectorAll(selector)];
        this.contextElement = els[0];
        if (!this.contextElement) return;
        els.forEach(el => el.classList.add("highlighted2"));
      }
    immediate: true
  contextElement:
    handler: | #js
      function(contextElement) {
        this.selectedNode = null;
      }
  activeNode:
    handler: | #js
      function(newNode, oldNode) {
      }
  hoveredNode:
    handler: | #js
      function(node) {
        if (this.selectedNode) return;
        //this.selectedNode = node;
      }
  selectedNode:
    handler: | #js
      function(node) {
        this.$emit("selected-node", node);
      }
  selectedTabIndex:
    handler: | #js
      function(newIndex, oldIndex) {
      }
methods:
  onNodeHover: | #js
    function(node) {
      this.hoveredNode = node;
    }
  onNodeSelect: | #js
    function(node) {
      this.selectedNode = node;
    }
style:
  textarea:
    width: 30em
    height: 20em
name: ide-component-view-editor
_:
  examples:
    count: 0
template: >-
  <div class="comp-ide-component-view-editor" :style="{ 'min-width': '30em' }"
  v-if="component" path="-1512907487."><div class="flex gap-2"
  path="-1512907487.0"><div path="-1512907487.0.0"><transition name="slide-hor"
  path="-1512907487.0.0.0"><div v-show="(selectedTabIndex == 0)"
  path="-1512907487.0.0.0.0"><ui-tree :root="dom" :expandable="false"
  :initial-expanded="true" item-type="ide.component.view.node" :get-item="(node)
  =&gt; node" :get-children="(node) =&gt; node.children"
  @node-hover="onNodeHover" @node-select="onNodeSelect"
  path="-1512907487.0.0.0.0.0"></ui-tree></div></transition></div><div
  class="w-100pc" path="-1512907487.0.1"><transition name="slide-hor-key"
  path="-1512907487.0.1.0"><div :key="selectedNode?.cid"
  path="-1512907487.0.1.0.0"><transition name="slide"
  path="-1512907487.0.1.0.0.0"><h2 v-if="(selectedNode)"
  path="-1512907487.0.1.0.0.0.0"><ui-title icon="📁" :text="selectedNode.tag"
  path="-1512907487.0.1.0.0.0.0.0"></ui-title></h2></transition><transition
  name="slide-hor" path="-1512907487.0.1.0.0.1"><div v-show="selectedNode"
  path="-1512907487.0.1.0.0.1.0"><ui-tabs :options="['✏️ edit']"
  v-model="selectedTabIndex" direction="horizontal"
  path="-1512907487.0.1.0.0.1.0.0"><template v-slot:header
  path="-1512907487.0.1.0.0.1.0.0.0"></template><template v-slot:tab0
  path="-1512907487.0.1.0.0.1.0.0.1"><ide-component-view-node-editor
  :node="selectedNode"
  path="-1512907487.0.1.0.0.1.0.0.1.0"></ide-component-view-node-editor></template></ui-tabs></div></transition></div></transition></div></div></div>
