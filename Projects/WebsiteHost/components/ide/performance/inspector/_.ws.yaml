dom:
  .inspector:
    v-if: 'true'
    h2:
      ui.checkbox:
        v-model: isEnabled
        :text: "'⚙️ Performance Inspector'"
    div:
      button:
        v-text: "'❌ clear'"
        @click: clear
    @mouseenter: isHovered = true
    @mouseleave: isHovered = false
    transition:
      name: slide
      .warning:
        v-if: "!isEnabled"
        v-text: "'Refresh is paused'"
    div:
      v-text: "'Frequent operations are throttled for performance sake.'"
    ui.tabs:
      :options: "['📜 aggragate', '⚡ realtime']"
      direction: horizontal
      :value: 0
      template:
        v-slot: tab0
        ui.value:
          :value: logItems
          @input:query: refresh2
      template:
        v-slot: tab1
        ui.value.array:
          :value: rtItems2

data:
  logs: {}
  logItems: []
  rtItems: []
  rtItems2: []
  maxRtItems: 100
  rtItemID: 1
  isEnabled: true
  isHovered: false
  exclude:
    component:
      - studio-app
      - studio-doc-node-picker
      - studio-dom-tree-methods
      - studio-dom-tree-node
    name:
      - getNodeIcon
      - getNodeText
      - getNodeCompName

mounted: | #js
  function() {
    this.$root.perfInspector = (() => this);
    this.refresh();
  }

methods:
  refresh: | #js
    function(force) {
      if (force || (!this.isHovered)) this.refresh2();
      this.rtItems2 = [...this.rtItems];
      setTimeout(this.refresh.bind(this), 1000);
    }
  refresh2: | #js
    function(query) {
      this.logItems = this.getLogItems();
    }
  getLogItems: | #js
    function() {
      const logItems = Object.values(this.logs)
        .map(logItem => ({
          component: `📦 ${logItem.context.name}`,
          operation: this.getOperationName(logItem),
          invokes: logItem.invokes,
          "average (ms)": Math.round(logItem.elapsed.average),
          "total (ms)": Math.round(logItem.elapsed.total),
        }));
      return logItems;
    }
  getOperationName: | #js
    function(logItem) {
      const { compEvent } = logItem;
      const icon = ({
        "event": "⚡",
        "computed": "💡",
        "watcher": "👁️",
        "method": "🔴",
      })[compEvent.type] || "❔";
      return `${icon} ${compEvent.name}`;
    }
  afterCompEvent: | #js
    function(compEvent) {
      if (!this.isEnabled) return;
      const log = this.getCompEventLog(compEvent);
      log.invokes++;
      log.elapsed.min = Math.min(log.elapsed.min, compEvent.elapsed);
      log.elapsed.max = Math.max(log.elapsed.max, compEvent.elapsed);
      log.elapsed.total += compEvent.elapsed;
      log.elapsed.average = (log.elapsed.total / log.invokes);
      log.last.measurements.push(compEvent.elapsed);
      if (log.last.measurements.length > 100) {
        log.last.measurements.shift();
      }
      this.rtAfterCompEvent(compEvent);
    }
  rtAfterCompEvent: | #js
    function(ce) {
      const comp = ce.context.$options.name;
      const rtItem = {
        id: (this.rtItemID++),
        component: comp,
        type: ce.type,
        name: ce.name,
      };
      for (const key in rtItem) {
        const exc = this.exclude?.[key];
        if (exc?.includes(rtItem[key])) return;
      }
      this.rtItems.unshift(rtItem);
      if (this.rtItems.length > this.maxRtItems) {
        this.rtItems.pop();
      }
    }
  getCompEventLog: | #js
    function(compEvent) {
      const contextName = compEvent.context.$options.name;
      const logKey = [contextName, compEvent.type, compEvent.name];
      const log = (this.logs[logKey] = (this.logs[logKey] || {
        key: logKey,
        context: {
          name: contextName,
        },
        compEvent: {
          type: compEvent.type,
          name: compEvent.name,
        },
        last: {
          measurements: [],
        },
        invokes: 0,
        elapsed: {
          total: 0,
          min: 0,
          max: 0,
          average: 0
        }
      }));
      return log;
    }
  clear: | #js
    function() {
      this.logs = {};
    }

style:
  .inspector:
    position: fixed
    right: 8em
    bottom: 1em
    opacity: 0.5
    max-width: 10em
    max-height: 5em
    overflow: hidden
    padding: 1em
    border: "1px solid #ccc"
    background: "#303030"
    transition: 1s
  .inspector:hover:
    max-width: 50em
    max-height: 50em
    opacity: 1
  .warning:
    text-align: center
  .value-as-string:
    max-width: 40em !important