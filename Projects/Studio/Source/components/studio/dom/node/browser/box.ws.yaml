dom:
  div:
    div:
      v-if: (boxIndex)
      h2:
        v-if: (boxIndex > 1)
        :style: "{ 'pointer-events': 'none' }"
        studio.dom.tree.node:
          :item: windowNode
      transition:
        name: slide
        .box2:
          :key: rootNode?.id
          :class: "{ folded: (!!selectedNode && showNextBox) }"
          studio.dom.tree:
            :root: rootNode
            :sui: sui
            :selected-node-id: selectedNode?.id
            :initial-expanded: "true"
            :max-depth: maxDepth
            @node-click: onNodeClick
    transition:
      name: slide
      div:
        v-if: showNextBox
        :key: selectedNode?.id
        studio.dom.node.browser.box:
          :user-app: userApp
          :sui: sui
          :window-node: selectedNode
          :box-index: (boxIndex + 1)

props:
  userApp:
  sui:
  windowNode:
  boxIndex: 0

data:
  rootNode:

methods:
  getRootNode: | #js
    function(windowNode) {
      // in case of [comp.inst] nodes, we want to show the template node
      if (!windowNode) return null;
      if (windowNode.type == "comp.inst") return this.$root.getCompNode(windowNode);
      return windowNode;
    }
  onNodeClick: | #js
    function(node) {
      if (node?.type == "page") return;
      this.$root.do("select.node", { selectIndex: this.boxIndex, node });
    }

watch:
  windowNode:
    immediate: true
    handler: | #js
      function(windowNode) {
        this.rootNode = this.getRootNode(windowNode);
      }
    
computed:
  selectedNode: | #js
    function() {
      return this.sui.node.selecteds[this.boxIndex];
    }
  showNextBox: | #js
    function() {
      if (!this.selectedNode) return false;
      const type = this.selectedNode.type;
      const containerTypes = ["page.templates", "pages", "comps", "page", "comp", "comp.inst"]
      if (!containerTypes.includes(type)) return false;
      return true;
    }
  maxDepth: | #js
    function() {
      //if (this.boxIndex < 2) return 1;
      return 100;
    }
  showBox: | #js
    function() {
      if (!this.windowNode) return false;
      if (this.windowNode.id != this.rootNode.id) return true;
      if (this.isFirstBox) return true;
      return false;
    }

style:
  .box2:
    padding: 0
    margin-bottom: 0.5em
  .box2.folded:
    max-height: 2em
    overflow: hidden
    transition: max-height 2s
  .box2.folded:hover:
    max-height: 100vh
    overflow: auto

