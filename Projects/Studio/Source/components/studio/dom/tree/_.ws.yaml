dom:
  .flex1:
    ui.tree:
      ":root": root
      item-type: studio.dom.tree.node
      :custom-node-select: true
      :selected-node-id: selectedNodeId
      :initial-expanded: initialExpanded
      :item-props: "{ sui }"
      :max-depth: maxDepth
      @node-event: (name, ...args) => $emit(name, ...args)
      @node-hover: (...args) => $emit('node-hover', ...args)
      @node-click: (...args) => $emit('node-click', ...args)
      @create-node: (...args) => $emit('create-node', ...args)
    ui.value:
      v-if: "false"
      :value: selectedNodeData

props:
  root:
  sui:
  selectedNodeId:
  initialExpanded: false
  maxDepth: 100

data:

mounted: | #js
  function() {
    this.$root.e.on("app.node.changed", this.onAppNodeChanged.bind(this));
  }

methods:
  onAppNodeChanged: | #js
    function() {
      this.refresh();
    }
  refresh: | #js
    function() {
      this.$forceUpdate();
    }
    
computed:
  selectedNodeData: | #js
    function() {
      if (!this.sui.node.selected) return {};
      const data = Object.assign({}, this.sui.node.selected);
      delete data.children;
      return data;
    }

style:
