dom:
  div:

props:
  userApp:

mounted: | #js
  function() {
    const methods = this.$options.methods;
    for (const methodName in methods)
    {
      const method = methods[methodName].bind(this);
      this.$root[methodName] = method;
    }
    this.$root._studio_methods_initialized = true;
  }

methods:
  getBoundData: | #js
    function(userAppState, node, dataItem, defaultValue) {
      if (!userAppState) return null;
      const ds = node?.data?.source;
      if (!ds) return defaultValue;
      if (["exp", "field"].includes(ds.type))
      {
        if ((dataItem) && (ds.exp in dataItem)) {
          return dataItem[ds.exp];
        }

        let localVars = [];
        //for (const key in userAppState) localVars.push({ name: key, value: userAppState[key] });
        for (const key in dataItem) localVars.push({ name: key, value: dataItem[key] });
        localVars = localVars.sortBy(v => v.name);
        const argNames = localVars.map(v => v.name);
        const argValues = localVars.map(v => v.value);

        try
        {
          const func = eval(`(function(${argNames.join(', ')}) {
            return ${ds.exp};
          })`);
          return func.apply(userAppState, argValues);
        }
        catch (ex) {
          // #TODO show warning to user
          console.warn(ex);
          return defaultValue;
        }
      }
      throw `Unknown data source`;
    }
  getNodeIcon: | #js
    function(node) {
      const icons = {
        "user.app": "üíª",
        layouts: "üìÑ",
        layout: "üìÑ",
        pages: "üìÉ",
        page: "üìÑ",
        panel: "üóÇÔ∏è",
        text: "üÖ∞Ô∏è",
        list: "üßÆ",
        comps: "üéÅ",
        comp: "üéÅ",
        "comp.inst": "üì¶",
        image: "üñºÔ∏è",
        "slot.outlet": "üîåüß©",
        "slot.content": "üß©",
        vars: "üìÇüçÉ",
        var: "üßä"
      };
      return (icons[node.type] || "‚ùî");
    }
  getNodeVarPath: | #js
    function(node) {
      // #TODO might be wrong
      if (!node.name) return null;
      const pageName = this.getNodePageName(node);
      const varPath = [pageName, node.name].map(s => (s||'')).join('.');
      return varPath;
    }
  initNewNode: | #js
    function(userApp, node) {
      const addChildren = (!node.children);
      node = Objects.clone(node, { exclude: ["children"] });
      if (addChildren) node.children = [];
      node.animation = {
        anim: null,
        duration: null,
        preview: null
      };
      node.style = {
        bg: {
          color: null
        }
      }
      node.flex = (node.flex || {});
      const newFlex = {
        dir: "v",
        justify: {
          items: "center",
          content: "center"
        }
      };
      const mergedFlex = Objects.deepMerge(newFlex, node.flex);
      Object.assign(node.flex, mergedFlex);

      switch (node.type) {
        case "text":
          node.text = (node.text || null);
          node.size = (node.size || null);
          break;
      }

      node.id = this.$root.getNewNodeID(userApp);
      return node;
    }
  getNewNodeID: | #js
    function(userApp) {
      const newID = ((this.getMaxID(userApp) || 0) + 1);
      return newID;
    }
  getMaxID: | #js
    function(userApp) {
      userApp = (userApp || this.userApp);
      if (!userApp) throw `No user app`;
      let maxID = -1;
      TreeObject.traverse(userApp, (node) => {
        if (node.id > maxID) maxID = node.id;
      });
      if (maxID == -1) return null;
      return maxID;
    }
  findNode: | #js
    function(node, type, compName) {
      for (const childNode of node.children) {
        if (childNode.type != type) continue;
        // found the node by type
        if ((type == "comp") && compName) {
          if (compName != childNode.name) continue;
        }
        return childNode;
      }
    }
  findNodeByPath: | #js
    function(nodePath) {
      if (typeof(nodePath) == 'string') nodePath = nodePath.split('.');
      let node = this.userApp;
      let part;
      while (part = nodePath.shift()) {
        node = this.findNodeByName(node, part);
      }
      return node;
    }
  findNodeByName: | #js
    function(parent, name) {
      return parent.children?.find(c => (name == (c.name || c.type)));
    }
  findDescNodes: | #js
    function(parent, type) {
      const nodes = [];
      const search = (node) => {
        if (nodes.map(n => n.id).includes(node.id)) return;
        if (type == node.type) nodes.push(node);
      };
      Objects.traverse(parent, search);
      return nodes;
    }
  getNodes: | #js
    function(parentNode, type) {
      const nodes = [];
      for (const childNode of parentNode.children) {
        if (type == childNode.type) nodes.push(childNode);
      }
      return nodes;
    }
  getCompNode: | #js
    function(compInstNode) {
      return this.getClassNode("comp", compInstNode.comp);
    }
  getNodesByType: | #js
    function(type) {
      const folderNode = this.findNode(this.userApp, type.pluralize());
      const itemNodes = this.getNodes(folderNode, type);
      return itemNodes;
    }
  getRefingNodes: | #js
    function(varPath) {
      const refs = [];
      if (!varPath.includes(".selected")) return [];
      return TreeObject.filter(this.userApp, (n) => (n.data?.source?.path?.join('.').startsWith(varPath)));
    }
  getPageNodes: | #js
    function() {
      return this.getNodesByType("page");
    }
  getLayoutNodes: | #js
    function() {
      return this.getNodesByType("layout");
    }
  getClassNode: | #js
    function(type, inst) {
      const folderNodes = this.getNodesByType(type);
      return folderNodes.find(cls => (cls.name == inst.name));
    }
  getPageNames: | #js
    function() {
      const pageNodes = this.getNodesByType("page");
      return pageNodes.map(p => p.name);
    }
  getNodePage: | #js
    function(vue) {
      while ((vue) && (vue.node?.type != "page")) vue = vue.$parent;
      return vue?.node;
    }
  getNodePageName: | #js
    function(node) {
      const ancs = this.getNodeAncestors(node);
      return ancs.find(n => (n.type == "page"))?.name;
    }
  getContainingPageNode: | #js
    function(node) {
      const ancs = this.getNodeAncestors(node);
      return ancs.find(n => (n.type == "page"));
    }
  getNodeNamePath: | #js
    function(node, edge) {
      const ancs = this.getNodeAncestors(node);
      let path = ancs
        .filter(n => n.name)
        .map(n => n.name);
      path.push(node.name);
      if (edge) {
        if ("list" == node.type) path.push("items");
      }
      path = path.filter(p => p);
      return path;
    }
  getNodeAncestors: | #js
    // #TODO Slow
    function(node, ancs = []) {
      while (node = this.getNodeParent(node)) ancs.unshift(node);
      return ancs;
    }
  getNodeParent: | #js
    // #TODO Slow
    function(node) {
      return TreeObject.find(this.userApp, (p => (p.children?.map(c => c.id).includes(node.id))));
    }
  fetchFromUrl: | #js
    async function(url) {
      const ticker = Ticker.alertify((elapsed) => `<h2>‚è≥ ${elapsed.unitifyTime()}</h2> ${url}`)
      try
      {
        const text = (await (await fetch(`/fetch?url=${url}`)).text());
        // #TODO lame
        try {
          const obj = JSON.parse(text);
          return obj;
        }
        catch { return text; }
      }
      finally
      {
        ticker.stop();
      }
    }
  getUserAppRuntimeVue: | #js
    function(vue) {
      while ((vue) && (vue.$options._componentTag != "studio-app-runtime-vue")) vue = vue.$parent;
      return vue;
    }
