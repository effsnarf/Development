dom:
  .clickable:
    v-if: node
    @mouseenter: () => onHoverNode(node)
    @mouseleave: () => onHoverNode(null)
    @click: () => onClickNode(node)
    ui.dnd.dropzone:
      @drop-item: onDropItem
      ui.dnd.draggable:
        :drag-item: "{ type: 'node', item: node }"
        .flex:
          div:
            :title: nodeWarning
            :class: "{ warn: hasWarning }"
            v-text: nodeText
          div:
            v-if: hasWarning
            v-text: "'⚠️'"
          .info:
            v-if: nodeInfo
            v-text: nodeInfo

props:
  item:
  sui:
  showName: true

data:
  node:
  nodeText:
  nodeWarning:
  nodeInfo:

mounted: | #js
  function() {
    this.$root.e.on("app.node.changed", this.onAppNodeChanged.bind(this));
  }

methods:
  onDropItem: | #js
    function(dragItem) {
      const methodName = `onDropItem_${dragItem.type.replaceAll('.', '_')}`;
      const method = this[methodName];
      if (!method) throw `Unknown item type ${dragItem.type}`;
      method(dragItem.item);
    }
  onDropItem_node: | #js
    function(dropNode) {
      const userApp = this.$root.getUserApp(this);
      TreeObject.moveNode(userApp, dropNode, this.node);
    }
  onDropItem_new_node: | #js
    function(newNode) {
      this.$root.do("create.node", { parent: { node: { id: this.node.id } }, newNode });
    }
  onClickNode: | #js
    function(node) {
      if (this.sui) {
        //if (node?.id == this.sui.node.selected?.id) node = null;
        //this.$root.do("select.node", { node });
      }
      this.$emit('click');
    }
  onHoverNode: | #js
    function(node) {
      if (!this.sui) return;
      this.sui.node.hovered = node;
    }
  getNodeText: | #js
    function(node) {
      const icon = this.$root.getNodeIcon(node);
      const text = (!this.showName) ? node.type : this.$root.getNodeText(node);
      return `${icon} ${(text??'')}`;
    }
  getNodeWarning: | #js
    function(node) {
      return null;
    }
  getNodeInfo: | #js
    function(node) {
      return null;
      //
      const ds = node.data?.source;
      if (ds?.exp) return this.shorten(ds?.exp);
      return null;
    }
  onAppNodeChanged: | #js
    function(node) {
      if (node.id != this.node?.id) return;
      this.refresh();
    }
  refresh: | #js
    function(node) {
      if (!node) node = this.node;
      this.nodeText = this.getNodeText(node);
      this.nodeWarning = this.getNodeWarning(node);
      this.nodeInfo = this.getNodeInfo(node);
    }
  shorten: | #js
    function(s, len = 10) {
      if (!s?.length) return null;
      return (s.length > len ? '…' + s.slice(-len + 1) : s);
    }

computed:
  hasWarning: | #js
    function() {
      return (!!this.nodeWarning);
    }

watch:
  item:
    immediate: true
    handler: | #js
      function(item) {
        const node = this.node = item;
        this.refresh(node);
      }

style:
  .comp-studio-dom-tree-node:
    white-space: nowrap
    text-shadow: -3px 3px 1px black
  .info:
    margin-left: 0.5em
    opacity: 0.5
  .warn:
    background: "repeating-linear-gradient(-45deg, rgba(166, 134, 0, 0.5), rgba(166, 134, 0, 0.5) 12px, rgba(0, 0, 0, 0.5) 10px, rgba(0, 0, 0, 0.5) 20px)"
  .flex:
    align-items: center
