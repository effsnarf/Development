dom:
  .clickable:
    v-if: node
    @mouseenter: () => onHoverNode(node, true)
    @mouseleave: () => onHoverNode(node, false)
    @click: () => onClickNode(node)
    :class: "{ selected: (node.id == sui?.node.selected?.id) }"
    div:
      .flex:
        div:
          :title: nodeWarning
          :class: "{ warn: hasWarning }"
          v-text: nodeText
        div:
          v-if: hasWarning
          v-text: "'⚠️'"

props:
  item:
  sui:
  showName: true

methods:
  onClickNode: | #js
    function(node) {
      if (this.sui) {
        if (node?.id == this.sui.node.selected?.id) node = null;
        this.sui.node.selected = node;
      }
      this.$emit('click');
    }
  onHoverNode: | #js
    function(node, isHovered) {
      if (!this.sui) return;
      this.sui.node.hovered = (!isHovered ? null : node);
    }

computed:
  nodeText: | #js
    function() {
      const node = this.node;
      const icon = this.$root.getNodeIcon(node);
      let text = (!this.showName) ? node.type : (node.slot?.name || node.comp?.name || node.name || node.type);
      if (text != node.type) text = `[${text}]`;
      return `${icon} ${text}`;
    }
  nodeWarning: | #js
    function() {
      const _DATA_SOURCE_MISSING = "Data source missing";
      if (["list"].contains(this.node.type)) {
        if (!this.node.data?.source) return _DATA_SOURCE_MISSING;
      }
      return null;
    }
  hasWarning: | #js
    function() {
      return (!!this.nodeWarning);
    }
  node: | #js
    function() {
      return this.item;
    }

style:
  .comp-studio-dom-tree-node:
    white-space: nowrap
    text-shadow: -3px 3px 1px black
  .warn:
    background: "repeating-linear-gradient(-45deg, rgba(166, 134, 0, 0.5), rgba(166, 134, 0, 0.5) 12px, rgba(0, 0, 0, 0.5) 10px, rgba(0, 0, 0, 0.5) 20px)"
  .flex:
    align-items: center

    