dom:
  div:
    studio.app.logo:
    studio.doc.node.picker:
      v-if: "true"
      :user-app: userApp
      :sui: sui
    .flex1:
      v-if: userApp
      studio.dom.tree:
        :root: userApp
        :sui: sui
        @sui: onSuiEvent
      studio.dom.tree:
        :root: sui.page.selected
        :sui: sui
        @sui: onSuiEvent
        :initial-expanded: "true"
      .flex2:
        studio.doc.page.selector:
          :user-app: userApp
          :sui: sui
          :value: sui.page.selected
          @input: selectPage
        studio.doc:
          :user-app: userApp
          :sui: sui
      div:
        studio.app.runtime.state:
          :user-app: userApp
          :sui: sui
    studio.dom.tree.methods:
      ref: methods1
      :user-app: userApp

data:
  userApp:
  sui:
    page:
      selected:
      trans:
        dir:
    node:
      hovered:
      selected:
      active:
      context:
    nodes:
      hovered:
  appStateChangeKey: 1

mounted: | #js
  function() {
    this.userApp = this.getMockupUserApp();
    this.$root.global = {
      app: {
        state: null
      }
    };
    // Register global methods
    this.$root.getUserApp = this.getUserApp.bind(this);
    this.$root.getStudioApp = this.getStudioApp.bind(this);
    this.$root.studio = {
      user: {
        app: {
          state: {
            change: (varPath, value) => {
              Objects.setProperty(this.$root.global.app.state, varPath, value);
              this.appStateChangeKey++;
              // check if any node takes their data from this state node
              // if so, jump to their page
              // #TODO not very accurate
              const refingNodes = this.$root.getRefingNodes(varPath);
              if (refingNodes.length == 1) {
                const pageNode = this.$root.getContainingPageNode(refingNodes[0]);
                if (pageNode) {
                  this.sui.page.selected = pageNode;
                  alertify.message("auto navigate to " + pageNode.name);
                }
              }
            }
          }
        }
      }
    }
  }

methods:
  selectPage: | #js
    function(newPage) {
      this.sui.page.trans.dir = this.getPageTransDir(this.sui.page.selected, newPage);
      this.sui.page.selected = newPage;
    }
  getPageTransDir: | #js
    function(fromPage, toPage) {
      if (!fromPage?.id || !toPage?.id) return null;
      if (toPage.id > fromPage.id) return "next";
      if (fromPage.id > toPage.id) return "prev";
    }
  onSuiEvent: | #js
    function(suiFunc) {
      suiFunc(this.sui);
    }
  onDomEditEvent: | #js
    function(editFunc) {
      editFunc();
    }
  getMockupUserApp: | #js
    function() {
      const userApp = {
        type: "user.app",
        children: [
          {
            type: "layouts",
            children: [
              {
                type: "layout",
                name: "default",
                children: [
                  {
                    type: "panel",
                    flex: {
                      dir: "v"
                    },
                    layout: {
                      position: "fixed",
                      top: 0
                    },
                    children: [
                      {
                        type: "title",
                        text: "MG",
                        size: 3
                      },
                      {
                        type: "slot.outlet",
                        name: "header"
                      }
                    ]
                  },
                  {
                    type: "panel",
                    layout: {
                      position: "fixed",
                      top: "10vh",
                      height: "90vh"
                    },
                    children: [
                      {
                        type: "slot.outlet",
                        name: "content"
                      }
                    ]
                  },
                ]
              }
            ]
          },
          {
            type: "pages",
            children: [
              {
                type: "page",
                name: "home",
                layout: {
                  name: "default"
                },
                children: [
                  {
                    type: "slot.content",
                    slot: {
                      name: "header"
                    },
                    children: [
                      {
                        type: "title",
                        size: 1,
                        text: "Home page"
                      },
                    ]
                  },
                  {
                    type: "slot.content",
                    slot: {
                      name: "content"
                    },
                    children: [
                      {
                        type: "list",
                        name: "boards",
                        flex: {
                          justify: {
                            content: "center"
                          }
                        },
                        data: {
                          source: {
                            //type: "mock",
                            type: "url",
                            url: "https://a.4cdn.org/boards.json",
                            linq: [{"type":"select.field","path":["boards"],"_id":1},{"type":"select.fields","fields":["board","title"],"_id":2}]
                          }
                        },
                        animation: {
                          anim: null,
                          duration: null
                        },
                        children: [
                          {
                            type: "title",
                            size: 2,
                            data: {
                              source: {
                                type: "data.item",
                                exp: "title"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  },
                ]
              },
              {
                type: "page",
                name: "board",
                layout: {
                  name: "default"
                },
                children: [
                  {
                    type: "slot.content",
                    slot: {
                      name: "header"
                    },
                    children: [
                      {
                        type: "title",
                        size: 1,
                        data: {
                          source: {
                            type: "state.tree.link",
                            path: ["home", "list", "boards", "selected", "title"]
                          }
                        },
                      },
                    ]
                  },
                  {
                    type: "slot.content",
                    slot: {
                      name: "content"
                    },
                    children: [
                      {
                        type: "list",
                        name: "threads",
                        data: {
                          source: {
                            type: "url",
                            url: "`https://a.4cdn.org/${home.list.boards.selected?.board}/catalog.json`",
                            linq: null
                          }
                        },
                        animation: {
                          anim: null
                        },
                        children: [
                          {
                            type: "panel",
                            direction: "horizontal",
                            children: [
                              {
                                type: "image",
                                data: {
                                  source: {
                                    type: "data.item",
                                    exp: "`https://i.4cdn.org/${home.list.boards.selected?.board}/${tim}s${ext}`"
                                  }
                                }
                              },
                              {
                                type: "panel",
                                children: [
                                  {
                                    type: "title",
                                    size: 3,
                                    data: {
                                      source: {
                                        type: "data.item",
                                        exp: "sub"
                                      }
                                    }
                                  },
                                  {
                                    type: "title",
                                    size: 5,
                                    data: {
                                      source: {
                                        type: "data.item",
                                        exp: "com"
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            type: "comps",
            children: [
              {
                type: "comp",
                name: "generator",
                children: [
                  {
                    type: "panel",
                    flex: {
                      dir: "h",
                      justify: {
                        content: "flex-start"
                      }
                    },
                    children: [
                      {
                        type: "image",
                      },
                      {
                        type: "title",
                        size: 3,
                        data: {
                          source: {
                            exp: "name"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      };

      let id = 1;
      const initNode = (node) => {
        if (!node.type) return;
        const mockupNode = this.getMockupNode(node);
        const nodeProps = Objects.clone(node, { exclude: ["children"] });
        const merged = Objects.deepMerge(nodeProps, mockupNode);
        Object.assign(node, merged);
        node.id = id++;
      }

      Objects.traverse(userApp, initNode);

      return userApp;
    }
  getMockupNode: | #js
    function(node) {
      node = Objects.clone(node, { exclude: ["children"] });
      node.style = {
        bg: {
          color: null
        }
      }
      if (node.type == "panel") {
        node.props = (node.props || {});
        const newProps = {
          dir: "v",
          justify: {
            items: "center",
            content: "center"
          }
        };
        const mergedProps = Objects.deepMerge(newProps, node.props);
        Object.assign(node.props, mergedProps);
      }
      return node;
    }
  getStudioApp: | #js
    function(vue) {
      while (vue && (vue != this)) vue = vue.$parent;
      return vue;
    }
  getUserApp: | #js
    function(vue) {
      while (vue && !vue.userApp) vue = vue.$parent;
      return vue.userApp;
    }

watch:
  sui:
    deep: true
    handler: | #js
      function(sui) {
        sui.node.active = (sui.node.selected || sui.node.hovered);
      }
  appStateChangeKey: | #js
    function() {
      this.$root.$emit("app-state-changed");
    }

style:
  .comp-studio-app > .flex1:
    display: flex
    justify-content: space-between
    margin: 1vw
  .comp-studio-app > .flex1 > *:
    width: 33%
    overflow: hidden
    border: 3px solid gray
  .comp-studio-app > .flex1 > *:nth-child(1):
    width: 15%
  .comp-studio-app > .flex1 > *:nth-child(2):
    width: 18%
  .flex2:
    display: flex
    flex-direction: column
    gap: 1em