dom:
  div:
    studio.app.logo:
    .spacer1:
      v-text: "''"
    .main-boxes:
      v-if: userApp
      :class: "{ ['box-hovered-' + sui.main.box.hovered]: true }"
      .main-box.a:
        studio.app.action.stack:
          :user-app: userApp
          :sui: sui
        ui.drawer:
          .box2:
            studio.dom.tree:
              :root: userApp
              :sui: sui
        @mouseenter: sui.main.box.hovered = 0
        @mouseleave: sui.main.box.hovered = null
      .main-box.b:
        studio.app.ui.drawer:
          closed-width: 8em
          studio.doc.node.toolbar:
        studio.dom.node.browser:
          :user-app: userApp
          :sui: sui
        studio.app.log:
          category: runtime
        @mouseenter: sui.main.box.hovered = 1
        @mouseleave: sui.main.box.hovered = null
      .main-box.c:
        studio.app.ui.drawer:
          closed-width: 8em
          studio.doc.page.selector:
            :user-app: userApp
            :user-app-state: userAppState
            :sui: sui
            :value: sui.page.selected
            @input: selectPage
        .box2:
          class: flex-grow-1
          :class: "{ 'user-app-tilted': sui.app.is.tilted }"
          @mouseenter: () => onHoverApp(true)
          @mouseleave: () => onHoverApp(false)
          studio.doc.node.picker:
            :user-app: userApp
            :sui: sui
            :enabled: sui.app.is.hovered
          studio.app.runtime:
            ref: userAppRuntime1
            :user-app: userApp
            :sui: sui
            @runtime-vue-inited: onRuntimeVueInited
          div:
            v-text: sui.node.hovered?.id
        @mouseenter: sui.main.box.hovered = 2
        @mouseleave: sui.main.box.hovered = null
      .main-box.d:
        h2:
          :style: "{ 'margin-top': '-2em', height: '2em' }"
          studio.dom.tree.node:
            :item: sui.node.selected
            :sui: sui
        .box2:
          studio.doc.node.editor:
            :node: sui.node.selected
            :user-app: userApp
            :user-app-state: userAppState
            :sui: sui
            :is-tabs-drawer-open: "true"
        @mouseenter: sui.main.box.hovered = 3
        @mouseleave: sui.main.box.hovered = null
      .main-box.e:
        studio.app.global.settings:
          :user-app: userApp
          :user-app-state: userAppState
          :sui: sui
        @mouseenter: sui.main.box.hovered = 4
        @mouseleave: sui.main.box.hovered = null
    studio.dom.tree.methods:
      ref: methods1
      :user-app: userApp
    studio.app.ui.trash.can:
      :user-app: userApp
    ui.css.stylesheet:
      :rules: appStylesheet

data:
  userApp:
  userAppState:
  sui:
    app:
      is:
        hovered:
        tilted:
    grid:
      lines:
    tool:
      category:
        index:
        name:
        options: ['🍃 node', '🧊 data', '🧱 layout', '🎨 design', '✨ animation', '⚡ events']
        icons: ['🍃', '🧊', '🧱', '🎨', '✨', '⚡']
      grid:
        lines: false
    main:
      box:
        hovered: null
    design:
      selected:
        tab: 
        moods:
    page:
      selected:
      trans:
        dir:
        preview: false
    pages:
    node:
      hovered:
      selected:
      selecteds: []
      active:
      context:
      tree:
        is:
          hovered:
    nodes:
      hovered:
    selected:
      dataItems: []
    debug: true
  pageNodes:
  appStateChangedVars: []
  appStateChangeKey: 1

mounted: | #js
  async function() {
    this.userApp = this.getMockupUserApp();
    await this.$nextTick();
    this.pageNodes = this.$root.getPageNodes();
    // Register global methods
    this.$root.getUserApp = this.getUserApp.bind(this);
    this.$root.getStudioApp = this.getStudioApp.bind(this);
    this.$root.studio = {
      user: {
        app: {
          state: {
            change: (varPath, newValue, info) => {
              varPath = (varPath.split?.('.') || varPath);
              const oldValue = Objects.getProperty(this.userAppState, varPath);
              if (newValue == oldValue) return;
              Objects.setProperty(this.userAppState, varPath, newValue);
              this.appStateChangedVars.push({ varPath, newValue, info });
              this.appStateChangeKey++;
            }
          }
        },
        comp: {
          state: {
            change: ($root, vue, key, varPath, newValue) => {
              $root.studio.user.app.state.change(varPath, newValue);
            }
          }
        }
      }
    }
    this.$watch("sui.page.selected", this.onSelectedPageChanged.bind(this));
    this.$watch("sui.node.hovered", this.onHoveredNodeChanged.bind(this));
    this.$watch("sui.node.selected", this.onSelectedNodeChanged.bind(this));
    this.$root.$on("data.item.selected", this.onDataItemSelected.bind(this));
  }

methods:
  onSelectedPageChanged: | #js
    function(pageNode) {
      if (!pageNode) return;
      this.initPageUiState(pageNode);
      const sui = this.sui;
      const page = sui.pages[pageNode.id];
      // when switching page, set the selected node to the page's selected node
      sui.node.selected = page.node.selected;
    }
  onHoveredNodeChanged: | #js
    function(node) {
      if (!node) {
        //document.querySelectorAll(".hovered-node").forEach(n => n.classList.remove("hovered-node"));
        return;
      }
      //const els = document.querySelectorAll(`[data-node-id="${node.id}"]`);
      //els.forEach(n => n.classList.add("hovered-node"));
    }
  onSelectedNodeChanged: | #js
    function(node) {
      this.sui.pages[this.sui.page.selected.id].node.selected = node;
      this.sui.selected.dataItems.clear();
    }
  onDataItemSelected: | #js
    function(dataItem) {
      this.sui.selected.dataItems.push(dataItem);
    }
  initPageUiState: | #js
    function(pageNode) {
      if (!pageNode) return;
      // init sui.pages[(page-id)] to hold separate ui state for pages
      const sui = this.sui;
      sui.pages = (sui.pages || {});
      sui.pages[pageNode.id] = (this.sui.pages[pageNode.id] || {});
      const page = sui.pages[pageNode.id];
      page.node = (page.node || {});
      page.node.selected = (page.node.selected || null);
    }
  onRuntimeVueInited: | #js
    function() {
      this.userAppState =  this.$refs.userAppRuntime1.$refs.userAppVue1.$data;
    }
  onHoverApp: | #js
    function(isHovered) {
      this.sui.app.is.hovered = isHovered;
    }
  selectPage: | #js
    function(newPage) {
      //this.sui.page.trans.dir = this.getPageTransDir(this.sui.page.selected, newPage);
      this.$root.do("select.page", { pageNode: newPage });
    }
  getPageTransDir: | #js
    function(fromPage, toPage) {
      if (!fromPage?.id || !toPage?.id) return null;
      if (toPage.id > fromPage.id) return "next";
      if (fromPage.id > toPage.id) return "prev";
    }
  onSuiEvent: | #js
    function(suiFunc) {
      suiFunc(this.sui);
    }
  onDomEditEvent: | #js
    function(editFunc) {
      editFunc();
    }
  getMockupUserApp: | #js
    function() {
      const userApp = {
        type: "user.app",
        global: {
          design: {
            palette: null
          },
          page: {
            anim: {
              "name": "slide-x",
              "enter": {
                "from": {
                  "transform": "translateX(100%)",
                  "opacity": 0
                }
              },
              "leave": {
                "to": {
                  "transform": "translateX(-100%)",
                  "opacity": 0
                }
              }
            }
          }
        },
        children: [
          {
            type: "layouts",
            children: [
              {
                type: "layout",
                name: "default",
                children: [
                  {
                    type: "panel",
                    layout: {
                      position: "fixed",
                      top: 0
                    },
                    children: [
                      {
                        type: "text",
                        text: "4chan viewer",
                        size: 3
                      },
                      {
                        type: "slot.outlet",
                        name: "header"
                      }
                    ]
                  },
                  {
                    type: "panel",
                    layout: {
                      position: "fixed",
                      top: "10vh",
                      size: {
                        height: "90vh"
                      }
                    },
                    children: [
                      {
                        type: "slot.outlet",
                        name: "content"
                      }
                    ]
                  },
                ]
              }
            ]
          },
          {
            type: "pages",
            children: [
              {
                type: "page",
                name: "home",
                layout: {
                  name: "default"
                },
                children: [
                  {
                    type: "slot.content",
                    slot: {
                      name: "header"
                    },
                    children: [
                      {
                        type: "text",
                        size: 1,
                        vars: [
                          {
                            name: "text",
                            type: "value",
                            value: "Home page"
                          }
                        ]
                      },
                    ]
                  },
                  {
                    type: "slot.content",
                    slot: {
                      name: "content"
                    },
                    children: [
                      {
                        type: "panel",
                        layout: {
                          type: "grid.y"
                        },
                        children: [
                          {
                            type: "ui.input.text.box",
                            name: "query",
                            vue: {
                              props: {
                                type: "search",
                                hint: "search",
                                icon: "🔎",
                              }
                            },
                            vars: [
                              {
                                name: "text",
                                type: "node.prop",
                                value: "hello",
                                vModel: true
                              }
                            ]
                          },
                          {
                            type: "ui.button",
                            name: "button1",
                            events: [
                              {
                                name: "click",
                                handler: {
                                  args: [],
                                  code: `$node.clickCount = ($node.clickCount??0) + 1; \n alertify.message(\`clicked (\${$node.clickCount})\`);`,
                                },
                              }
                            ],
                            vue: {
                              props: {
                                icon: "👆",
                                //text: "click me",
                              }
                            },
                            vars: [
                              {
                                name: "text",
                                type: "exp",
                                exp: "`click me (${$node.clickCount})`",
                              },
                              {
                                name: "clickCount",
                                type: "value",
                                value: 0
                              }
                            ]
                          },
                        ]
                      },
                      {
                        type: "list",
                        name: "boards",
                        vars: [
                          {
                            name: "items",
                            type: "fetch",
                            url: "`https://a.4cdn.org/boards.json`",
                            linq: [{"type":"select.field","path":["boards"],"_id":1},{"type":"select.fields","fields":["board","title"],"_id":2}]
                          },
                          {
                            name: "hovered",
                            type: "node.prop",
                            editable: false
                          },
                          {
                            name: "selected",
                            type: "node.prop",
                            editable: false
                          }
                        ],
                        children: [
                          {
                            type: "text",
                            size: 2,
                            vars: [
                              {
                                name: "text",
                                type: "field",
                                exp: "title"
                              }
                            ]
                          }
                        ]
                      },
                    ]
                  },
                ]
              },
              {
                type: "page",
                name: "board",
                layout: {
                  name: "default"
                },
                children: [
                  {
                    type: "slot.content",
                    slot: {
                      name: "header"
                    },
                    children: [
                      {
                        type: "text",
                        size: 1,
                        vars: [
                          {
                            name: "text",
                            type: "exp",
                            exp: "$app.home.boards.selected?.title",
                          }
                        ]
                      },
                    ]
                  },
                  {
                    type: "slot.content",
                    slot: {
                      name: "content"
                    },
                    children: [
                      {
                        type: "list",
                        name: "threads",
                        vars: [
                          {
                            name: "items",
                            type: "fetch",
                            url: "((!$app.home.boards.selected) ? null : `https://a.4cdn.org/${$app.home.boards.selected.board}/catalog.json`)",
                            linq: [{"type":"select.fields","fields":["threads"],"_id":1},{"type":"flat.map","path":["threads"],"_id":2}]
                          },
                          {
                            name: "hovered",
                            type: "node.prop",
                            editable: false
                          },
                          {
                            name: "selected",
                            type: "node.prop",
                            editable: false
                          }
                        ],
                        children: [
                          {
                            type: "comp.inst",
                            comp: {
                              name: "thread.teaser"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                type: "page",
                name: "thread",
                layout: {
                  name: "default"
                },
                children: [
                  {
                    type: "slot.content",
                    slot: {
                      name: "header"
                    },
                    children: [
                      {
                        type: "text",
                        size: 1,
                        vars: [
                          {
                            name: "text",
                            type: "exp",
                            exp: "$app.board.threads.selected?.sub"
                          }
                        ]
                      },
                    ]
                  },
                  {
                    type: "slot.content",
                    slot: {
                      name: "content"
                    },
                    children: [
                      {
                        type: "list",
                        name: "posts",
                        data: {
                          vars: [
                            {
                              name: "items",
                              type: "fetch",
                              url: "`https://a.4cdn.org/${$app.home.boards.selected?.board}/thread/${$page.threads.selected?.no}.json`",
                              linq: [ { "type": "select.field", "path": [ "posts" ], "_id": 1 } ]
                            }
                          ],
                        },
                        children: [
                          {
                            type: "comp.inst",
                            comp: {
                              name: "post"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            type: "comps",
            children: [
              {
                type: "comp",
                name: "thread.teaser",
                children: [
                  {
                    type: "panel",
                    layout: {
                      type: "grid.uniform",
                      grid: {
                        name: "3 x …",
                        template: {
                          columns: "repeat(3, 1fr)"
                        },
                      },
                    },
                    children: [
                      {
                        type: "panel",
                        children: [
                          {
                            type: "image",
                            vars: [
                              {
                                name: "imageUrl",
                                type: "exp",
                                exp: "((!$app.home.boards.selected) ? null : `https://i.4cdn.org/${$app.home.boards.selected.board}/${$item?.tim}${$item?.ext}`)"
                              }
                            ]
                          },
                        ]
                      },
                      {
                        type: "panel",
                        layout: {
                          size: {
                            width: "60%"
                          }
                        },
                        children: [
                          {
                            type: "text",
                            size: 3,
                            vars: [
                              {
                                name: "text",
                                type: "field",
                                exp: "sub"
                              }
                            ]
                          },
                          {
                            type: "text",
                            size: 5,
                            vars: [
                              {
                                name: "text",
                                type: "field",
                                exp: "com"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        type: "text",
                        size: 3,
                        vars: [
                          {
                            name: "text",
                            type: "field",
                            exp: "replies"
                          }
                        ]
                      },
                    ],
                  },
                ]
              },
              {
                type: "comp",
                name: "post",
                children: [
                  {
                    type: "panel",
                    children: [
                      {
                        type: "image",
                        layout: {
                          size: {
                            width: "20%"
                          }
                        },
                        vars: [
                          {
                            name: "imageUrl",
                            type: "exp",
                            exp: "((!$app.home.boards.selected) ? null : `https://i.4cdn.org/${$app.home.boards.selected?.board}/${$item?.tim}${$item?.ext}`)"
                          }
                        ]
                      },
                      {
                        type: "text",
                        size: 3,
                        vars: [
                          {
                            name: "text",
                            type: "field",
                            exp: "com"
                          }
                        ]
                      },
                    ],
                  },
                ]
              },
              {
                type: "comp",
                name: "generator",
                children: [
                  {
                    type: "panel",
                    children: [
                      {
                        type: "image",
                      },
                      {
                        type: "text",
                        size: 3,
                        data: {
                          source: {
                            exp: "name"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      };

      const initNode = (node) => {
        if (!node.type) return;
        const mockupNode = this.$root.initNewNode(userApp, node);
        const nodeProps = Objects.clone(node, { exclude: ["children"] });
        const merged = Objects.deepMerge(nodeProps, mockupNode);
        Object.assign(node, merged);
      }

      TreeObject.traverse(userApp, initNode);

      return userApp;
    }
  getStudioApp: | #js
    function(vue) {
      while (vue && (vue != this)) vue = vue.$parent;
      return vue;
    }
  getUserApp: | #js
    function(vue) {
      while (vue && !vue.userApp) vue = vue.$parent;
      return vue.userApp;
    }

watch:
  sui:
    deep: true
    handler: | #js
      function(sui) {
        sui.node.active = (sui.node.selected || sui.node.hovered);
      }
  appStateChangeKey: | #js
    function() {
      const vars = [...this.appStateChangedVars];
      this.appStateChangedVars.clear();
      this.$root.$emit("app.state.changed", vars);
    }
  isUserAppTilted: | #js
    function(newValue) {
      this.sui.app.is.tilted = newValue;
      this.sui.tool.grid.lines = newValue;
    }

computed:
  isUserAppTilted: | #js
    function() {
      return (this.sui.main.box.hovered == 1);
    }
  appStylesheet: | #js
    function() {
      const s = {};
      s[`[data-node-id="${this.sui.node.hovered?.id}"]`] = {
        border: '2px dashed #ffff0080'
      };
      s[`[data-node-id="${this.sui.node.selected?.id}"]`] = {
        border: '2px dashed green'
      };
      if (this.sui.tool.grid.lines) {
        const pageName = this.sui.page.selected?.name;
        //s[`.studio-doc-node[data-sui-page=${pageName}]`] = {
        //  border: '1px dashed gray'
        //};
      }
      return s;
    }

style:
  .spacer1:
    height: 4em
  .title1:
    font-size: 300%
  .title2:
    font-size: 200%
  .title3:
    margin-right: 1rem
    font-size: 140%
    text-shadow: -3px 3px 2px black
  .comp-studio-app:
    min-height: 100vh
    background: "radial-gradient(circle at center, #2f4e66, #000)"
  .main-boxes:
    display: flex
    justify-content: space-between
    gap: 2em
    margin: 0 2vw
  .main-box:
    width: 25%
    transition: 0.4s
    perspective: 60vw
  .main-box .box2:
    overflow: hidden
  .user-app-container:
    overflow: hidden
  .main-boxes > *:nth-child(3) .box2:
    transform: rotateY(0deg)
    transform-style: preserve-3d
    transition: 0.6s
  .main-boxes > *:nth-child(3) .box2.user-app-tilted:
    # transform: rotateY(10deg)
  .user-app-tilted .studio-doc-node .list-item:
    opacity: 1
  .box2 *:
    transform-style: preserve-3d
  .box2:
    height: fit-content
    background: black
    border: 3px solid gray
    box-shadow: "-0.5em 0.5em 2px #00000080"
    padding: 1em
  .main-box.a:
    width: 10%
  .main-box.b:
    width: 15%
  .main-boxes.box-hovered-3 .main-box.d:
    width: 46%
  .main-boxes.box-hovered-3 .main-box.e:
    width: 4%
  .main-boxes.box-hovered-4 .main-box.d:
    width: 4%
  .main-boxes.box-hovered-4 .main-box.e:
    width: 46%
  .flex2:
    display: flex
    flex-direction: column
    gap: 1em
  .tree-node:
    grid-template: 1fr / 0em 1fr
