dom:
  div:
    div:
      studio.app.logo:
      .flex1:
        v-if: userApp
        studio.dom.tree:
          :user-app: userApp
          @sui: onSuiEvent
        studio.doc:
          :user-app: userApp
          :sui: sui
        studio.doc.node.editor:
          :node: activeNode
          :sui: sui
          @dom-edit: onDomEditEvent

data:
  userApp: null
  sui:
    node:
      hovered:
      selected:

mounted: | #js
  function() {
    this.userApp = this.getMockupUserApp();
    // Register global methods
    this.$root.getCompNode = this.getCompNode.bind(this);
  }

methods:
  onSuiEvent: | #js
    function(suiFunc) {
      suiFunc(this.sui);
    }
  onDomEditEvent: | #js
    function(editFunc) {
      editFunc();
    }
  getMockupNode: | #js
    function() {
      const node = {
        style: {
          bg: {
            color: null
          }
        }
      };
      return node;
    }
  getMockupUserApp: | #js
    function() {
      const userApp = {
        type: "user.app",
        children: [
          {
            type: "pages",
            children: [
              {
                type: "page",
                name: "home",
                children: [
                  {
                    type: "title",
                    size: 2,
                    text: "Home page"
                  },
                  {
                    type: "list",
                    children: [
                      {
                        type: "list.item",
                        children: [
                          {
                            type: "comp.inst",
                            comp: {
                              name: "generator"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                type: "page",
                name: "generator",
                children: [
                  {
                    type: "comp.inst",
                    comp: {
                      name: "generator"
                    }
                  }
                ]
              }
            ]
          },
          {
            type: "comps",
            children: [
              {
                type: "comp",
                name: "generator",
                children: [
                  {
                    type: "panel",
                    direction: "horizontal",
                    children: [
                      {
                        type: "image",
                      },
                      {
                        type: "title",
                        size: 3,
                        text: "Courage Wolf"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      };

      let id = 1;
      const initNode = (node) => {
        if (!node.type) return;
        node.id = id++;
        Object.assign(node, this.getMockupNode());
      }

      Objects.traverse(userApp, initNode);

      return userApp;
    }
  getUserApp: | #js
    function(vue) {
      while (vue && !vue.userApp) vue = vue.$parent;
      return vue.userApp;
    }
  findNode: | #js
    function(node, type, compName) {
      for (const childNode of node.children) {
        if (childNode.type != type) continue;
        // found the node by type
        if ((type == "comp") && compName) {
          if (compName != childNode.name) continue;
        }
        return childNode;
      }
    }
  getCompNode: | #js
    function(compInstNode) {
      const userApp = this.userApp;
      const compsNode = this.findNode(userApp, "comps");
      const compNode = this.findNode(compsNode, "comp", compInstNode.comp.name);
      return compNode;
    }

computed:
  activeNode: | #js
    function() {
      return (this.sui.node.selected || this.sui.node.hovered);
    }

style:
  .flex1:
    display: flex
    justify-content: space-between
    margin: 1vw    