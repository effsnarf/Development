dom:
  div:
    studio.app.logo:
    div:
      button:
        v-text: "'Test'"
        @click: test
    studio.doc.node.picker:
      :user-app: userApp
      :sui: sui
    .flex1:
      v-if: userApp
      studio.dom.tree:
        :root: userApp
        :sui: sui
        @sui: onSuiEvent
      studio.dom.tree:
        :root: sui.page.selected
        :sui: sui
        @sui: onSuiEvent
        :initial-expanded: "true"
      .flex2:
        studio.doc.page.selector:
          :user-app: userApp
          :sui: sui
          :value: sui.page.selected
          @input: selectPage
        studio.doc:
          :user-app: userApp
          :sui: sui
      div:
        div:
          ui.value:
            :value: rtState

data:
  userApp: null
  sui:
    page:
      selected:
      trans:
        dir:
    node:
      hovered:
      selected:
      active:
      context:
    nodes:
      hovered:
  rtState: null

mounted: | #js
  function() {
    this.userApp = this.getMockupUserApp();
    // Register global methods
    this.$root.getUserApp = this.getUserApp.bind(this);
    this.$root.getStudioApp = this.getStudioApp.bind(this);
    this.$root.getCompNode = this.getCompNode.bind(this);
    this.$root.getPageNodes = this.getPageNodes.bind(this);
    this.$root.getClassNode = this.getClassNode.bind(this);
    this.$root.getNodePageName = this.getNodePageName.bind(this);
  }

methods:
  test: | #js
    function() {
      this.initRtState();
    }
  initRtState: | #js
    function() {
      this.compileUserAppRuntime();
    }
  compileUserAppRuntime: | #js
    async function() {
      const vueCompName = `studio-user-app-runtime`;
      const vueData = {};
      const pageName = "home";
      const pageNode = this.findNodeByPath(["pages", pageName]);
      vueData[pageName] = {};
      const pageData = vueData[pageName];
      const varsNode = this.findNodeByName(pageNode, "vars");
      const varNodes = varsNode.children;
      const varNames = varNodes.map(n => n.name);

      pageData.var = {};

      for (const varName of varNames) pageData.var[varName] = null;

      for (const varNode of varNodes) {
        if (!varNode.on?.init) continue;
        const initVarFunc = eval(`(${varNode.on.init})`);
        await initVarFunc.apply(pageData.var);
      }

      pageData.list = {};

      const listNodes = this.findDescNodes(pageNode, "list");
      
      for (const listNode of listNodes) {
        if (!listNode.name) {
          alertify.error(`list node in ${pageName} page must have a name.`);
          continue;
        }
        pageData.list[listNode.name] = {
          hovered: null,
          selected: null
        };
      }

      const rtState = Vue.reactive(vueData);
      this.rtState = rtState;
    }
  selectPage: | #js
    function(newPage) {
      this.sui.page.trans.dir = this.getPageTransDir(this.sui.page.selected, newPage);
      this.sui.page.selected = newPage;
    }
  getPageTransDir: | #js
    function(fromPage, toPage) {
      if (!fromPage?.id || !toPage?.id) return null;
      if (toPage.id > fromPage.id) return "next";
      if (fromPage.id > toPage.id) return "prev";
    }
  onSuiEvent: | #js
    function(suiFunc) {
      suiFunc(this.sui);
    }
  onDomEditEvent: | #js
    function(editFunc) {
      editFunc();
    }
  getMockupUserApp: | #js
    function() {
      const userApp = {
        type: "user.app",
        children: [
          {
            type: "layouts",
            children: [
              {
                type: "layout",
                name: "default",
                children: [
                  {
                    type: "panel",
                    flex: {
                      dir: "v"
                    },
                    layout: {
                      position: "fixed",
                      top: 0
                    },
                    children: [
                      {
                        type: "title",
                        text: "MG",
                        size: 3
                      },
                      {
                        type: "slot.outlet",
                        name: "header"
                      }
                    ]
                  },
                  {
                    type: "panel",
                    layout: {
                      position: "fixed",
                      top: "10vh",
                      height: "90vh"
                    },
                    children: [
                      {
                        type: "slot.outlet",
                        name: "content"
                      }
                    ]
                  },
                ]
              }
            ]
          },
          {
            type: "pages",
            children: [
              {
                type: "page",
                name: "home",
                layout: {
                  name: "default"
                },
                children: [
                  {
                    type: "slot.content",
                    slot: {
                      name: "header"
                    },
                    children: [
                      {
                        type: "title",
                        size: 2,
                        text: "Home page"
                      },
                    ]
                  },
                  {
                    type: "slot.content",
                    slot: {
                      name: "content"
                    },
                    children: [
                      {
                        type: "list",
                        name: "generators",
                        flex: {
                          justify: {
                            content: "center"
                          }
                        },
                        data: {
                          source: {
                            name: {
                              path: ["home", "var", "generators"]
                            }
                          }
                        },
                        children: [
                          {
                            type: "comp.inst",
                            comp: {
                              name: "generator"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    type: "vars",
                    children: [
                      {
                        type: "var",
                        name: "generators",
                        on: {
                          init: (function() {
                            this.generators = [
                              { name: "Socially Awkward Penguin" },
                              { name: "Foul Bachelor Frog" },
                              { name: "Insanity Wolf" }
                            ]
                          }).toString()
                        }
                      }
                    ]
                  }
                ]
              },
              {
                type: "page",
                name: "generator",
                layout: {
                  name: "default"
                },
                children: [
                  {
                    type: "slot.content",
                    slot: {
                      name: "header"
                    },
                    children: [
                      {
                        type: "comp.inst",
                        comp: {
                          name: "generator"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            type: "comps",
            children: [
              {
                type: "comp",
                name: "generator",
                children: [
                  {
                    type: "panel",
                    flex: {
                      dir: "h",
                      justify: {
                        content: "flex-start"
                      }
                    },
                    children: [
                      {
                        type: "image",
                      },
                      {
                        type: "title",
                        size: 3,
                        data: {
                          field: "name"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      };

      let id = 1;
      const initNode = (node) => {
        if (!node.type) return;
        const mockupNode = this.getMockupNode(node);
        const nodeProps = Objects.clone(node, { exclude: ["children"] });
        const merged = Objects.deepMerge(nodeProps, mockupNode);
        Object.assign(node, merged);
        node.id = id++;
      }

      Objects.traverse(userApp, initNode);

      return userApp;
    }
  getMockupNode: | #js
    function(node) {
      node = Objects.clone(node, { exclude: ["children"] });
      node.style = {
        bg: {
          color: null
        }
      }
      if (node.type == "panel") {
        node.props = (node.props || {});
        const newProps = {
          dir: "v",
          justify: {
            items: "center",
            content: "center"
          }
        };
        const mergedProps = Objects.deepMerge(newProps, node.props);
        Object.assign(node.props, mergedProps);
      }
      return node;
    }
  getStudioApp: | #js
    function(vue) {
      while (vue && (vue != this)) vue = vue.$parent;
      return vue;
    }
  getUserApp: | #js
    function(vue) {
      while (vue && !vue.userApp) vue = vue.$parent;
      return vue.userApp;
    }
  findNode: | #js
    function(node, type, compName) {
      for (const childNode of node.children) {
        if (childNode.type != type) continue;
        // found the node by type
        if ((type == "comp") && compName) {
          if (compName != childNode.name) continue;
        }
        return childNode;
      }
    }
  findNodeByPath: | #js
    function(nodePath) {
      if (typeof(nodePath) == 'string') nodePath = nodePath.split('.');
      let node = this.userApp;
      let part;
      while (part = nodePath.shift()) {
        node = this.findNodeByName(node, part);
      }
      return node;
    }
  findNodeByName: | #js
    function(parent, name) {
      return parent.children?.find(c => (name == (c.name || c.type)));
    }
  findDescNodes: | #js
    function(parent, type) {
      const nodes = [];
      const search = (node) => {
        if (nodes.map(n => n.id).includes(node.id)) return;
        if (type == node.type) nodes.push(node);
      };
      Objects.traverse(parent, search);
      return nodes;
    }
  getNodes: | #js
    function(parentNode, type) {
      const nodes = [];
      for (const childNode of parentNode.children) {
        if (type == childNode.type) nodes.push(childNode);
      }
      return nodes;
    }
  getCompNode: | #js
    function(compInstNode) {
      return this.getClassNode("comp", compInstNode.comp);
    }
  getNodesByType: | #js
    function(type) {
      const folderNode = this.findNode(this.userApp, type.pluralize());
      const itemNodes = this.getNodes(folderNode, type);
      return itemNodes;
    }
  getPageNodes: | #js
    function() {
      return this.getNodesByType("page");
    }
  getLayoutNodes: | #js
    function() {
      return this.getNodesByType("layout");
    }
  getClassNode: | #js
    function(type, inst) {
      const folderNodes = this.getNodesByType(type);
      return folderNodes.find(cls => (cls.name == inst.name));
    }
  getNodePageName: | #js
    function(node) {
      const ancs = this.getNodeAncestors(node);
      return ancs.find(n => (n.type == "page"))?.name;
    }
  getNodeAncestors: | #js
    // #TODO Slow
    function(node, ancs = []) {
      while (node = this.getNodeParent(node)) ancs.unshift(node);
      return ancs;
    }
  getNodeParent: | #js
    // #TODO Slow
    function(node) {
      return TreeObject.find(this.userApp, (p => (p.children?.map(c => c.id).includes(node.id))));
    }
watch:
  sui:
    deep: true
    handler: | #js
      function(sui) {
        sui.node.active = (sui.node.selected || sui.node.hovered);
      }

style:
  .comp-studio-app > .flex1:
    display: flex
    justify-content: space-between
    margin: 1vw
  .comp-studio-app > .flex1 > *:
    width: 33%
    overflow: hidden
    border: 3px solid gray
  .comp-studio-app > .flex1 > *:nth-child(1):
    width: 18%
  .comp-studio-app > .flex1 > *:nth-child(2):
    width: 15%
  .flex2:
    display: flex
    flex-direction: column
    gap: 1em