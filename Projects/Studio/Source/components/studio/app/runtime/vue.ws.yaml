dom:
  div:
    studio.doc:
      :user-app: userApp
      :user-app-state: $data
      :sui: sui
    studio.app.runtime.common:
      ref: common1
    ui.linq.evaluator:
      ref: linqEval1

props:
  userApp:
  sui:

mounted: | #js
  function() {
    this.$emit("mounted");
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
  }

methods:
  onAppStateChanged: | #js
    function(vars) {
      if (vars.any(v => v.varPath.includes("hovered"))) return;
      // #TODO lame
      this.$forceUpdate();
    }
  fetchFromUrl: | #js
    async function(url) {
      const ticker = Ticker.alertify((elapsed) => `<h2>‚è≥ ${elapsed.unitifyTime()}</h2> ${url}`)
      try
      {
        const text = (await (await fetch(`/fetch?url=${url}`)).text());
        // #TODO lame
        try {
          const obj = JSON.parse(text);
          return obj;
        }
        catch { return text; }
      }
      finally
      {
        ticker.stop();
      }
    }
