dom:
  div:
    v-if: showUserAppVue
    studio.app.runtime.vue:
      ref: userAppVue1
      :user-app: userApp
      :sui: sui
      @mounted: $emit('runtime-vue-inited')

props:
  userApp:
  userAppState:
  sui:

data:
  showUserAppVue: false

mounted: | #js
  async function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
    await this.init();
  }

methods:
  initUserAppVue: | #js
    async function() {
      this.showUserAppVue = false;
      await this.$nextTick();
      const studio_app_runtime_vue = `studio-app-runtime-vue`;
      const newRuntimeOptions = (await this.getVueOptions(this.userApp));
      const vueComp = Vue.component(studio_app_runtime_vue);
      const mergedOptions = Object.assign(vueComp.options, newRuntimeOptions);
      Vue.component(studio_app_runtime_vue, mergedOptions);
      this.showUserAppVue = true;
    }
  getVueOptions: | #js
    async function(userApp) {
      const vueOptions = {};
      const data = {};
      const computeds = {};
      const watchers = {};

      for (const pageNode of this.$root.getPageNodes()) {
        const pageData = {};
        // lists
        for (const listNode of this.$root.findDescNodes(pageNode, "list"))
        {
          const ds = listNode.data?.source;
          const listVarPath = `${pageNode.name}.${listNode.name}`;
          const listVarName = listVarPath.replaceAll('.', '_');

          pageData[listNode.name] = {};

          if (listNode.vars) {
            for (const var1 of listNode.vars) {
              pageData[listNode.name][var1.name] = null;
            }
          }

          // we can't watch the nested properties directly
          // so we reference the nesteds by a computed
          // and watch that
          for (const key in pageData[listNode.name]) {
            computeds[`cdw_${listVarName}_${key}`] = {
              get: eval(`(function() { return this.${listVarPath}.${key}; })`)
            };
          }
        }
        data[pageNode.name] = pageData;
      }

      vueOptions.data = function() { return data };
      vueOptions.computed = computeds;
      vueOptions.watch = watchers;

      return vueOptions;
    }
  init: | #js
    async function() {
      this.log("ðŸ”´ init app runtime");
      this.initUserAppVue();
    }
  onAppStateChanged: | #js
    function(vars) {
      for (const var1 of vars) {
        if ("hovered" == var1.varPath.last()) continue;
        this.log(`ðŸ§Š ${var1.varPath.join('.')}`, var1.info, var1.value);
      }
    }

  log: | #js
    function(...args) {
      this.$root.$emit('log', 'runtime', null, args);
    }

style:
  .comp-studio-app-runtime:
  .comp-studio-app-runtime-vue:
