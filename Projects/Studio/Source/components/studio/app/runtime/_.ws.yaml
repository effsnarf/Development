dom:
  div:
    v-if: showUserAppVue
    studio.app.runtime.vue:
      ref: userAppVue1
      :user-app: userApp
      :sui: sui

props:
  userApp:
  userAppState:
  sui:

data:
  showUserAppVue: false

mounted: | #js
  async function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
    await this.init();
  }

methods:
  initUserAppVue: | #js
    async function() {
      this.showUserAppVue = false;
      await this.$nextTick();
      const studio_app_runtime_vue = `studio-app-runtime-vue`;
      const newRuntimeOptions = (await this.getVueOptions(this.userApp));
      const vueComp = Vue.component(studio_app_runtime_vue);
      const mergedOptions = Object.assign(vueComp.options, newRuntimeOptions);
      Vue.component(studio_app_runtime_vue, mergedOptions);
      this.showUserAppVue = true;
    }
  getVueOptions: | #js
    async function(userApp) {
      const vueOptions = {};
      const data = {};
      const computeds = {};
      const watchers = {};

      for (const pageNode of this.$root.getPageNodes()) {
        const pageData = {};
        // lists
        for (const listNode of this.$root.findDescNodes(pageNode, "list"))
        {
          const ds = listNode.data?.source;
          const listVarPath = `${pageNode.name}.${listNode.name}`;
          const listVarName = listVarPath.replaceAll('.', '_');

          // page data
          pageData[listNode.name] = {
            _items: [],
            items: [],
            hovered: null,
            selected: null,
          };

          if ("url" == ds.type) {
            // [url] variable
            pageData[listNode.name].url = null;

            // [url] computed
            // #TODO show exception to the user
            computeds[`${listVarName}_url`] = {
              get: eval(`(function() {
                try {
                  return ${ds.url};
                }
                catch (ex) {
                  console.warn(ex);
                  return null;
                }
              })`)
            };

            // [url] watchers
            watchers[`${listVarName}_url`] = {
              handler: eval(`(async function(newUrl) {
                this.${listVarPath}.url = newUrl;
                if (!newUrl) return;
                const data = (await this.fetchFromUrl(newUrl));
                this.${listVarPath}._items = data;
              })`),
              immediate: true
            };

            // we can't watch the nested property directly
            // so we reference the nested by a computed
            // and watch that
            computeds[`cw_${listVarName}__items`] = {
              get: eval(`(function() { return this.${listVarPath}._items; })`)
            };

            watchers[`cw_${listVarName}__items`] = {
              handler: eval(`(async function(new_items) {
                const linq = ${JSON.stringify((ds.linq || null))};
                const datas = this.$refs.linqEval1.evaluateOps(null, new_items, linq);
                this.${listVarPath}.items = datas.last();
              })`),
            }
          }

          for (const key of Object.keys(pageData[listNode.name])) {
            watchers[`${listVarPath}.${key}`] = {
              handler: eval("(function(newValue, oldValue) { this.$refs.common1.onAppStateChanged(`${listVarPath}.${key}`.split('.'), newValue, oldValue); })"),
              immediate: false
            };
          }
        }
        data[pageNode.name] = pageData;
      }

      vueOptions.data = function() { return data };
      vueOptions.computed = computeds;
      vueOptions.watch = watchers;

      return vueOptions;
    }
  init: | #js
    async function() {
      this.log("ðŸ”´ init app runtime");
      this.initUserAppVue();
    }
  onAppStateChanged: | #js
    function(vars) {
      for (const var1 of vars) {
        if ("hovered" == var1.varPath.last()) continue;
        this.log(`ðŸ§Š ${var1.varPath.join('.')}`, var1.info, var1.value);
      }
    }

  log: | #js
    function(...args) {
      this.$root.$emit('log', 'runtime', null, args);
    }
