dom:
  div:
    studio.doc.node.user.app:
      :user-app: userApp
      :user-app-state: userAppState
      :sui: sui
    studio.app.runtime.common:
      ref: common1
    ui.linq.evaluator:
      ref: linqEval1

props:
  userApp:
  sui:

data:
  userAppState:

mounted: | #js
  function() {
    this.initAppState();
    this.$root.e.on("app.node.changed", this.onAppNodeChanged.bind(this));
    this.$root.e.on("app.state.changed", this.onAppStateChanged.bind(this));
    this.$root.e.on("rebuild.app.state", this.initAppState.bind(this));
  }

methods:
  initAppState: | #js
    function() {
      this.userAppState = this.$root.getNewUserAppState(this.userApp);
      this.$emit("user-app-state", this.userAppState);
    }
  updateUserAppState: | #js
    function() {
      //alertify.message("Updating app state");
      const oldAppState = Objects.clone(this.userAppState);
      const newAppState = this.$root.getNewUserAppState(this.userApp);
      Objects.deepAssignLeafs(newAppState, oldAppState);
      this.userAppState = newAppState;
      this.$emit("user-app-state", this.userAppState);
    }
  onAppNodeChanged: | #js
    function() {
      this.updateUserAppState();
    }
  onAppStateChanged: | #js
    function(vars) {
      if (vars.any(v => v.varPath.includes("hovered"))) return;
      // #TODO lame
      this.$forceUpdate();
    }
