dom:
  div:
    studio.doc.node.user.app:
      :user-app: userApp
      :user-app-state: userAppState
      :sui: sui
    studio.app.runtime.common:
      ref: common1
    ui.linq.evaluator:
      ref: linqEval1

props:
  userApp:
  sui:

data:
  userAppState:

mounted: | #js
  function() {
    this.initAppState();
    this.$root.e.on("app.node.changed", this.onAppNodeChanged.bind(this));
    this.$root.e.on("app.state.changed", this.onAppStateChanged.bind(this));
    this.$root.e.on("rebuild.app.state", this.initAppState.bind(this));
  }

methods:
  initAppState: | #js
    function() {
      this.userAppState = this.getNewUserAppState(this.userApp);
      this.$emit("user-app-state", this.userAppState);
    }
  updateUserAppState: | #js
    function() {
      const oldAppState = Objects.clone(this.userAppState);
      const newAppState = this.getNewUserAppState(this.userApp);
      Objects.deepAssignLeafs(newAppState, oldAppState);
      this.userAppState = newAppState;
      this.$emit("user-app-state", this.userAppState);
    }
  getNewUserAppState: | #js
    function(userApp) {
      return this.getContainerData(userApp);
    }
  getContainerData: | #js
    function(container) {
      const data = {};
      const varsData = this.getNewVarsData(container);
      Object.assign(data, varsData);
      const scopeChildren = this.$root.getScopeContainerNodes(container);
      for (const child of scopeChildren) {
        data[child.name] = this.getContainerData(child);
      }
      return data;
    }
  getNewVarsData: | #js
    function(container) {
      const data = {};
      for (const var1 of (container.vars??[])) {
        data[var1.name] = this.getNewVarData(var1);
      }
      return data;
    }
  getNewVarData: | #js
    function(var1) {
      const d = {
        value: null
      };
      if (var1.type == "fetch") {
        d._url = null;
        d._value = null;
      }
      return d;
    }
  onAppNodeChanged: | #js
    function() {
      this.updateUserAppState();
    }
  onAppStateChanged: | #js
    function(vars) {
      if (vars.any(v => v.varPath.includes("hovered"))) return;
      // #TODO lame
      this.$forceUpdate();
    }
