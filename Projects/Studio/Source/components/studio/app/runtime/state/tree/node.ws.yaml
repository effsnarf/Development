dom:
  div:
    .flex1:
      :class: "{ highlighted: isHighlighted }"
      @mouseenter: () => { isHighlighted = false; }
      span:
        v-text: "'ðŸ§Š'"
      span:
        v-text: item.name
      div:
        v-if: item.value
        .preview:
          ui.value.preview:
            :value: item.value
            :show-visible-fields-filter: "false"

props:
  item:
  userAppState:

data:
  isHighlighted: 0
  highlightDuration: 3000
  highlightTimer: null
  key1:

mounted: | #js
  function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
  }

methods:
  refresh: | #js
    function() {
    }
  onAppStateChanged: | #js
    function(vars) {
      const var1 = vars.find(v => Objects.areEqual(this.item.path, v.varPath));
      if (var1) {
        this.item.value = var1.newValue;
        this.flashHighlight();
      }
    }
  flashHighlight: | #js
    function(value = true) {
      this.isHighlighted = value;
      clearTimeout(this.highlightTimer);
      if (!value) return;
      this.highlightTimer = setTimeout(() => { this.flashHighlight(false) }, this.highlightDuration);
    }

style:
  .highlighted:
    font-size: 110%
    padding: 0 0.5em
    border: 2px dashed yellow !important
    background: "#22448880"
  .flex1:
    display: flex
    gap: 0.5em
    transition: 0.4s !important
  .preview:
    display: flex
    align-items: baseline
    margin: -0.1em
    max-width: 15em
    max-height: 3.5em
    overflow: hidden
    