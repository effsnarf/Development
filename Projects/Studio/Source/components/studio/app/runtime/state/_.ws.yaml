dom:
  div:
    :key: key1
    div:
      .flex.justify-between:
        button:
          title: "rebuild app state"
          v-text: "'ðŸ§Š'"
          @click: rebuildAppState
        button:
          title: "refresh app state tree"
          v-text: "'ðŸŒ²'"
          @click: refresh
      ui.tree:
        :root: root
        item-type: studio.app.runtime.state.tree.node
        :initial-expanded: "true"
        @node-select: onNodeSelect
      div:
        v-if: selected.node
        :style: "{ 'margin-top': '2em' }"
        div:
          h2:
            v-text: "'ðŸ§Š ' + selected.node.path.join('.')"
          ui.value:
            :value: selected.node.value

props:
  userApp:
  userAppState:
  sui:
  showAllPages: false

data:
  appStateTree:
  root:
  selected:
    node:
  key1: 1

mounted: | #js
  async function() {
    this.$root.e.on("app.state.changed", this.onAppStateChanged.bind(this));
    this.$root.e.on("app.node.changed", this.onAppNodeChanged.bind(this));
    this.$watch("sui.page.selected", this.onSelectedPageChanged.bind(this));
    this.refresh = this._refresh.bind(this).throttle(400);
    this.refresh();
  }

methods:
  onNodeSelect: | #js
    function(node) {
      this.selected.node = node;
    }
  onSelectedPageChanged: | #js
    function() {
      this.refresh();
    }
  onAppStateChanged: | #js
    function(vars) {
      this.refresh();
    }
  onAppNodeChanged: | #js
    function(node) {
      this.refresh();
    }
  rebuildAppState: | #js
    function() {
      this.$root.e.emit("rebuild.app.state");
    }
  refresh: | #js
    function() {
      // replaced with throttled version in mounted
    }
  _refresh: | #js
    async function() {
      //alertify.message("ðŸŒ²refreshing app state tree");
      const onNode = (objNode, treeNode, key, value, path) => { treeNode.icon = this.$root.getNodeIcon(this.$root.getContainerNodeByPath(path), null, null); }
      const appStateTree = TreeObject.fromObject(this.userAppState, this.expandNodeToTree, [], "name", "value", "path", 0, onNode);
      this.appStateTree = appStateTree;
      this.root = this.appStateTree;
      if (this.sui.page.selected && !this.showAllPages) this.root = this.appStateTree.children.find(c => (c.name == this.sui.page.selected.name));
      this.key1++;
    }
  expandNodeToTree: | #js
    function(node, key, value, nodePath) {
      // #TODO inaccurate
      if (["dataUrl", "_items", "items", "hovered", "selected"].includes(nodePath.last())) return false;
      return true;
    }

watch:
  userAppState: | #js
    function() {
      this.refresh();
    }

style:
  h2:
    opacity: 0.5
