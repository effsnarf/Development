dom:
  div:
    h2:
      v-text: "'State'"
    div:
      :key: key1
      ui.tree:
        :root: appStateTree
        item-type: studio.app.runtime.state.tree.node
        :initial-expanded: "true"

props:
  userApp:
  userAppState:
  sui:

data:
  appStateTree:
  key1: 1

mounted: | #js
  async function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
    //this.$watch("sui.page.selected", this.refresh.bind(this));
  }

methods:
  getAppState: | #js
    async function(userApp) {
      const root = {};
      for (const pageNode of this.$root.getPageNodes()) {
        root[pageNode.name] = (await this.getPageAppState(pageNode));
      }
      return root;
    }
  getPageAppState: | #js
    async function(pageNode) {
      const page = {};

      for (const listNode of this.$root.findDescNodes(pageNode, "list"))
      {
        page[listNode.name] = {
          items: [],
          hovered: null,
          selected: null
        };
      }

      return page;
    }
  calcAppState: | #js
    async function() {
      const appState = (await this.getAppState(this.userApp));
      for (const key in appState) this.userAppState[key] = appState[key];
      this.refresh();
    }
  onAppStateChanged: | #js
    function(vars) {
      this.refresh();
    }
  refresh: | #js
    async function() {
      const appStateTree = Objects.toTreeObject(this.userAppState, this.expandNodeToTree);
      this.appStateTree = appStateTree;
      this.key1++;
    }
  expandNodeToTree: | #js
    function(node, key, value, nodePath) {
      // #TODO not accurate
      if (["items", "hovered", "selected"].includes(nodePath.last())) return false;
      return true;
    }

computed:
