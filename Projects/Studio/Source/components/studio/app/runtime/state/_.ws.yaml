dom:
  div:
    div:
      button:
        v-text: "'calc app state'"
        @click: calcAppState
    div:
      v-if: appStateTree
      ui.tabs:
        :options: "pageNames.map(p => ('📄 ' + p))"
        direction: horizontal
        v-model: selectedPageTabIndex
      div:
        v-for: (pageName, i) in pageNames
        transition:
          name: slide
          div:
            v-if: (i == selectedPageTabIndex)
            ui.tree:
              :root: pageStateTrees[pageName]
              item-type: studio.app.runtime.state.tree.node
              :initial-expanded: "true"

props:
  userApp:
  sui:

data:
  appStateTree:
  pageStateTrees: "{}"
  selectedPageTabIndex: null
  key1: 1

mounted: | #js
  function() {
    this.$root.$on("app-state-changed", this.refresh.bind(this));
    this.$watch("sui.page.selected", this.refresh.bind(this));
    this.refresh();
  }

methods:
  getAppState: | #js
    async function(userApp) {
      const root = {};
      for (const pageNode of this.$root.getPageNodes()) {
        root[pageNode.name] = (await this.getPageAppState(pageNode));
      }
      return root;
    }
  getPageAppState: | #js
    async function(pageNode) {
      const page = {};
      
      // page.var = {};
      // for (const varNode of this.$root.findDescNodes(pageNode, "var"))
      // {
      //   page.var[varNode.name] = null;
      // }

      page.list = {};
      for (const listNode of this.$root.findDescNodes(pageNode, "list"))
      {
        page.list[listNode.name] = {
          items: (await this.getDataFromDataSource(listNode)),
          hovered: null,
          selected: null
        };
      }

      return page;
    }
  getDataFromDataSource: | #js
    async function(node) {
      if (!node?.data?.source) return;
      const dataSource = node.data.source;
      if (dataSource.type == "mock") {
        const items = Array.from(
          { length: 10 },
          (_, i) => ({ name: `item ${i + 1}` })
        );
        return items;
      }
      if (dataSource.type == "url") {
        const url = node.data.source.url;
        const msg1 = alertify.message(`⏳ fetching ${url}`).delay(0);
        const data = (await (await fetch(`/fetch?url=${url}`)).json());
        msg1.dismiss();
        // #TODO hard coded, replace with linq evaluator for node.data.source.linq
        if (data.boards) {
          return data.boards
            .map(b => ({ board: b.board, title: b.title }))
            .take(10);
        }
        if (data?.[0]?.threads) {
          return data
            .flatMap(page => page.threads)
            .take(10)
            .map(t => ({ sub: t.sub, com: t.com?.substr(0, 50) }))
            ;
        }
        return data;
      }
      throw (`Unknown data source: ${dataSource.type}`);
    }
  getPageStateTree: | #js
    function(pageName) {
      return this.appStateTree
        ?.children
        .find(c => (pageName == c.name));
    }
  calcAppState: | #js
    async function() {
      const appState = (await this.getAppState(this.userApp));
      this.$root.global.app.state = appState;
      this.refresh();
    }
  expandNodeToTree: | #js
    function(node, key, value, nodePath) {
      // #TODO not accurate
      if (["items", "hovered", "selected"].includes(nodePath.last())) return false;
      return true;
    }
  refresh: | #js
    async function() {
      const appState = this.$root.global.app.state;
      const appStateTree = Objects.toTreeObject(appState, this.expandNodeToTree);
      this.appStateTree = appStateTree;
      this.pageStateTrees = {};
      for (const pageName of this.pageNames)
        this.pageStateTrees[pageName] = this.getPageStateTree(pageName);
      this.key1++;
    }

computed:
  pageNames: | #js
    function() {
      return this.$root.getPageNames();
    }
