dom:
  div:
    div:
      :key: key1
      ui.tree:
        :root: root
        :user-app-state: userAppState
        item-type: studio.app.runtime.state.tree.node
        :initial-expanded: "true"
        @node-select: onNodeSelect
      div:
        v-if: selected.node
        :style: "{ 'margin-top': '2em' }"
        div:
          h2:
            v-text: "'ðŸ§Š ' + selected.node.path.join('.')"
          ui.value:
            :value: selected.node.value

props:
  userApp:
  userAppState:
  sui:
  showAllPages: false

data:
  appStateTree:
  root:
  selected:
    node:
  key1: 1

mounted: | #js
  async function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
    this.$watch("sui.page.selected", this.onSelectedPageChanged.bind(this));
    this.refresh();
  }

methods:
  onNodeSelect: | #js
    function(node) {
      this.selected.node = node;
    }
  onSelectedPageChanged: | #js
    function(pageNode) {
      this.refresh(pageNode);
    }
  getAppState: | #js
    async function(userApp) {
      const root = {};
      for (const pageNode of this.$root.getPageNodes()) {
        root[pageNode.name] = (await this.getPageAppState(pageNode));
      }
      return root;
    }
  getPageAppState: | #js
    async function(pageNode) {
      const page = {};

      for (const listNode of this.$root.findDescNodes(pageNode, "list"))
      {
        page[listNode.name] = {
          _items: [],
          items: [],
          hovered: null,
          selected: null,
        };
        this.addDataSourceState(pageNode, page, listNode);
      }

      return page;
    }
  addDataSourceState: | #js
    function(pageNode, page, node) {
      // #TODO remove
      const ds = node.data?.source;
      if (!ds) return;
      if ("url" == ds.type) {
        const getUrl = eval(`(function() { return ${ds.url}; })`).bind(this.userAppState);
      }
    }
  calcAppState: | #js
    async function() {
      const appState = (await this.getAppState(this.userApp));
      for (const key in appState) this.userAppState[key] = appState[key];
      this.refresh();
    }
  onAppStateChanged: | #js
    function(vars) {
      //this.refresh();
    }
  refresh: | #js
    async function(pageNode) {
      const appStateTree = Objects.toTreeObject(this.userAppState, this.expandNodeToTree, [], "name", "value");
      this.appStateTree = appStateTree;
      this.root = this.appStateTree;
      if (pageNode && !this.showAllPages) this.root = this.appStateTree.children.find(c => (c.name == pageNode.name));
      this.key1++;
      this.$forceUpdate();
    }
  expandNodeToTree: | #js
    function(node, key, value, nodePath) {
      // #TODO inaccurate
      if (["_items", "items", "hovered", "selected"].includes(nodePath.last())) return false;
      return true;
    }

watch:
  userAppState: | #js
    function() {
      this.refresh();
    }

style:
  h2:
    opacity: 0.5
