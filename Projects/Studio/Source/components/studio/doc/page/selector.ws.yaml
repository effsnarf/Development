dom:
  .page-selector:
    v-if: is.inited
    .pages:
      :key: key1
      .clickable:
        v-for: pageNode in pageNodes
        @click: () => onSelectPage(pageNode)
        :class: "{ selected: (sui.node.selecteds[0]?.id == pageNode.id) }"
        .page-title:
          v-text: "'ðŸ“œ ' + pageNode.name"

props:
  userApp:
  userAppState:
  sui:

data:
  is:
    inited: false
  key1: 1

mounted: | #js
  function() {
    setTimeout(() => {
      this.is.inited = true;
    }, 100);
  }

methods:
  onSelectPage: | #js
    function(newPageNode) {
      if ((newPageNode?.id) && (newPageNode?.id == this.sui.node.selecteds[0]?.id)) newPageNode = null;
      //this.sui.page.trans.dir = this.getPageTransDir(this.sui.page.selected, newPage);
      this.$root.do("select.node", { selectIndex: 0, node: newPageNode });
    }
  refresh: | #js
    function() {
      this.key1++;
    }

computed:
  pageNodes: | #js
    function() {
      return this.$root.getPageNodes();
    }

style:
  .page-selector:
  .pages:
    display: flex
    flex-direction: column
    gap: 0
    justify-content: center
  .pages > *:
    overflow: hidden
    opacity: 0.4
    filter: grayscale(1)
    cursor: pointer
  .pages > .selected, .pages > *:hover:
    opacity: 1
    filter: none
  .page-example:
    aspect-ratio: 1 / 2
    width: 10em
    overflow: hidden
    border: 2px solid gray
    transform: scale(0.5)
    transform-origin: left top
    pointer-events: none
