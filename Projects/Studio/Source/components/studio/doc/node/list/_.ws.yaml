dom:
  ui.dom.layout:
    :layout: node.layout
    :show-example: (!node.children?.length)
    :show-grid-name: "false"
    .list-item:
      v-for: (item, i) in visibleItems
      :key: getListItemKey(item)
      studio.doc.node:
        v-for: childNode in node.children
        :node: childNode
        :user-app-state: userAppState
        :sui: sui
        :data-item: item
        :item-index: i
        :items-count: visibleItems.length
        :key: childNode.id
      @mouseenter: () => hovered = item
      @mouseleave: () => hovered = null
      @click: () => onClick(item)

props:
  node:
  userAppState:
  sui:

data:
  items:
  hovered:
  selected:

mounted: | #js
  function() {
  }

methods:
  onClick: | #js
    function(item) {
      this.selected = item;
      return;
      if (this.selectedItems.includes(item)) return this.selectedItems.remove(item);
      this.selectedItems.push(item);
    }
  getListItemKey: | #js
    function(item) {
      if (!item) return null;
      const fields = Object.keys(item);
      return item[fields[0]];
    }
  getMockArray: | #js
    function() {
      return Array.from(Array(6).keys()).map((i) => null);
    }

computed:
  visibleItems: | #js
    function() {
      return (this.items?.take(6) ?? this.getMockArray());
    }

style:
  .list-item:
    cursor: pointer
  .list-item:hover:
    background: "#80808030"
    opacity: 1
