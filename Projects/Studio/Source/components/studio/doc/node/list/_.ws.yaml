dom:
  ui.dom.layout:
    :layout: node.layout
    :show-example: (false)
    :show-grid-name: "false"
    template:
      v-slot: header
      .error.clickable:
        v-if: "(isMockArray) || (!node.children?.length)"
        @click: "$root.do('navigate', { node, nodeVar, toolCategoryIndex: 1 })"
        h3:
          studio.dom.tree.node:
            :item: node
            :dropzone: "false"
        div:
          v-if: "(isMockArray) && (!itemsIsNotArray)"
          v-text: "'ðŸ§Š data missing'"
        div:
          v-if: "itemsIsNotArray"
          div:
            v-text: "'ðŸ§Š array expected (not ' + (typeof items) + ')'"
          ui.value:
            :value: items
          ui.linq:
            :style: "{ margin: 'auto' }"
            :input: items
        div:
          v-if: "!node.children?.length"
          v-text: "'ðŸ“‚ template missing'"
    template:
      v-slot: example-box
    .list-item:
      v-for: (item, i) in visibleItems
      :class: "{ empty: (!node.children?.length) }"
      :key: visibleItemKeys[i]
      div:
        v-if: "!node.children?.length"
        .folded1:
          ui.value:
            v-if: "!isMockArray"
            :value: item
      studio.doc.node:
        v-if: "node.children?.length"
        v-for: childNode in node.children
        :node: childNode
        :user-app-state: userAppState
        :sui: sui
        :data-item: item
        :item-index: i
        :items-count: visibleItems.length
        :key: childNode.id
      @mouseenter: () => onHover(item)
      @mouseleave: () => onHover(null)
      @click: () => onClick(item)

props:
  node:
  nodeVarPath:
  userAppState:
  sui:

data:
  items:
  hovered:
  selected:
  visibleItems:
  visibleItemKeys: []
  isMockArray: false
  exampleItems: 9
  maxVisibleItems: 20

mounted: | #js
  function() {
    this.$root.e.on("app.node.changed", this.onAppNodeChanged.bind(this));
    this.$root.bindToUserAppState(this, "items", `${this.nodeVarPath}.items.items`, this.refresh.bind(this));
    this.$root.bindToUserAppState(this, "hovered", `${this.nodeVarPath}.hovered.value`);
    this.$root.bindToUserAppState(this, "selected", `${this.nodeVarPath}.selected.value`);
  }

methods:
  onAppNodeChanged: | #js
    function(node) {
      if (node.id != this.node.id) return;
      this.refresh();
    }
  getVisibleItems: | #js
    function(items) {
      this.isMockArray = false;
      if (!items || !Array.isArray(items)) {
        this.isMockArray = true;
        return this.getMockArray();
      }
      return items.take(this.maxVisibleItems);
    }
  onHover: | #js
    function(item) {
      return;
      this.hovered = item;
    }
  onClick: | #js
    function(item) {
      if (item == this.selected) item = null;
      this.selected = item;
      return;
      if (this.selectedItems.includes(item)) return this.selectedItems.remove(item);
      this.selectedItems.push(item);
    }
  getListItemKey: | #js
    function(item) {
      if (!item) return null;
      if (item._id) return item._id;
      if (item.id) return item.id;
      const fields = Object.keys(item);
      return item[fields[0]];
    }
  getMockArray: | #js
    function() {
      return Array.from(Array(this.exampleItems).keys()).map((i) => null);
    }
  refresh: | #js
    function() {
      this.visibleItems = this.getVisibleItems(this.items);
      this.visibleItemKeys = this.visibleItems?.map((item) => this.getListItemKey(item));
    }

computed:
  itemsIsNotArray: | #js
    function() {
      return (!!this.items) && (!Array.isArray(this.items));
    }

watch:
  items:
    immediate: true
    deep: false
    handler: | #js
      function(items) {
        this.refresh();
      }
      
style:
  .folded1:
    max-height: 7em
    overflow: hidden
    transition: 0.6s
  .folded1:hover:
    max-height: 12em
    overflow: hidden
  .list-item:
    opacity: 0.8
  .list-item:hover:
    opacity: 1
