dom:
  div:
    v-if: listItems?.length
    ui.anim:
      :anim: node.animation.anim
      :duration: "(node.animation.duration || default1.duration)"
      :stagger: "(node.animation.stagger || default1.stagger)"
      :items-count: listItems.length
      .list-item:
        v-for: (item, i) in listItems
        :key: getListItemKey(item)
        studio.doc.node:
          v-for: child in node.children
          :node: child
          :sui: sui
          :data-item: item
          :key: node.id
        @mouseenter: () => onHover(item, true)
        @mouseleave: () => onHover(item, false)
        @click: () => onClick(item)

props:
  node:
  sui:

data:
  default1:
    duration: 1000
    stagger: 100

methods:
  onClick: | #js
    function(item) {
      const varPath = `${this.$parent.nodeVarPath}.selected`;
      this.$root.studio.user.app.state.change(varPath, item);
    }
  onHover: | #js
    function(item, isHovered) {
      item = (!isHovered ? null : item);
      const varPath = `${this.$parent.nodeVarPath}.hovered`;
      this.$root.studio.user.app.state.change(varPath, item);
    }
  getListItemKey: | #js
    function(item) {
      const fields = Object.keys(item);
      return item[fields[0]];
    }

computed:
  listItems: | #js
    function() {
      //const varPath = this.node.data?.source?.name?.path;
      const varPath = `${this.$parent.nodeVarPath}.items`;
      return Objects.getProperty(this.$root.global.app.state, varPath);
    }

style:
  .list-item:
    border: 2px dashed gray
    opacity: 0.8
  .list-item:hover:
    opacity: 1
