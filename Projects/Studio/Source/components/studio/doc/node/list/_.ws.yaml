dom:
  div:
    v-if: items?.length
    studio.doc.node.anim:
      :node: node
      :items-count: visibleItems.length
      :sui: sui
      .list-item:
        v-for: (item, i) in visibleItems
        :key: getListItemKey(item)
        studio.doc.node:
          v-for: childNode in node.children
          :node: childNode
          :user-app-state: userAppState
          :sui: sui
          :data-item: item
          :key: childNode.id
        @mouseenter: () => hovered = item
        @mouseleave: () => hovered = null
        @click: () => onClick(item)

props:
  node:
  userAppState:
  sui:

data:
  items:
  hovered:
  selected:

mounted: | #js
  function() {
  }

methods:
  onClick: | #js
    function(item) {
      this.selected = item;
      return;
      if (this.selectedItems.includes(item)) return this.selectedItems.remove(item);
      this.selectedItems.push(item);
    }
  getListItemKey: | #js
    function(item) {
      if (!item) return null;
      const fields = Object.keys(item);
      return item[fields[0]];
    }

computed:
  visibleItems: | #js
    function() {
      return this.items.take(6);
    }

style:
  .list-item:
    max-height: 6em
    overflow: hidden
    opacity: 0.8
    cursor: pointer
  .list-item:hover:
    background: "#80808030"
    opacity: 1
