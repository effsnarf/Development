dom:
  div:
    v-if: listItems?.length
    studio.doc.node.anim:
      :node: node
      :items-count: listItems.length
      :sui: sui
      .list-item:
        v-for: (item, i) in listItems
        :key: getListItemKey(item)
        studio.doc.node:
          v-for: childNode in node.children
          :node: childNode
          :user-app-state: userAppState
          :sui: sui
          :data-item: item
          :key: childNode.id
        @mouseenter: () => onHover(item, true)
        @mouseleave: () => onHover(item, false)
        @click: () => onClick(item)

props:
  node:
  userAppState:
  sui:

data:
  listItems:

mounted: | #js
  function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
    this.refresh();
  }

methods:
  onAppStateChanged: | #js
    function(vars) {
      this.refresh();
    }
  onClick: | #js
    function(item) {
      const varPath = `${this.$parent.nodeVarPath}.selected`;
      Objects.setProperty(this.userAppState, varPath, item);
    }
  onHover: | #js
    function(item, isHovered) {
      item = (!isHovered ? null : item);
      const varPath = `${this.$parent.nodeVarPath}.hovered`;
      Objects.setProperty(this.userAppState, varPath, item);
    }
  getListItems: | #js
    function() {
      let listItems = Objects.getProperty(this.userAppState, this.itemsVarPath);
      if (!listItems) {
        listItems = Array.from({ length: 5 }, (_, i) => null);
      }
      return listItems.take(6);
    }
  getListItemKey: | #js
    function(item) {
      if (!item) return null;
      const fields = Object.keys(item);
      return item[fields[0]];
    }
  refresh: | #js
    function() {
      this.listItems = this.getListItems();
    }

computed:
  itemsVarPath: | #js
    function() {
      return `${this.$parent.nodeVarPath}.items`.split('.');
    }

style:
  .list-item:
    max-height: 6em
    overflow: hidden
    opacity: 0.8
  .list-item:hover:
    background: "#80808030"
    opacity: 1
