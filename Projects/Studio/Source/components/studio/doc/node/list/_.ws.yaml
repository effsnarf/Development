dom:
  ui.dom.layout:
    :layout: node.layout
    :show-example: (!node.children?.length)
    :show-grid-name: "false"
    template:
      v-slot: example-box
      .node-warning:
        v-if: "!node.children?.length"
        v-text: "'⚠️ list template'"
    .list-item:
      v-for: (item, i) in visibleItems
      :key: visibleItemKeys[i]
      studio.doc.node:
        v-for: childNode in node.children
        :node: childNode
        :user-app-state: userAppState
        :sui: sui
        :data-item: item
        :item-index: i
        :items-count: visibleItems.length
        :key: childNode.id
      @mouseenter: () => hovered = item
      @mouseleave: () => hovered = null
      @click: () => onClick(item)

props:
  node:
  userAppState:
  sui:

data:
  items:
  hovered:
  selected:
  visibleItems:
  visibleItemKeys: []
  exampleItems: 9
  maxVisibleItems: 3

mounted: | #js
  function() {
  }

methods:
  getVisibleItems: | #js
    function(items) {
      return (items?.take(this.maxVisibleItems) ?? this.getMockArray());
    }
  onClick: | #js
    function(item) {
      this.selected = item;
      return;
      if (this.selectedItems.includes(item)) return this.selectedItems.remove(item);
      this.selectedItems.push(item);
    }
  getListItemKey: | #js
    function(item) {
      if (!item) return null;
      const fields = Object.keys(item);
      return item[fields[0]];
    }
  getMockArray: | #js
    function() {
      return Array.from(Array(this.exampleItems).keys()).map((i) => null);
    }

watch:
  items:
    immediate: true
    deep: false
    handler: | #js
      function(items) {
        this.visibleItems = this.getVisibleItems(items);
        this.visibleItemKeys = this.visibleItems.map((item) => this.getListItemKey(item));
      }
      
style:
  .list-item:
    max-height: 5em
    overflow: hidden
    cursor: pointer
  .list-item:hover:
    background: "#80808030"
    opacity: 1
