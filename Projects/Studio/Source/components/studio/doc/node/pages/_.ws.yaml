dom:
  .pages:
    :key: key1
    .page:
      v-for: (pageNode, i) in visiblePageNodes
      :class: pageClasses[pageNode.id]
      :key: pageNode.id
      ui.anim:
        :anim: userApp.global.page.anim
        :anim-state: pageStates[pageNode.id]
        :auto-play-loop: (sui.page.trans.preview && (pageStates[pageNode.id] == 'entering'))
        :debug: sui.debug
        studio.doc.node:
          :node: pageNode
          :user-app-state: userAppState
          :sui: sui
          :key: pageNode.id

props:
  node:
  userApp:
  userAppState:
  sui:

data:
  pageStates: {}
  pageClasses: {}
  visiblePageNodes: []
  key1: 1

mounted: | #js
  function() {
    this.$watch("sui.page.selected", this.onSelectedPageChanged.bind(this));
    this.$root.e.on("app.loaded", this.refresh.bind(this));
  }

methods:
  onSelectedPageChanged: | #js
    async function(newPage, oldPage) {
      // wait for page elements to animate before transitioning page
      //await (1).seconds().wait();

      if (oldPage) this.pageStates[oldPage.id] = "leaving";
      this.refresh();

      // finish leaving page transition and only then
      // start entering page transition
      //if (oldPage) await (1).seconds().wait();

      if (newPage) this.pageStates[newPage.id] = "entering";
      this.refresh();
    }
  refreshVisiblePageNodes: | #js
    async function() {
      this.visiblePageNodes = [...this.pageNodes];
      //this.visiblePageNodes = this.pageNodes.filter(pageNode => (!!this.pageStates[pageNode.id]));
    }
  updatePageClasses: | #js
    function() {
      for (const pageNodeID in this.pageStates) {
        this.pageClasses[pageNodeID] = this.getPageClass(pageNodeID);
      }
    }
  getPageClass: | #js
    function(pageNodeID) {
      const cls = {};
      cls[this.pageStates[pageNodeID]] = true;
      cls.active = ("entering" == this.pageStates[pageNodeID]);
      return cls;
    }
  refresh: | #js
    function() {
      this.updatePageClasses();
      this.refreshVisiblePageNodes();
    }

computed:
  pageNodes: | #js
    function() {
      return [...this.node.children];
    }

watch:

style:
  .pages:
    min-height: 100vh
  .page:
    position: absolute
    width: 100%
    opacity: 0
    pointer-events: none
  .page.active, .page.entering, .page.leaving:
    opacity: 1
  .page.active:
    pointer-events: auto
