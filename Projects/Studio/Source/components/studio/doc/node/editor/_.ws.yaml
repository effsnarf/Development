dom:
  div:
    v-if: node
    div:
      ui.drawer:
        direction: "horizontal"
        :open: "isTabsDrawerOpen"
        ui.tabs: 
          ':options': '[nodeTypeTabName, ''ðŸ§Š data'', ''ðŸ§± flex'', ''ðŸŽ¨ style'', ''âœ¨ animation'']'
          direction: vertical
          :can-select-none: "true"
          :show-title-in-tab: "false"
          v-model: selected.tab.index
          template: 
            v-slot: tab0
            div:
              component:
                :is: getNodeCompEditorName(node)
                :node: node
                :initial: initial
                :sui: sui
                @dom-edit: (e) => $emit('dom-edit', e)
          template: 
            v-slot: tab1
            div:
              studio.doc.node.common.data.editor:
                :node: node
                :node-vue: nodeVue
                :initial: initial
                :sui: sui
          template: 
            v-slot: tab2
            div:
              studio.doc.node.common.flex.editor:
                :node: node
                :initial: initial
                :sui: sui
          template: 
            v-slot: tab3
            div:
              studio.doc.node.common.editor:
                :node: node
                :initial: initial
                :sui: sui

props:
  node:
  sui:
  nodeVue:
  isTabsDrawerOpen:

data:
  initial:
    node:
  selected:
    tab:
      index: null

methods:
  getNodeCompEditorName: | #js
    function(node) {
      if (!node) return null;
      return `studio-doc-node-${node.type.kebabize()}-editor`;
    }
  getInitialNodeData: | #js
    function(node) {
      const newNode = {};
      for (const key in node)
        if (key != "children") newNode[key] = Objects.clone(node[key]);
      return newNode;
    }

computed:
  nodeTypeTabName: | #js
    function() {
      const icon = this.$root.getNodeIcon(this.node);
      const type = this.node.type;
      return `${icon} ${type}`;
    }

watch:
  node:
    handler: | #js
      function(newNode) {
        this.initial.node = this.getInitialNodeData(newNode);
      }
    immediate: true
    