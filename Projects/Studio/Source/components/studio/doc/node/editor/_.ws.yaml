dom:
  div:
    v-if: node
    div:
      :key: node.id
      ui.tabs: 
        :options: sui.tool.category.options
        direction: horizontal
        :can-select-none: "true"
        :show-title-in-tab: "false"
        :value: sui.tool.category.index
        @tab-click: onToolTabClick
        template:
          v-slot: header
        template: 
          v-slot: tab0
          div:
            component:
              :is: getNodeCompEditorName(node)
              :node: node
              :initial: initial
              :sui: sui
              @dom-edit: (e) => $emit('dom-edit', e)
        template: 
          v-slot: tab1
          div:
            studio.doc.node.common.data.editor:
              :node: node
              :node-vue: nodeVue
              :initial: initial
              :user-app: userApp
              :user-app-state: userAppState
              :sui: sui
        template: 
          v-slot: tab2
          div:
            studio.doc.node.common.layout.editor:
              :node: node
              :initial: initial
              :sui: sui
        template: 
          v-slot: tab3
          div:
            studio.doc.node.common.design.editor:
              :user-app: userApp
              :node: node
              :initial: initial
              :sui: sui
        template: 
          v-slot: tab4
          div:
            studio.doc.node.common.animation.editor:
              :node: node
              :initial: initial
              :sui: sui
        template:
          v-slot: tab5
          div:
            studio.doc.node.common.events.editor:
              :node: node
      div:
        v-if: "false"
        pre:
          v-text: node

props:
  node:
  userApp:
  userAppState:
  sui:
  nodeVue:
  isTabsDrawerOpen:

data:
  initial:
    node: null
  selected:
    tab:
      index: null
  transName: list2

mounted: | #js
  function() {
    this.$root.e.on("app.node.edited", this.onAppNodeEdited.bind(this));
  }

methods:
  onToolTabClick: | #js
    function(e) {
      this.selectToolCategory(e?.index);
    }
  selectToolCategory: | #js
    function(index) {
      this.$root.do("select.tool.category", { index });
    }
  onAppNodeEdited: | #js
    function(node) {
      if (node.id != this.node?.id) return;
      this.initial.node = this.getInitialNodeData(node);
    }
  getNodeCompEditorName: | #js
    function(node) {
      if (!node) return null;
      if (node.type.startsWith("ui.")) return `studio-doc-node-vue-comp-editor`;
      return `studio-doc-node-${node.type.kebabize()}-editor`;
    }
  getInitialNodeData: | #js
    function(node) {
      return Objects.clone(node, { exclude: ["children"] });
    }

watch:
  node:
    handler: | #js
      function(newNode) {
        if (!this.selected.tab.index) this.selected.tab.index = 0;
        if (!this.initial.node) this.initial.node = this.getInitialNodeData(newNode);
      }
    immediate: true
    