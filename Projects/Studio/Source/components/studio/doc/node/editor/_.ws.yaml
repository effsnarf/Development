dom:
  div:
    v-if: node
    div:
      h2:
        studio.dom.tree.node:
          :item: node
          :sui: sui
      ui.tabs: 
        ':options': '[nodeTypeTabName, ''ðŸ§Š data'', ''ðŸ§± layout'', ''ðŸŽ¨ design'', ''âœ¨ animation'']'
        direction: horizontal
        :can-select-none: "true"
        :show-title-in-tab: "false"
        v-model: selected.tab.index
        template:
          v-slot: header
        template: 
          v-slot: tab0
          div:
            component:
              :is: getNodeCompEditorName(node)
              :node: node
              :initial: initial
              :sui: sui
              @dom-edit: (e) => $emit('dom-edit', e)
        template: 
          v-slot: tab1
          div:
            studio.doc.node.common.data.editor:
              :node: node
              :node-vue: nodeVue
              :initial: initial
              :user-app: userApp
              :user-app-state: userAppState
              :sui: sui
        template: 
          v-slot: tab2
          div:
            studio.doc.node.common.layout.editor:
              :node: node
              :initial: initial
              :sui: sui
        template: 
          v-slot: tab3
          div:
            studio.doc.node.common.editor:
              :node: node
              :initial: initial
              :sui: sui
        template: 
          v-slot: tab4
          div:
            studio.doc.node.common.animation.editor:
              :node: node
              :initial: initial
              :sui: sui
      div:
        v-if: "false"
        pre:
          v-text: node

props:
  node:
  userApp:
  userAppState:
  sui:
  nodeVue:
  isTabsDrawerOpen:

data:
  initial:
    node:
  selected:
    tab:
      index: null
  transName: list2

mounted: | #js
  function() {
  }

methods:
  getNodeCompEditorName: | #js
    function(node) {
      if (!node) return null;
      if (node.type.startsWith("ui.")) return `studio-doc-node-vue-comp-editor`;
      return `studio-doc-node-${node.type.kebabize()}-editor`;
    }
  getInitialNodeData: | #js
    function(node) {
      const newNode = {};
      for (const key in node)
        if (key != "children") newNode[key] = Objects.clone(node[key]);
      return newNode;
    }

computed:
  nodeTypeTabName: | #js
    function() {
      const icon = this.$root.getNodeIcon(this.node);
      const type = this.node.type;
      return `${icon} ${type}`;
    }

watch:
  node:
    handler: | #js
      function(newNode) {
        if (!this.selected.tab.index) this.selected.tab.index = 0;
        this.initial.node = this.getInitialNodeData(newNode);
      }
    immediate: true
    