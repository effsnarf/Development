dom:
  div:
    .error.clickable:
      v-if: error
      @click: "$root.do('navigate', { node, nodeVar, toolCategoryIndex: 1 })"
      ui.title:
        icon: "ðŸ§Š"
        :text: nodeVar.name
      div:
        v-text: error

props:
  node:
  nodeVar:
  nodeVarPath:
  dataItem:

data:
  error:
  value:

mounted: | #js
  function() {
    this.init();
    this.$root.e.on(["app.node.changed", "app.node.preview"], this.onAppNodeChanged.bind(this));
    this.$root.e.on("app.state.changed", this.onAppStateChanged.bind(this));
  }

methods:
  init: | #js
    function() {
      this.refresh();
    }
  refresh: | #js
    function() {
      try {
        this.error = null;
        const func = this.$root.toContextFunc(this, null, { args: [], code: `return ${this.nodeVar.exp};` }, { async: false });
        const oldValue = this.value;
        const newValue = func();
        if (newValue == oldValue) return;
        this.value = newValue;
        this.$emit("update", this.value);
      }
      catch (ex) {
        this.error = ex.message;
      }
    }
  onAppStateChanged: | #js
    function(vars) {
      this.refresh();
    }
  onAppNodeChanged: | #js
    function(node) {
      if (node.id != this.node.id) return;
      this.refresh();
    }

watch:
  nodeVar:
    immediate: true
    handler: | #js
      function(nodeVar) {
        this.init();
      }
