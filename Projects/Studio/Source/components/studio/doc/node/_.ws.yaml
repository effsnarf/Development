dom:
  component:
    v-if: node
    ref: comp1
    :is: nodeCompName
    :node: node
    :user-app-state: userAppState
    :sui: sui
    :data-item: dataItem
    :content-node: contentNode
    template:
      v-slot: child-nodes
      studio.doc.node:
        v-for: childNode in node.children
        :node: childNode
        :user-app-state: userAppState
        :sui: sui
        :data-item: dataItem
        :content-node: contentNode
        :key: childNode.id

props:
  node:
  nodeVarData:
  userAppState:
  sui:
  dataItem:
  contentNode:

mounted: | #js
  function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
    this.applyCssClass(this.nodeCssClass);
    this.applyStyle(this.nodeStyle);
  }

methods:
  applyCssClass: | #js
    function(cls) {
      // Apply CSS classes to this.$el
      // cls is an object like { cls1: true, cls2: false, ... }
      if (!this.$el?.classList) return;
      Object.keys(cls).forEach(key => {
        if (cls[key]) {
          this.$el.classList.add(key);
        } else {
          this.$el.classList.remove(key);
        }
      });
    }
  applyStyle: | #js
    function(s) {
      // Apply inline styles to this.$el
      // s is an object like { background: 'red', color: 'blue', ... }
      if (!this.$el?.style) return;
      Object.keys(s).forEach(key => {
        this.$el.style[key] = s[key];
      });
    }
  onAppStateChanged: | #js
    function(vars) {
    }
  getNodeCompName: | #js
    function(node) {
      return `studio-doc-node-${node.type.kebabize()}`;
    }
  getNodeStyle: | #js
    function(node) {
      if (!node) return;
      const s = {};
      s['background-color'] = node.style?.bg?.color;
      s['width'] = node.layout?.width;
      Object.assign(s, this.getFlexStyle(node));
      Objects.removeNullValueKeys(s);
      if (!Object.keys(s).length) return null;
      return s;
    }
  getFlexStyle: | #js
    function(node) {
      const s = {};
      s.display = "flex";
      s['justify-content'] = (node.flex?.justify?.content || "space-between");
      s['flex-direction'] = this.toFlexDirection(node);
      return s;
    }
  toFlexDirection: | #js
    function(node) {
      switch (node.flex?.dir)
      {
        case "h": return "row";
        case "v": return "column";
      }
      return "column";
    }
  areNodesRelated: | #js
    function(node1, node2, tryOpposite = true) {
      if (!node1 || !node2) return false;
      if (node1.id == node2.id) return true;
      if (node1.type == "comp.inst") {
        if (node2.type == "comp") {
          if (node1.comp.name == node2.name) return true;
        }
      }
      if (tryOpposite) return this.areNodesRelated(node2, node1, false);
      return false;
    }

computed:
  nodeVarPath: | #js
    function() {
      return this.$root.getNodeVarPath(this.node);
    }
  nodePageName: | #js
    function() {
      return this.$root.getNodePageName(this.node);
    }
  nodeCompName: | #js
    function() {
      return this.getNodeCompName(this.node);
    }
  nodeCssClass: | #js
    function() {
      return {
        'hovered-node': this.isHoveredNode,
        'selected-node': this.isSelectedNode,
        'active-node':  this.isActiveNode
      };
    }
  nodeStyle: | #js
    function() {
      return this.getNodeStyle(this.node);
    }
  isHoveredNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.hovered);
    }
  isSelectedNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.selected);
    }
  isActiveNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.active);
    }

watch:
  nodeCssClass:
    handler: | #js
      function(nodeCssClass) {
        this.applyCssClass(nodeCssClass);
      }
    immediate: true
  nodeStyle:
    handler: | #js
      function(nodeStyle) {
        this.applyStyle(nodeStyle);
      }
    immediate: true

style:
  .comp-studio-doc-node:
    border: "1px dashed #444"
  .hovered-node:
    border: 2px dashed yellow
  .selected-node:
    border: 4px dashed green
