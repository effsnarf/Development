dom:
  div:
    component:
      v-if: node
      :is: nodeCompName
      :node: node
      :sui: sui
      :content-node: contentNode
      :class: nodeCssClass
      :style: nodeStyle
      template:
        v-slot: child-nodes
        studio.doc.node:
          v-for: childNode in node.children
          :node: childNode
          :sui: sui
          :content-node: contentNode
          :key: childNode.id

props:
  node:
  sui:
  contentNode:

methods:
  getNodeCompName: | #js
    function(node) {
      return `studio-doc-node-${node.type.kebabize()}`;
    }
  getNodeStyle: | #js
    function(node) {
      if (!node) return;
      const s = {};
      s['background-color'] = node.style?.bg?.color;
      Object.assign(s, this.getFlexStyle(node));
      Objects.removeNullValueKeys(s);
      if (!Object.keys(s).length) return null;
      return s;
    }
  getFlexStyle: | #js
    function(node) {
      const s = {};
      s.display = "flex";
      s['justify-content'] = (node.flex?.justify?.content || "space-between");
      s['flex-direction'] = this.toFlexDirection(node);
      return s;
    }
  toFlexDirection: | #js
    function(node) {
      switch (node.flex?.dir)
      {
        case "h": return "row";
        case "v": return "column";
      }
      return "column";
    }

  areNodesRelated: | #js
    function(node1, node2, tryOpposite = true) {
      if (!node1 || !node2) return false;
      if (node1.id == node2.id) return true;
      if (node1.type == "comp.inst") {
        if (node2.type == "comp") {
          if (node1.comp.name == node2.name) return true;
        }
      }
      if (tryOpposite) return this.areNodesRelated(node2, node1, false);
      return false;
    }

computed:
  nodeCompName: | #js
    function() {
      return this.getNodeCompName(this.node);
    }
  nodeCssClass: | #js
    function() {
      return {
        'hovered-node': this.isHoveredNode,
        'selected-node': this.isSelectedNode,
        'active-node':  this.isActiveNode
      };
    }
  nodeStyle: | #js
    function() {
      return this.getNodeStyle(this.node);
    }
  isHoveredNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.hovered);
    }
  isSelectedNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.selected);
    }
  isActiveNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.active);
    }

style:
  .comp-studio-doc-node:
    border: "1px dashed #444"
  .hovered-node:
    border: 2px dashed yellow
  .selected-node:
    border: 4px dashed green
