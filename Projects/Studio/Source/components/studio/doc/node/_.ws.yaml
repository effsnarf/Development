dom:
  studio.doc.node.anim:
    :node: node
    :item-index: itemIndex
    :items-count: itemsCount
    :sui: sui
    component:
      v-if: node
      ref: comp1
      :is: nodeCompName
      :node: node
      :user-app: userApp
      :user-app-state: userAppState
      :sui: sui
      :data-item: dataItem
      :content-node: contentNode
      :class: nodeCssClass
      :style: nodeStyle
      :data-sui-page: nodePageName
      template:
        v-slot: child-nodes
        ui.dom.layout:
          :layout: node.layout
          :show-example: (!node.children?.length)
          :show-grid-name: "false"
          :key: key1
          studio.doc.node:
            v-for: childNode in node.children
            :node: childNode
            :user-app: userApp
            :user-app-state: userAppState
            :sui: sui
            :data-item: dataItem
            :content-node: contentNode
            :key: childNode.id

props:
  node:
  userApp:
  userAppState:
  sui:
  dataItem:
  itemIndex:
  itemsCount:
  contentNode:

data:
  key1: 1

mounted: | #js
  function() {
    this.$root.$on("app.state.changed", this.onAppStateChanged.bind(this));
    this.$root.$on("app.node.changed", this.onAppNodeChanged.bind(this));
    this.$watch("sui.node.selected", this.onSelectedNodeChanged.bind(this));
    this.bindNodeVarsToGlobalAppState();
    this.initNodeVars();
  }

methods:
  bindNodeVarsToGlobalAppState: | #js
    function() {
      const runtimeVue = this.$root.getUserAppRuntimeVue(this);
      if (!runtimeVue) return;
      const comp1 = this.$refs.comp1;
      if (!this.nodeVarPath) return;
      const dataKeys = Object.keys(comp1.$data).except("_");
      if (!dataKeys.length) return;
      for (const key of dataKeys) {
        const varPath = `${this.nodeVarPath}.${key}`;
        comp1._studio_watches = (comp1._studio_watches || {});
        if (!comp1._studio_watches[key]) {
          // comp -> global state
          comp1.$watch(key, (newValue) => { this.$root.studio.user.comp.state.change(this.$root, comp1, key, varPath, newValue); });
          // global state -> comp
          runtimeVue.$watch(varPath, (newValue) => { comp1[key] = newValue; }, { immediate: true });
          comp1._studio_watches[key] = true;
        }
      }
    }
  initNodeVars: | #js
    function() {
      const runtimeVue = this.$root.getUserAppRuntimeVue(this);
      if (!runtimeVue) return;
      const comp1 = this.$refs.comp1;
      const vars = this.node.vars;
      if (!vars) return;
      for (const var1 of vars)
      {
        const nodeVar = this.createNodeVar(comp1, var1);
      }
    }
  createNodeVar: | #js
    function(vComp, var1) {
      if (!var1?.type) return;
      const method = this[`createNodeVar_${var1.type}`];
      if (!method) throw `Unknown node var type ${var1.type}`;
      return method(vComp, var1);
    }
  createNodeVar_fetch: | #js
    function(vComp, var1) {
      const $root = this.$root;
      const runtimeVue = $root.getUserAppRuntimeVue(this);
      const pageNode = this.$root.getNodePage(this);
      const sui = this.sui;
      // a fetch var has:
      // - url (computed, can reference other state nodes)
      // - _data (holds the downloaded data)
      // - linq (optional to project the data)
      // - data (the projected downloaded data)
      const url = Vue.computed({
        get: eval(`(function() {
          try {
            return ${var1.url};
          }
          catch (ex) {}
        })`).bind(this.userAppState)
      });

      const _data = Vue.reactive({ value: null });

      const url_watcher = Vue.watch(url,
        (async function(newUrl) {
          if (!newUrl) return;
          vComp[`${var1.name}Url`] = newUrl;
          _data.value = (await $root.fetchFromUrl(newUrl));
          // #TODO not accurate
          // switch to the page this list is in
          if (pageNode) sui.page.selected = pageNode;
        }),
        { immediate: true });

      const _data_watcher = Vue.watch(_data,
        (async function(newData) {
          const linq = (var1.linq || null);
          const datas = runtimeVue.$refs.linqEval1.evaluateOps(null, newData.value, linq);
          const data = datas.last();
          vComp[var1.name] = data;
        })
      );

      const nodeVar = { url, _data };
      
      return nodeVar;
    }
  createNodeVar_field: | #js
    function(vComp, var1) {
      const $root = this.$root;
      const runtimeVue = $root.getUserAppRuntimeVue(this);
      // a field node var has:
      // - value (taken from data-item[field])
      const field_watcher = Vue.watch(
        () => this.dataItem?.[var1.exp],
        (function(newValue) {
          vComp[var1.name] = newValue;
        }),
        { immediate: true });

      return { field_watcher };
    }
  createNodeVar_exp: | #js
    function(vComp, var1) {
      const $root = this.$root;
      const runtimeVue = $root.getUserAppRuntimeVue(this);
      // an exp node var has:
      // - value (evaluated)
      const exp = Vue.computed({
        get: eval(`(function() {
          try {
            return ${var1.exp};
          }
          catch (ex) {}
        })`).bind(this.userAppState)
      });

      const exp_watcher = Vue.watch(exp,
        (function(newValue) {
          vComp[var1.name] = newValue;
        }),
        { immediate: true });

      return { exp };
    }
  createNodeVar_value: | #js
    function(vComp, var1) {
      const $root = this.$root;
      const runtimeVue = $root.getUserAppRuntimeVue(this);
      // a value node var has:
      // - value (taken from value)
      vComp[var1.name] = var1.value;

      return { value: var1.value };
    }
  onAppStateChanged: | #js
    function(vars) {
    }
  onAppNodeChanged: | #js
    function(node) {
      if (node?.id != this.node?.id) return;
      this.refresh();
    }
  onSelectedNodeChanged: | #js
    function(node) {
      if (node?.id != this.node?.id) return;
      if (this.dataItem) this.$root.$emit("data.item.selected", this.dataItem);
    }
  getNodeCompName: | #js
    function(node) {
      if (node.type.startsWith("ui.")) return `studio-doc-node-vue-comp`;
      return `studio-doc-node-${node.type.kebabize()}`;
    }
  getNodeStyle: | #js
    function(node) {
      if (!node) return;
      const s = {};
      const userApp = this.$root.getUserApp?.(this);
      const bgColor = this.toStyleColor(userApp, node.design?.bg.color);
      s['background'] = this.toBackground(node.design?.bg);
      // set text color to contrast the background
      if (bgColor) {
        const textColor = Color.fromHexColor(bgColor).toContrastingTextColor();
        s['color'] = textColor.asHexColor();
        if (textColor.brightness > 0.5) {
          s['text-shadow'] = `-2px 2px 1px black`;
        }
        else {
          s['text-shadow'] = 'none';
        }
      }
      s['width'] = node.layout?.size?.width;
      s['height'] = node.layout?.size?.height;
      s['font-family'] = node.design?.font?.family;
      s['line-height'] = node.design?.line?.height;

      if (this.sui.node.hovered?.id == node.id) {
        s['border'] = `4px dashed #ffff00 !important`;
      }
      if (!this.sui.app.is.tilted) {
        if (this.sui.node.selected?.id == node.id) {
          s['border'] = `4px dashed #ffff00 !important`;
        }
        if (this.sui.node.active?.id == node.id) {
          s['box-shadow'] = `-2px 2px 2px black !important`;
        }
      }
      if (this.sui.tool.grid.lines) {
        s['transform'] = `translateZ(${(node.depth * 0.2)}em)`;
      }
      Objects.removeNullValueKeys(s);
      if (!Object.keys(s).length) return null;
      return s;
    }
  toBackground: | #js
    function(bg) {
      const userApp = this.$root.getUserApp?.(this);
      if (!userApp || !bg) return null;
      const color = this.toStyleColor(userApp, bg.color);
      if (!bg.gradient) return color;
      let gradient = (bg.gradient||"");
      const color1 = `${color}`;
      const color2 = `${color}40`;
      gradient = gradient
        .replaceAll("{color1}", color1)
        .replaceAll("{color2}", color2)
      return gradient;
    }
  toStyleColor: | #js
    function(userApp, color) {
      if (!color) return null;
      if (color.palette?.index != null) return userApp.global.design.palette.colors[color.palette.index];
      if (color.value) return color.value;
      return null;
    }
  areNodesRelated: | #js
    function(node1, node2, tryOpposite = true) {
      if (!node1 || !node2) return false;
      if (node1.id == node2.id) return true;
      if (node1.type == "comp.inst") {
        if (node2.type == "comp") {
          if (node1.comp.name == node2.name) return true;
        }
      }
      if (tryOpposite) return this.areNodesRelated(node2, node1, false);
      return false;
    }
  refresh: | #js
    function() {
      this.key1++;
    }

computed:
  nodeVarPath: | #js
    function() {
      return this.$root.getNodeVarPath(this.node);
    }
  nodePageName: | #js
    function() {
      return this.$root.getNodePageName(this.node);
    }
  nodeCompName: | #js
    function() {
      return this.getNodeCompName(this.node);
    }
  nodeCssClass: | #js
    function() {
      return {
        'studio-doc-node': true,
        'hovered-node': this.isHoveredNode,
        'selected-node': this.isSelectedNode,
        'active-node':  this.isActiveNode
      };
    }
  nodeStyle: | #js
    function() {
      return this.getNodeStyle(this.node);
    }
  isHoveredNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.hovered);
    }
  isSelectedNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.selected);
    }
  isActiveNode: | #js
    function() {
      if (!this.node) return false;
      return this.areNodesRelated(this.node, this.sui?.node.active);
    }

watch:
  nodeCssClass:
    handler: | #js
      function(nodeCssClass) {
      }
  nodeStyle:
    handler: | #js
      function(nodeStyle) {
      }

style:
  .studio-doc-node:
    transition: all 0.6s, color 0.2s, border 0s
  .hovered-node:
    border: "2px dashed #FFFF0080 !important"
  .selected-node:
    border: "2px dashed #FFFF00 !important"
  .hovered-node, .selected-node:
    box-shadow: "inset -3px 3px 2px #80808080"
