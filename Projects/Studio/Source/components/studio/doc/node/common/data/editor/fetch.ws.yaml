dom:
  div:
    ui.input.text.box:
      hint: url
      multiline: true
      v-model: url
    div:
      v-if: (true) || (url != initial.url)
      ui.button:
        icon: ✔️
        text: save
        @click: onSaveUrl
    div:
      studio.app.runtime.state.data:
        :node-var-path: nodeVarPath
        v-model: nodeVarData
      ui.value.preview:
        :value: nodeVarData
      ui.linq:
        v-if: (nodeVarData)
        :input: nodeVarData._value
        :value: initial.linq
        @input: setLinq
        @output: (value) => nodeVarLinqedData = value
      ui.value:
        :value: nodeVarLinqedData

props:
  node:
  nodeVar:
  nodeVarPath:

data:
  url:
  initial:
    url:
    linq:
  nodeVarData:
  nodeVarLinqedData:

methods:
  setLinq: | #js
    function(linq) {
      if (Objects.areEqual(linq, this.initial.linq)) return;
      this.initial.linq = Objects.clone(linq);
      this.$root.do("edit.node.var", { node: this.node, varName: this.nodeVar.name, key: "linq", value: linq });
    }
  onSaveUrl: | #js
    function() {
      this.$root.do("edit.node.var", { node: this.node, varName: this.nodeVar.name, key: "url", value: this.url });
    }

watch:
  nodeVar:
    immediate: true
    handler: | #js
      function(nodeVar) {
        this.initial.linq = Objects.clone(nodeVar.linq);
        this.initial.url = this.url = this.nodeVar?.url;
      }
