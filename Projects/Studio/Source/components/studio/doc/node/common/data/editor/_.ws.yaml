dom:
  div:
    div:
      v-if: node?.vars
      .flex:
        ui.drawer:
          ui.select:
            :options: visibleNodeVars
            :get-item-icon: (v) => '🧊'
            :get-item-text: (v) => v.name
            v-model: selectedNodeVarIndex
        .flex-grow-1:
          div:
            v-for: (nodeVar, i) in visibleNodeVars
            transition:
              name: slide-ver
              div:
                v-if: (i == selectedNodeVarIndex)
                h3:
                  ui.input.text.box:
                    :icon: "(nodeIcon + '🧊')"
                    camouflage: true
                    v-model: nodeVar.name
                ui.tabs:
                  :options: tabOptions
                  :icons: tabIcons
                  direction: vertical
                  :drawer: "true"
                  :show-title-in-tab: "true"
                  value-type: option
                  :value: nodeVar.type
                  @tab-click: (newTabIndex) => onTabChange(nodeVar, newTabIndex)
                  template:
                    v-slot: tab0
                    studio.doc.node.common.data.editor.field:
                      :node: node
                      :node-var: nodeVar
                      :initial: initial
                      :sui: sui
                  template:
                    v-slot: tab1
                    studio.doc.node.common.data.editor.exp:
                      :node: node
                      :node-var: nodeVar
                      :initial: initial
                      :sui: sui
                    component:
                      :is: "(!nodeVar.type) ? null : ('studio.doc.node.vars.' + nodeVar.type).kebabize()"
                      :node: node
                      :node-var: nodeVar
                  template:
                    v-slot: tab2
                    studio.doc.node.common.data.editor.fetch:
                      :node: node
                      :node-var: nodeVar
                      :node-var-path: getNodeVarPath(nodeVar)
                      :user-app-state: userAppState
                  template:
                    v-slot: tab3
                    studio.doc.node.common.data.editor.node.prop:
                      :node-var: nodeVar
                  template:
                    v-slot: tab4
                    studio.doc.node.common.data.editor.value:
                      :node: node
                      :node-var: nodeVar
props:
  node:
  initial:
  userApp:
  userAppState:
  sui:

data:
  tabOptions: ['field', 'exp', 'fetch', 'node.prop', 'value']
  tabIcons: ['🍃', '🟰', '🌐', '🔗', '🧊']
  selectedNodeVarIndex: 0
  visibleNodeVars: []
  nodeVarTypeIndex: 0
  nodeIcon:
  key1: 1

mounted: | #js
  function() {
    //this.$root.e.on("app.node.changed", this.onAppNodeChanged.bind(this));
  }

methods:
  onAppNodeChanged: | #js
    function(node) {
      if (node.id != this.node.id) return;
      this.refresh();
    }
  getTabOption: | #js
    function(type) {
      return this.tabOptions.findIndex(t => (t.includes(type)));
    }
  getInitialSelectedTab: | #js
    function(nodeVar) {
      if (!nodeVar) return null;
      return this.tabOptions.findIndex(t => (nodeVar.type == (t.split(' ').last())));
    }
  getNodeVarPath: | #js
    function(nodeVar) {
      const nvp = this.$root.getNodeVarPath(this.node);
      return `${nvp}.${nodeVar.name}`;
    }
  onTabChange: | #js
    function(nodeVar, newTab) {
      if (!nodeVar) return;
      const type = newTab.item;
      this.$root.do("edit.node.var", { node: this.node, varName: nodeVar.name, key: "type", value: type });
    }
  getVisibleNodeVars: | #js
    function(node) {
      return (node?.vars ?? [])
        .filter(v => (v.editable ?? true));
    }
  refresh: | #js
    function() {
      this.key1++;
    }

watch:
  node:
    immediate: true
    deep: false
    handler: | #js
      this.nodeIcon = this.$root.getNodeIcon(this.node);
      this.visibleNodeVars = this.getVisibleNodeVars(this.node);
