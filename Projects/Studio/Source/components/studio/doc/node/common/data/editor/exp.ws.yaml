dom:
  div:
    ui.input.exp:
      :context: nodeContext
      :data-items: sui.selected.dataItems
      :eval-exp-item: evalExpItem.bind(this)
      :value: initial.exp
      :error: error
      @input: onInput

props:
  node:
  nodeVar:
  sui:

data:
  initial:
  nodeContext:
  error:

mounted: | #js
  function() {
    this.$root.e.on("app.node.changed", this.init.bind(this));
  }

methods:
  evalExpItem: | #js
    function(exp, dataItem, options) {
      try {
        this.error = null;
        const func = this.$root.toContextFunc(this, dataItem, { args: [], code: `return ${exp};` }, { async: false });
        const value = func();
        return value;
      }
      catch (ex) {
        if (options?.ignore?.errors) return null;
        this.error = ex.message;
      }
    }
  onInput: | #js
    function(value) {
      this.initial.exp = value;
      this.$root.do("edit.node.var", { node: this.node, varName: this.nodeVar.name, key: "exp", value });
    }
  init: | #js
    function() {
      this.initial = Objects.clone(this.nodeVar);
      this.nodeContext = this.$root.getNodeContext(this, this.sui.page.selected?.name);
    }

watch:
  nodeVar:
    immediate: true
    handler: | #js
      function(nodeVar) {
        this.init();
      }

style:
  .folded:
    max-width: 20em
    max-height: 3em
    overflow: hidden
    transition: 2s
  .folded:hover:
    max-height: 100vh
    overflow: auto
  th:
    padding: 0.5em 1em 0 0
    vertical-align: top