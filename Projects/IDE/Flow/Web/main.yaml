transpile: | #handlebars
  {{#each schema.attrs.flow.type as |value key|}}
    {{#if editor}}
    Vue.component('flow.vue.{{unkebabize key}}.editor',
      {{{vueOptions key editor}}}
    );
    {{/if}}
  {{/each}}

helpers:
  or: | #ts
    (a, b) => {
      if (a != undefined) return JSON.stringify(a);
      return JSON.stringify(b);
    }
  unkebabize: | #ts
    (str) => {
      return str?.replace(/-/g, ".");
    }
  add: | #ts
    (a, b) => {
      return a + b;
    }
  eq: | #ts
    function (a, b, options) {
      return a === b ? options.fn(this) : options.inverse(this);
    }
  json: | #ts
    (obj) => {
      return JSON.stringify(obj, null, 2);
    }
  generateType: | # handlebars
    {{{json this}}}
    {{#if type}}
      {{#eq type "enum"}}
        export enum {{../key}} {
          {{#each values}}
            {{this}}{{#unless @last}},{{/unless}}
          {{/each}}
        }
      {{/eq}}
    {{else}}
      {{#each this as |value key|}}
        {{generateType "name, data" value key (add @depth 1)}}
      {{/each}}
    {{/if}}
schema:
  nodes:
    flow:
      layout:
        view:
          fields:
            aspectRatio:
              type: flow.type.aspectRatio
              default: 1 / 1
        panel:
          fields:
            orientation:
              type: flow.type.orientation
              default: vertical
            size1:
              type: flow.type.size
              default: auto
            size2:
              type: flow.type.size
              default: auto
  attrs:
    flow:
      type:
        size: # width, height
          type: options
          options:
            - name: auto
              desc: The size is based on the content
            - name: min-content
              desc: The size will be the minimum size to fit the content
            - name: max-content
              desc: The size will be the maximum size to fit the content
            - name: percent
              type: flow.type.percent
              desc: The size will be a percentage of the parent size
        percent:
          fields:
            value: null
          editor:
            props:
              value: null
            dom:
              div:
                div:
                  v-text: "'percent editor'"
                div:
                  v-text: "'value:' + value"
        orientation:
          type: enum
          values:
            - vertical
            - horizontal
          methods:
            widthOrHeight: | #ts
              function () {
                return this.value === 'vertical' ? 'height' : 'width'
              }
        aspectRatio:
          type: options
          options:
            - name: 1 / 1
            - name: 3 / 2
            - name: 4 / 3
            - name: 16 / 9
            - name: 21 / 9
