dom:
  div: 
    class: box2
    h3:
      ui.title:
        ':icon': icon
        ':text': compName
        ':number': getTitle()
    ui.console:
      v-show: 'false'
      ref: console1
    div: 
      slot: null
props:
  icon: null
  title: null
data:
  compMethodArgNames: {}
mounted: | #js
  function() {
    // We want to know what the module is sending out
    this.$parent.$femit = async (emitName, ...args) => {
      args = Objects.clone(args);
      await this.$parent.$nextTick();
      this.$refs.console1.log("âž•", emitName);

      this.$root.$emit("flow.event", this.compName, emitName, args);
    };

    this.$root.$on("flow.event", this.onFlowEvent);
  }
methods:
  getTitle: | #js
    function() {
      if (this.title) return this.title;
      if (this.userID) return this.userID;
      return null;
    }
  onFlowEvent: | #js
    async function(compName, emitName, args) {
      if (["ui.mouse"].includes(compName)) return;

      const vue = this.$parent;

      if (emitName == "to")
      {
        const to = {
          compName: args[0],
          fuid: args[1],
          methodName: args[2],
          args: args[3],
        };
        
        if (to.compName != vue.$data._.comp.name) return;
        if (to.fuid != vue.fuid) return;

        const method = vue[to.methodName];
        if (!method) throw new Error(`Method not found: ${to.methodName}`);
        
        //console.log("ðŸ”´", to.compName, "ðŸš€", vue.$data._.comp.name, to.methodName, to.args)
        await (method.bind(vue))(...(to.args||[]));

        return;
      }

      if (vue.onAllEvents) {
        //console.log("ðŸ”´", vue.$data._.comp.name, "onAllEvents", "ðŸš€", compName, emitName, args)
        vue.onAllEvents(compName, emitName, args);
      }
      const methodName = `${compName}_${emitName}`.replace(/\./g, "_");
      const method = vue[methodName];
      if (!method) return;

      const argNames = this.getCompMethodArgNames(vue.$data._.comp.name, methodName);

      // This checks all vues for a userID prop
      // On the server we'll have the modules separated by userID to begin with
      if (argNames[0] == "userID") {
        if ("userID" in vue)
        {
          if (args[0] != vue.userID) return;
        }
      }

      //console.log("ðŸ”´", compName, "ðŸš€", vue.$data._.comp.name, emitName, args);
      
      (method.bind(vue))(...args);
    }
  onAllEvents: | #js
    function(compName, emitName, args) {
      const methodName = `${compName}_${emitName}`.replace(/\./g, "_");
      if (this.$parent[methodName]) {
        // Module caught an event
        this.$refs.console1.log("âž–", compName, emitName);
      }
    }
  getCompMethodArgNames: | #js
    function(compName, methodName) {
      const key = `${compName}.${methodName}`;
      if (this.compMethodArgNames[key]) return this.compMethodArgNames[key];
      const methodStr = this.$root.comps
        .find(c => (c.name == compName))
        .source
        .methods[methodName];
      const argNamesRegex = /function\((.*)\)/;
      const argNames = methodStr.match(argNamesRegex)[1]
        .split(",")
        .map(a => a.trim());
      this.compMethodArgNames[key] = argNames;
      return argNames;
    }
computed:
  compName: | #js
    function() {
      return this.$parent?.$data?._?.comp?.name;
    }
  userID: | #js
    function() {
      return this.$parent?.userID;
    }
style:
  h3:
    font-weight: normal
  .box2:
    margin: 1em
    border: '1px dashed #ccc'
  .box2 > *:
    margin-left: 1em
_:
  examples:
    count: 0
name: flow-module
template: >-
  <div class="comp-flow-module box2" path="924662572."><h3
  path="924662572.0"><ui-title :icon="icon" :text="compName"
  :number="getTitle()" path="924662572.0.0"></ui-title></h3><ui-console
  v-show="false" ref="console1" path="924662572.1"></ui-console><div
  path="924662572.2"><slot></slot></div></div>
