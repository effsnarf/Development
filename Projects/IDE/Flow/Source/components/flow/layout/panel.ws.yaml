dom:
  flow.node.base:
    ':node': node
    ':class': getCssClass()
    div:
      class: select-option
      v-if: isSelectOption
      v-for: (childNode, index) in childNodes
    flow.app.node:
      v-if: '!isSelectOption'
      v-for: (childNode, index) in childNodes
      ':style': getChildStyle(index, childNode)
      ':key': childNode.id
      ':node': childNode
      ':context-data': contextData
props:
  node: null
  contextData: null
  isSelectOption: false
methods:
  getCssClass: | #js
    function() {
      const cls = {};
      cls[this.node.data.direction.value] = true;
      return cls;
    }
  getChildStyle: | #js
    function(index, childNode) {
      const style = {};
      const direction = this.node.data.direction.value;
      const isHorizontal = direction == 'horizontal';
      const widthOrHeight = isHorizontal ? 'width' : 'height';
      let value = this.node.data.size.value;
      value = (index == 0) ? value : 100 - value;
      style[widthOrHeight] = `${value}%`;
      return style;
    }
computed:
  childNodes: | #js
    function() {
      return this.$root.gdb.getNodes('child.of', this.node);
    }
style:
  .select-option:
    min-width: 3em
    min-height: 3em
    border: 1px solid gray
  .comp-flow-layout-panel:
    display: flex
  .vertical:
    flex-direction: column
  .horizontal:
    flex-direction: row
_:
  examples:
    count: 0
name: flow-layout-panel
template: >-
  <flow-node-base class="comp-flow-layout-panel" :node="node"
  :class="getCssClass()" path="1309568768."><div class="select-option"
  v-if="isSelectOption" v-for="(childNode, index) in childNodes"
  path="1309568768.0"></div><flow-app-node v-if="!isSelectOption"
  v-for="(childNode, index) in childNodes" :style="getChildStyle(index,
  childNode)" :key="childNode.id" :node="childNode" :context-data="contextData"
  path="1309568768.1"></flow-app-node></flow-node-base>
