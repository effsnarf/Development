dom:
  flow.node.base:
    ':node': node
    ':class': '{ ''all-visible2'': allPagesVisible2 }'
    div:
      ui.button: 
        ':text': '''all-visible'''
        @click: toggleAllVisible
      ui.button: 
        ':text': visiblePageIndex.toString()
        @click: toggleVisiblePage
    ui.tween:
      ':visible-index': '(allPagesVisible ? 1 : 0)'
      template: 
        v-slot: slot0
        .pages: 
          ':class': '{ ''all-visible'': false }'
          flow.app.node: 
            ref: vPages
            v-for: (childNode, index) in childNodes
            class: page
            ':class': getPageCssClass(childNode, index)
            ':key': childNode.id
            ':node': childNode
      template: 
        v-slot: slot1
        .pages: 
          ':class': '{ ''all-visible'': true }'
          flow.app.node: 
            ref: vPages
            v-for: (childNode, index) in childNodes
            class: page
            ':class': getPageCssClass(childNode, index)
            ':key': childNode.id
            ':node': childNode
props:
  node: null
data:
  allPagesVisible: false
  allPagesVisible2: false
methods:
  getPageCssClass: | #js
    function(childNode, index) {
      const cls = {};
      cls.visible = this.isPageVisible(childNode, index);
      cls[`tween-page-${index}`] = true;
      cls['flex-equal'] = true;
      return cls;
    }
  toggleAllVisible: | #js
    async function() {
      this.allPagesVisible = !this.allPagesVisible;
      await this.$root.wait(1000);
      this.allPagesVisible2 = this.allPagesVisible;
    }
  toggleVisiblePage: | #js
    async function() {
      const newIndex = (this.visiblePageIndex + 1) % this.childNodes.length;
      this.node.data.visiblePageIndex.value = newIndex;
    }
  selectPage: | #js
    async function(index) {
      this.node.data.visiblePageIndex.value = index;
      await this.$nextTick();
      this.toggleAllVisible();
    }
  isPageVisible: | #js
    function(childNode, index) {
      return (this.visiblePageIndex === index);
    }
  getCssClass: | #js
    function() {
      const cls = {};
      return cls;
    }
computed:
  childNodes: | #js
    function() {
      return this.$gdb.getNodes('child.of', this.node);
    }
  visiblePageIndex:
    get: | #js
      function() {
        return this.node.data.visiblePageIndex.value;
      }
    set: | #js
      function(value) {
        this.node.data.visiblePageIndex.value = value;
      }
style:
  .comp-flow-layout-pages:
    width: 30em
    transition: width 1s
  .comp-flow-layout-pages.all-visible2:
    width: 50em
  .pages:
    aspect-ratio: 3 / 4
  .all-visible:
    display: flex
    gap: 2em
  .all-visible .page:
    position: relative
    border: 2px solid transparent
    transition: padding 0.4s
  .all-visible .page:hover:
    border: '2px solid #ffffff80'
    cursor: pointer
  .page:
    position: absolute
    width: 100%
    opacity: 0
    display: none
  .page.visible:
    display: block
  .page.visible, .all-visible .page:
    opacity: 1
_:
  examples:
    count: 0
name: flow-layout-pages
template: >-
  <flow-node-base class="comp-flow-layout-pages" :node="node" :class="{
  'all-visible2': allPagesVisible2 }" path="1309562048."><div
  path="1309562048.0"><ui-button :text="'all-visible'" @click="toggleAllVisible"
  path="1309562048.0.0"></ui-button><ui-button
  :text="visiblePageIndex.toString()" @click="toggleVisiblePage"
  path="1309562048.0.1"></ui-button></div><ui-tween
  :visible-index="(allPagesVisible ? 1 : 0)" path="1309562048.1"><template
  v-slot:slot0 path="1309562048.1.0"><div class="pages" :class="{ 'all-visible':
  false }" path="1309562048.1.0.0"><flow-app-node class="page" ref="vPages"
  v-for="(childNode, index) in childNodes" :class="getPageCssClass(childNode,
  index)" :key="childNode.id" :node="childNode"
  path="1309562048.1.0.0.0"></flow-app-node></div></template><template
  v-slot:slot1 path="1309562048.1.1"><div class="pages" :class="{ 'all-visible':
  true }" path="1309562048.1.1.0"><flow-app-node class="page" ref="vPages"
  v-for="(childNode, index) in childNodes" :class="getPageCssClass(childNode,
  index)" :key="childNode.id" :node="childNode"
  path="1309562048.1.1.0.0"></flow-app-node></div></template></ui-tween></flow-node-base>
