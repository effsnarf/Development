dom:
  div: 
    div: 
      flow.interface.logo: null
      .flex.gap-2.justify-between:
        flow.interface.action.stack:
          ':style': '{ width: ''20em'' }'
          ':persisters': persisters
          ':gdb': gdb
        flow.interface.toolbar2: null
        .mt-l6:
          flow.interface.events:
            ref: events1
    div: 
      div: 
        ui.html.style:
          v-for: comp in $root.comps
          ':component': comp
    ui.gesture.select.box: null
    flow.interface.user.intent: null
props: null
data:
  gdb: null
  persisters: null
  key1: 1
created: |
  async function() {
    await this.init();
  }
mounted: | #js
  async function() {
    // Catch all events from sub-components
    // and forward them to flow.events for processing.
    // Flow.events is on the flow app layer, managing communication between client and server.
    const vues = this.$root.vm.getDescendants(this);
    for (const vue of vues)
    {
      const compName = vue.$data._?.comp?.name;
      if (!compName) continue;
      const comp = this.$root.comps.find(c => (c.name == compName));
      const emitNames = this.getEmitNames(comp);
      for (const emitName of emitNames)
      {
        vue.$on(emitName, (...args) => {
          this.$refs.events1.onClientEvent(comp.name, emitName, args);
          // Call this method on other vues
          const methodName = `${compName}.${emitName}`.replaceAll(".", "_");
          for (const vue of vues) if (vue[methodName]) vue[methodName](...args);
        });
      }
    }
  }
methods:
  getEmitNames: | #js
    function(comp) {
      const compCode = JSON.stringify(comp.source).replaceAll('\\"', '"');
      const emitRegex = /this\.\$emit\((['"])(.+?)\1/g;
      const emitNames = [...compCode.matchAll(emitRegex)].map(a => a[2]);
      return emitNames;
    }
  init: | #js
    async function() {
      this.persisters = {
        memory: Data.Persister.Memory.new(),
        localStorage: Data.Persister.LocalStorage.new2("flow"),
      };

      this.gdb = await Graph.Database.new();
    }
  refresh: | #js
    async function() {
    }
watch: null
computed: null
style:
  .flex1:
    display: flex
    flex-direction: row
    gap: 1em
  .flex1 > div:nth-child(1):
    width: auto
  .flex1 > div:nth-child(2):
    width: auto
  .comp-ui-title.title1:
    font-size: 200%
name: flow-interface-app
_:
  examples:
    count: 0
template: >-
  <div class="comp-flow-interface-app" path="-1584259284."><div
  path="-1584259284.0"><flow-interface-logo></flow-interface-logo><div
  class="flex gap-2 justify-between"
  path="-1584259284.0.1"><flow-interface-action-stack :style="{ width: '20em' }"
  :persisters="persisters" :gdb="gdb"
  path="-1584259284.0.1.0"></flow-interface-action-stack><flow-interface-toolbar2></flow-interface-toolbar2><div
  class="mt-l6" path="-1584259284.0.1.2"><flow-interface-events ref="events1"
  path="-1584259284.0.1.2.0"></flow-interface-events></div></div></div><div
  path="-1584259284.1"><div path="-1584259284.1.0"><ui-html-style v-for="comp in
  $root.comps" :component="comp"
  path="-1584259284.1.0.0"></ui-html-style></div></div><ui-gesture-select-box></ui-gesture-select-box><flow-interface-user-intent></flow-interface-user-intent></div>
