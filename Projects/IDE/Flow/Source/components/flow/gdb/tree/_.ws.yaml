dom:
  ui.tree:
    ':root': root
    item-type: flow.gdb.tree.node
    ':initial-expanded': 10
    @node-click: onNodeClick
    @node-hovered: onNodeHovered
props:
  node: null
data:
  root: null
  selectedNode: null
  hoveredNode: null
mounted: | #js
  this.$root.$on("flow.gdb.node.change", this.refresh.bind(this));
  this.refresh();
methods:
  buildTree: | #js
    function() {
      this.root = null;
      const rootNode = this.node;
      if (!rootNode) return;
      const root = {
        id: rootNode.id,
        item: rootNode,
        children: []
      };
      root.children = this.getChildNodes(root);
      this.root = root;
    }
  getChildNodes: | #js
    function(node) {
      let childNodes = this.$gdb.getNodes("child.of", node);
      childNodes = childNodes.map(childNode => {
        return {
          id: childNode.id,
          item: childNode,
          children: this.getChildNodes(childNode)
        };
      });
      return childNodes;
    }
  onNodeClick: | #js
    function(treeNode) {
      let node = treeNode?.item;
      if (node?.id == this.selectedNode?.id) node = null;
      this.selectedNode = node;
    }
  onNodeHovered: | #js
    function(treeNode, isHovered) {
      const node = treeNode.item;
      this.hoveredNode = isHovered ? node : null;
    }
  refresh: | #js
    function() {
      this.buildTree();
    }
computed:
  activeNode: | #js
    function() {
      return (this.hoveredNode || this.selectedNode);
    }
watch:
  activeNode: | #js
    function(activeNode) {
      this.$emit("update:active-node", activeNode);
    }
_:
  examples:
    count: 0
name: flow-gdb-tree
template: >-
  <ui-tree class="comp-flow-gdb-tree" :root="root"
  item-type="flow.gdb.tree.node" :initial-expanded="10"
  @node-click="onNodeClick" @node-hovered="onNodeHovered"
  path="675361159."></ui-tree>
