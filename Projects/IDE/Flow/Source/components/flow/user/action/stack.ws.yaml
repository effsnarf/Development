dom:
  flow.module:
    icon: ðŸ‘¤ðŸ‘ˆ
    flow.data.list.view: 
      ':fuid': userID+'/data/boxes'
      v-model: boxes
    flow.data.list.view: 
      ':fuid': userID+'/user/actions'
      v-model: userActions
props:
  userID: null
data:
  nextID: 1
  userActions: []
  boxes: []
  pointer: -1
methods:
  create_box: | #js
    async function(userID, action, box) {
      box._id = this.nextID++;
      this.$femit("to", "flow.data.list", `${userID}/data/boxes`, "add", [box]);
      action.undo = { method: "delete.box", args: [box._id] };
      return action;
    }
  move_box: | #js
    async function(userID, action, boxID, pos) {
      const box = this.boxes.find((box) => box._id === boxID);
      const oldPos = box.rect.pos;
      this.$femit("to", "flow.data.list", `${userID}/data/boxes`, "update", [boxID, { rect: { pos } }]);
      action.undo = { method: "move.box", args: [boxID, oldPos] };
      return action;
    }
  delete_box: | #js
    async function(userID, action, boxID) {
      this.$femit("to", "flow.data.list", `${userID}/data/boxes`, "delete", [boxID]);
      action.undo = { method: "no.op" };
      return action;
    }
  flow_user_actions_do: | #js
    async function(userID, action, addToStack = true) {
      const redo = action.redo;
      const methodName = redo.method.replace(/\./g, "_");
      const method = this[methodName];
      action = await method.apply(this, [userID, action, ...redo.args]);
      if (addToStack) {
        this.$femit("to", "flow.data.list", `${userID}/user/actions`, "add", [action]);
        this.pointer++;
      }
    }
  flow_user_actions_undo: | #js
    async function(userID) {
      if (this.pointer < 0) return;
      const lastAction = this.userActions[this.pointer];
      const undoAction = { redo: lastAction.undo };
      await this.flow_user_actions_do(userID, undoAction, false);
      this.pointer--;
    }
  flow_user_actions_redo: | #js
    async function(userID) {
      if (this.pointer >= this.userActions.length - 1) return;
      const nextAction = this.userActions[this.pointer + 1];
      await this.flow_user_actions_do(userID, nextAction, false);
      this.pointer++;
    }
  flow_user_actions_clear: | #js
    function() {
      debugger;
    }
computed: null
_:
  examples:
    count: 0
name: flow-user-action-stack
template: >-
  <flow-module class="comp-flow-user-action-stack" icon="ðŸ‘¤ðŸ‘ˆ"
  path="1981948243."><flow-data-list-view :fuid="userID+'/data/boxes'"
  v-model="boxes" path="1981948243.0"></flow-data-list-view><flow-data-list-view
  :fuid="userID+'/user/actions'" v-model="userActions"
  path="1981948243.1"></flow-data-list-view></flow-module>
