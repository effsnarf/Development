dom:
  flow.dnd.dropzone:
    ':class': cssClass
    ':node': node
    @drag-over: onDragOver
    slot: null
    div:
      v-if: 'false'
      ui.leader.line: 
        v-for: twinVue in twinVues
        ':from': getThis
        ':to': () => twinVue()
        ':visible': isHighlighted
      ui.leader.line: 
        v-for: linkedVue in linkedVues
        ':from': getThis
        ':to': () => linkedVue()
        ':visible': isHighlighted
props:
  node: null
data:
  nodeDataIds: []
  nodeDatas: {}
  highlightedNode: null
  handlers:
    onGraphNodesChange: onGraphNodesChange
    onHighlightedNode: onHighlightedNode
  twinVues: []
  linkedVues: []
  isMounted: false
mounted: | #js
  this.isMounted = true;

  this.$root.flow.ui.registerVue(this);

  this.handlers.onGraphNodeChange = this.onGraphNodeChange.bind(this);

  this.handlers.onGraphNodeDataChange = this.onGraphNodeDataChange.bind(this);

  this.handlers.onHighlightedNode = this.onHighlightedNode.bind(this);

  this.$root.$on("gdb.node.change", this.handlers.onGraphNodeChange);

  this.$root.$on("flow.user.app.runtime.data.node.data.change",
  this.handlers.onGraphNodeDataChange)

  this.$root.$on("highlighted-node", this.handlers.onHighlightedNode);

  this.updateRelatedVues();

  this.refresh();
unmounted: | #js
  this.$root.flow.ui.unregisterVue(this);

  this.$root.$off("gdb.node.change", this.handlers.onGraphNodeChange);

  this.$root.$off("flow.user.app.runtime.data.node.data.change",
  this.handlers.onGraphNodeDataChange)

  this.$root.$off("highlighted-node", this.handlers.onHighlightedNode);

  this.isMounted = false;
methods:
  getThis: | #js
    function() {
      return this;
    }
  updateRelatedVues: | #js
    function() {
      if (!this.isMounted) return;
      this.twinVues = this.getTwinVues().map(vue => () => vue);
      this.linkedVues = this.getLinkedVues().map(vue => () => vue);
      setTimeout(this.updateRelatedVues.bind(this), 100);
    }
  getTwinVues: | #js
    function() {
      // Twin vue means other vues that are connected to the same node.
      let vues = this.$root.flow.ui.getNodeVues(this.node, { except: this });
      vues = vues.filter(v => (v.$parent.$options._componentTag != this.$parent.$options._componentTag));
      return vues;
    }
  getLinkedVues: | #js
    function() {
      let vues = this.$root.flow.ui.getLinkedVues(this.node, { except: this });
      vues = vues.filter(v => (v.$parent.$options._componentTag != this.$parent.$options._componentTag));
      return vues;
    }
  onGraphNodeChange: | #js
    function(node) {
      if (node.id != this.node.id) return;
      if (this.$parent?.onNodeChange) this.$parent.onNodeChange(node);
      this.refresh();
    }
  onGraphNodeDataChange: | #js
    function(node, data) {
      if (!this.nodeDataIds.includes(node.id)) return;
      this.nodeDatas[node.id] = data;
      this.$emit("node-datas", this.nodeDatas);
    }
  onHighlightedNode: | #js
    function(highlightedNode) {
      this.highlightedNode = highlightedNode;
    }
  getNodeDataIds: | #js
    function() {
      // This node might be receiving data from other nodes via data.send links.
      // nodeDataIds is a list of node IDs whose data is relevant to this node.
      // That includes this node itself, and all nodes that send data to this node.
      if (!this.node) return [];
      const dataNodes = this.$root.gdb.getNodes("data.send", this.node);
      const dataNodeIDs = [this.node.id, ...dataNodes.map(node => node.id)].distinct();
      return dataNodeIDs;
    }
  onDragOver: | #js
    function(isDragOver) {
    }
  refresh: | #js
    function() {
      this.nodeDataIds = this.getNodeDataIds();
      this.$set(this, "nodeDatas", {});
      for (const id of this.nodeDataIds) {
        const data = this.$root.flow.user.app.runtimeData.nodeDatas[id];
        this.nodeDatas[id] = data;
      }
      this.$emit("node-datas", this.nodeDatas);
    }
computed:
  cssClass: | #js
    function() {
      const cls = {};
      cls["highlighted-node"] = this.isHighlighted;
      return cls;
    }
  isHighlighted: | #js
    function() {
      return this.node?.id == this.highlightedNode?.id;
    }
watch:
  highlightedNode: | #js
    function(highlightedNode) { 
    }
style:
  .highlighted-node:
    border: 3px dashed yellow !important
    box-shadow: inset -3px 3px 3px black
    background: '#ffffff20'
    transition: 0s
_:
  examples:
    count: 0
name: flow-node-base
template: >-
  <flow-dnd-dropzone class="comp-flow-node-base" :class="cssClass" :node="node"
  @drag-over="onDragOver" path="674641533."><slot></slot><div v-if="false"
  path="674641533.1"><ui-leader-line v-for="twinVue in twinVues" :from="getThis"
  :to="() =&gt; twinVue()" :visible="isHighlighted"
  path="674641533.1.0"></ui-leader-line><ui-leader-line v-for="linkedVue in
  linkedVues" :from="getThis" :to="() =&gt; linkedVue()"
  :visible="isHighlighted"
  path="674641533.1.1"></ui-leader-line></div></flow-dnd-dropzone>
