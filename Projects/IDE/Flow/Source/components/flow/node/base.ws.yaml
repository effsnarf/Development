dom:
  div: 
    div: 
      v-if: 'false'
      ui.leader.line: 
        v-for: twinVue in twinVues
        ':from': getThis
        ':to': () => twinVue()
        ':visible': isHighlighted
      ui.leader.line: 
        v-for: linkedVue in linkedVues
        ':from': getThis
        ':to': () => linkedVue()
        ':visible': isHighlighted
    div: 
      flow.dnd.dropzone:
        ':class': cssClass
        ':node': node
        @drag-over: onDragOver
        slot: null
props:
  node: null
data:
  nodeDataIds: []
  nodeDatas: []
  highlightedNode: null
  handlers:
    onGraphNodesChange: onGraphNodesChange
    onHighlightedNode: onHighlightedNode
  twinVues: []
  linkedVues: []
  isMounted: false
mounted: | #js
  this.isMounted = true;
  this.$root.flow.ui.registerVue(this);
  this.handlers.onGraphNodesChange = this.onGraphNodesChange.bind(this);
  this.handlers.onHighlightedNode = this.onHighlightedNode.bind(this);
  this.$root.$on("graph-nodes-change", this.handlers.onGraphNodesChange);
  this.$root.$on("highlighted-node", this.handlers.onHighlightedNode);
  this.updateRelatedVues();
unmounted: | #js
  this.$root.flow.ui.unregisterVue(this);
  this.$root.$off("graph-nodes-change", this.handlers.onGraphNodesChange);
  this.$root.$off("highlighted-node", this.handlers.onHighlightedNode);
  this.isMounted = false;
methods:
  getThis: | #js
    function() {
      return this;
    }
  updateRelatedVues: | #js
    function() {
      if (!this.isMounted) return;
      this.twinVues = this.getTwinVues().map(vue => () => vue);
      this.linkedVues = this.getLinkedVues().map(vue => () => vue);
      setTimeout(this.updateRelatedVues.bind(this), 100);
    }
  getTwinVues: | #js
    function() {
      // Twin vue means other vues that are connected to the same node.
      let vues = this.$root.flow.ui.getNodeVues(this.node, { except: this });
      vues = vues.filter(v => (v.$parent.$options._componentTag != this.$parent.$options._componentTag));
      return vues;
    }
  getLinkedVues: | #js
    function() {
      let vues = this.$root.flow.ui.getLinkedVues(this.node, { except: this });
      vues = vues.filter(v => (v.$parent.$options._componentTag != this.$parent.$options._componentTag));
      return vues;
    }
  onGraphNodesChange: | #js
    function(nodesMap) {
      const node = nodesMap[this.node.id];
      if (!node) return;
      if (this.$parent?.onNodeChange) this.$parent.onNodeChange(node);
      this.refresh();
    }
  onHighlightedNode: | #js
    function(highlightedNode) {
      this.highlightedNode = highlightedNode;
    }
  getDataNodeIDs: | #js
    function() {
      if (!this.node) return [];
      const dataNodes = this.$root.gdb.getNodes("data.send", this.node);
      const dataNodeIDs = dataNodes.map(node => node.id);
      return dataNodeIDs;
    }
  onDragOver: | #js
    function(isDragOver) {
    }
  refresh: | #js
    function() {
      this.nodeDataIds = this.getDataNodeIDs();
      this.nodeDatas = this.nodeDataIds.map(id => this.$root.flow.user.app.runtime.nodeDatas[id]);
      this.$emit("node-datas", this.nodeDatas);
    }
computed:
  cssClass: | #js
    function() {
      const cls = {};
      cls["highlighted-node"] = this.isHighlighted;
      return cls;
    }
  isHighlighted: | #js
    function() {
      return this.node?.id == this.highlightedNode?.id;
    }
watch:
  highlightedNode: | #js
    function(highlightedNode) { 
    }
style:
  .highlighted-node:
    border: 3px dashed yellow !important
    box-shadow: inset -3px 3px 3px black
    background: '#ffffff20'
    transition: 0s
_:
  examples:
    count: 0
name: flow-node-base
template: >-
  <div class="comp-flow-node-base" path="674641533."><div v-if="false"
  path="674641533.0"><ui-leader-line v-for="twinVue in twinVues" :from="getThis"
  :to="() =&gt; twinVue()" :visible="isHighlighted"
  path="674641533.0.0"></ui-leader-line><ui-leader-line v-for="linkedVue in
  linkedVues" :from="getThis" :to="() =&gt; linkedVue()"
  :visible="isHighlighted" path="674641533.0.1"></ui-leader-line></div><div
  path="674641533.1"><flow-dnd-dropzone :class="cssClass" :node="node"
  @drag-over="onDragOver"
  path="674641533.1.0"><slot></slot></flow-dnd-dropzone></div></div>
