dom:
  div: 
    transition:
      name: slide
      div: 
        v-if: boxIsHovered
        ui.input.text.box: 
          v-if: showMapFunc
          class: show-on-hover
          v-model: box.data.map
          hint: (obj) => obj
          @input: '(mapText) => getParentBox().onBoxDataChange(box, { map: mapText })'
        ui.value.any:
          v-if: true && box.sockets.inputs[0].value
          ':style': '{ ''max-height'': ''15em'' }'
          ':value': box.data.value
        ui.input.text.box: 
          class: show-on-hover
          v-if: '!box.sockets.inputs[0].value'
          multiline: true
          ':auto-resize': 'true'
          v-model: box1.data.value
          @input: '(text) => getParentBox().onBoxDataChange(box, { value: text })'
props:
  box: null
  boxIsHovered: false
data:
  box1: null
methods:
  getParentBox: | #js
    function() {
      let parent = this.$parent;
      while (parent && parent.$data._?.comp.name != "flow.box") {
        parent = parent.$parent;
      }
      return parent;
    }
  yamlify: | #js
    function(value) {
      try {
        return jsyaml.dump(value);
      }
      catch (ex) {
        return ex.message;
      }
    }
watch:
  box:
    handler: | #js
      function(box) {
        this.box1 = Objects.clone(box);
      }
    immediate: true
    deep: true
computed:
  showValueObject: | #js
    function() {
      try
      {
        if (!this.boxIsHovered) return false;
        const value = box.sockets.inputs[0].value;
        return !!value;
      }
      catch (ex) {
        return false;
      }
    }
  showTextBox: | #js
    function() {
      try
      {
        const value = box.sockets.inputs[0].value;
        if (!value) return true;
        return false;
      }
      catch (ex) {
        return false;
      }
    }
  showMapFunc: | #js
    function() {
      try 
      {
        const value = this.box.data.value;
        if ((typeof value) == "object") return true;
        return false;
      }
      catch (ex) {
        return false;
      }
    }
_:
  examples:
    count: 0
name: flow-box-variable
template: >-
  <div class="comp-flow-box-variable" path="2053611519."><transition
  name="slide" path="2053611519.0"><div v-if="boxIsHovered"
  path="2053611519.0.0"><ui-input-text-box class="show-on-hover"
  v-if="showMapFunc" v-model="box.data.map" hint="(obj) =&gt; obj"
  @input="(mapText) =&gt; getParentBox().onBoxDataChange(box, { map: mapText })"
  path="2053611519.0.0.0"></ui-input-text-box><ui-value-any v-if="true
  &amp;&amp; box.sockets.inputs[0].value" :style="{ 'max-height': '15em' }"
  :value="box.data.value"
  path="2053611519.0.0.1"></ui-value-any><ui-input-text-box
  class="show-on-hover" v-if="!box.sockets.inputs[0].value" multiline="true"
  :auto-resize="true" v-model="box1.data.value" @input="(text) =&gt;
  getParentBox().onBoxDataChange(box, { value: text })"
  path="2053611519.0.0.2"></ui-input-text-box></div></transition></div>
