dom:
  grid.module:
    icon: ðŸ§ŠðŸ“ƒ
    ui.dnd.dropzone:
      @drop-item: onSurfaceDropItem
      .flex:
        div:
          ':key': surfaceKey
          ref: surface1
          class: surface flex-grow-1
          ':style': surfaceStyle
          @wheel: onWheelSurface
          grid.ui.box:
            v-for: box in visibleBoxes
            ':key': '''box/'' + box._id'
            ':userID': userID
            ':box': box
            ':surface-element': surfaceElement
            ':surface-camera': surfaceCamera
            ':surfaceGroupBoxID': groupBoxID
          grid.ui.link:
            v-for: link in visibleLinks
            ':key': '''link/'' + link._id'
            ':link': link
            ':surface-camera': surfaceCamera
            ':surfaceGroupBoxID': groupBoxID
        grid.ui.tools:
          ':surface-element': surfaceElement
    h2:
      ui.value:
        ':value': '{groupBoxID}'
props:
  userID: null
  groupBoxID: null
data:
  boxes: []
  links: []
  surfaceElement: null
  surfaceCamera:
    pos:
      x: 0
      'y': 0
    scale: 1
  surfaceKey: 1
mounted: | #js
  async function() {
    this.surfaceElement = this.$refs.surface1;
    // Detect if surfaceElement is resized
    const resizeObserver = new ResizeObserver(() => {
      this.adjustCamera();
    });
    resizeObserver.observe(this.surfaceElement);
    await this.$root.wait(1000);
    this.refresh();
    this.adjustCamera();
  }
methods:
  grid_user_action_stack_do: | #js
    async function(boxID, pos) {
      await this.$root.wait(100);
      this.adjustCamera();
    }
  adjustCamera: | #js
    function() {
      this.surfaceCamera = this.getCamera(this.visibleBoxes);
    }
  getCamera: | #js
    function(boxes) {
      // Returns a camera in which all the boxes are visible
      const camera = {
        pos: { x: 0, y: 0 },
        scale: 1,
      };
      // Set camera.pos to the center of all boxes
      const boxRects = boxes.map(box => box.rect);
      camera.pos = this.getRectsCenter(boxRects);
      return camera;
    }
  getRectsCenter: | #js
    function(rects) {
      // Returns the center of all the rects
      // rect.pos is the center of the rect
      const minX = rects.map(rect => rect.pos.x - rect.size.width / 2).min();
      const maxX = rects.map(rect => rect.pos.x + rect.size.width / 2).max();
      const minY = rects.map(rect => rect.pos.y - rect.size.height / 2).min();
      const maxY = rects.map(rect => rect.pos.y + rect.size.height / 2).max();
      const x = (minX + maxX) / 2;
      const y = (minY + maxY) / 2;
      return { x, y };
    }
  onSurfaceDropItem: | #js
    function(dragItem) {
      this.$femit("drop.item", dragItem);
    }
  onWheelSurface: | #js
    function(e) {
      return;
      e.preventDefault();
      e.stopPropagation();
      // Adjust surfaceScale based on the wheel event
      const scrollSize = (e.deltaY / 100);
      this.surfaceScale += (scrollSize * -0.03);
      this.$femit("scale", this.surfaceScale);
    }
  getVisibleItems: | #js
    function(items) {
      if (!items) return [];
      items = [...items];
      items = items.filter(this.isItemVisible);
      return items;
    }
  isItemVisible: | #js
    function(item) {
      if (this.groupBoxID) {
        if (item.groupBoxID == this.groupBoxID) return true;
      }
      if (item.rect?.is.visible) return true;
      if (item.is?.visible) return true;
      return false;
    }
  refreshSurface: | #js
    async function() {
      await this.$nextTick();
      this.surfaceKey++;
      alertify.message("Surface refreshed");
    }
  refresh: | #js
    async function() {
      this.boxes = this.$root.boxes;
      this.links = this.$root.links;
    }
computed:
  visibleBoxes: | #js
    function() {
      return this.getVisibleItems(this.boxes);
    }
  visibleLinks: | #js
    function() {
      return this.getVisibleItems(this.links);
    }
  surfaceStyle: | #js
    function() {
      return {
        width: "100%",
        height: "80vh",
      };
    }
  surface1: | #js
    function() {
      return this.$refs.surface1;
    }
style:
  .surface:
    height: 80vh
    overflow: hidden
    border: 1px solid gray
    cursor: crosshair
_:
  examples:
    count: 0
name: grid-client-surface
template: >-
  <grid-module class="comp-grid-client-surface" icon="ðŸ§ŠðŸ“ƒ"
  path="-515125966."><ui-dnd-dropzone @drop-item="onSurfaceDropItem"
  path="-515125966.0"><div class="flex" path="-515125966.0.0"><div
  class="surface flex-grow-1" :key="surfaceKey" ref="surface1"
  :style="surfaceStyle" @wheel="onWheelSurface"
  path="-515125966.0.0.0"><grid-ui-box v-for="box in visibleBoxes" :key="'box/'
  + box._id" :userID="userID" :box="box" :surface-element="surfaceElement"
  :surface-camera="surfaceCamera" :surfaceGroupBoxID="groupBoxID"
  path="-515125966.0.0.0.0"></grid-ui-box><grid-ui-link v-for="link in
  visibleLinks" :key="'link/' + link._id" :link="link"
  :surface-camera="surfaceCamera" :surfaceGroupBoxID="groupBoxID"
  path="-515125966.0.0.0.1"></grid-ui-link></div><grid-ui-tools
  :surface-element="surfaceElement"
  path="-515125966.0.0.1"></grid-ui-tools></div></ui-dnd-dropzone><h2
  path="-515125966.1"><ui-value :value="{groupBoxID}"
  path="-515125966.1.0"></ui-value></h2></grid-module>
