dom:
  grid.module:
    icon: 👤💻🖱️
    grid.client.context.menu:
      ':userID': userID
      ':boxes': boxes
      ':links': links
    .flex:
      div: 
        class: w-100pc
        grid.client.surface:
          ':userID': userID
      div: 
        grid.data.variable.view: 
          ':fuid': userID+'/user/actions/pointer'
          v-model: userActionsPointer
        grid.data.variable.view: 
          ':fuid': userID+'/user/actions/next/id'
        grid.data.variable.view: 
          ':fuid': userID+'/user/actions/next/action/id'
        grid.data.list.view: 
          ':fuid': userID+'/user/actions'
          v-model: userActions
          ':item-props': '{ userActionsPointer }'
          ':reverse': true
        grid.data.list.view: 
          ':fuid': userID + '/data/boxes'
          v-model: boxes
        grid.data.list.view: 
          ':fuid': userID + '/data/links'
          v-model: links
props:
  userID: null
data:
  boxes: []
  links: []
  userActions: []
  userActionsPointer: null
  groupZoomIns: []
mounted: | #js
  function() {
    // When the window is resized, refresh the surface
    // #TODO: Doesn't work
    //window.addEventListener("resize", this.refreshSurface.bind(this));
  }
methods:
  grid_ui_box_toggle_group_maximized: | #js
    function(groupBoxID) {
      if (groupBoxID == this.groupZoomIns.last()?.groupBoxID) {
        this.zoomOutGroupBox();
      } else {
        this.zoomInGroupBox(groupBoxID);
      }
    }
  zoomInGroupBox: | #js
    async function(groupBoxID) {
      const zoomedGroupBoxID = this.groupZoomIns.last()?.groupBoxID;
      const vBoxes = this.$root.vm.getDescendants(this, "grid.ui.box");
      const groupBox = this.boxes.find(box => box._id == groupBoxID);
      const nonMemberBoxes = zoomedGroupBoxID ?
        this.boxes.filter(box => (box.groupBoxID == zoomedGroupBoxID)) :
        this.boxes.filter(box => (!box.groupBoxID));
      const nonMemberBoxIDs = nonMemberBoxes.map(box => box._id);
      for (const box of nonMemberBoxes) box.rect.is.visible = false;
      const memberBoxes = this.boxes.filter(box => box.groupBoxID == groupBoxID);
      for (const box of memberBoxes) box.rect.is.grouped = false;
      for (const box of memberBoxes) box.rect.is.visible = true;
      const memberLinks = this.links.filter(link => (link.groupBoxID == groupBoxID));
      const nonMemberLinks = this.links.filter(link => (link.groupBoxID != groupBoxID));
      for (const link of nonMemberLinks) link.is.visible = false;
      setTimeout(() => {
        for (const link of memberLinks) link.is.grouped = false;
      }, 300);

      this.groupZoomIns.push({
        groupBoxID,
        nonMemberBoxIDs: nonMemberBoxIDs,
      });
    }
  zoomOutGroupBox: | #js
    async function() {
      const zoomIn = this.groupZoomIns.pop();
      if (!zoomIn) return;
      const groupBoxID = zoomIn.groupBoxID;
      const groupBox = this.boxes.find(box => box._id == groupBoxID);
      const memberBoxes = this.boxes.filter(box => box.groupBoxID == groupBoxID);
      for (const box of memberBoxes) box.rect.is.grouped = true;
      const nonMemberBoxes = this.boxes.filter(box => zoomIn.nonMemberBoxIDs.includes(box._id));
      const memberLinks = this.links.filter(link => (link.groupBoxID == groupBoxID));
      for (const link of memberLinks) link.is.grouped = true;
      const nonMemberLinks = this.links.filter(link => (link.groupBoxID != groupBoxID));
      for (const link of nonMemberLinks) link.is.visible = true;
      setTimeout(() => {
        for (const box of memberBoxes) box.rect.is.visible = false;
        for (const box of nonMemberBoxes) box.rect.is.visible = true;
      }, 400);
    }
computed: null
watch:
  links:
    handler: | #js
      function(links) {
        if (!this.userID) return;
        for (const link of links) {
          if (!("visible" in link.is)) {
            this.$femit("to", "grid.data.list", `${this.userID}/data/links`, "update", [link._id, { is: { visible: true } }]);
          }
        }
      }
    immediate: true
_:
  examples:
    count: 0
name: grid-client-workspace
template: >-
  <grid-module class="comp-grid-client-workspace" icon="👤💻🖱️"
  path="-1461469222."><grid-client-context-menu :userID="userID" :boxes="boxes"
  :links="links" path="-1461469222.0"></grid-client-context-menu><div
  class="flex" path="-1461469222.1"><div class="w-100pc"
  path="-1461469222.1.0"><grid-client-surface :userID="userID"
  path="-1461469222.1.0.0"></grid-client-surface></div><div
  path="-1461469222.1.1"><grid-data-variable-view
  :fuid="userID+'/user/actions/pointer'" v-model="userActionsPointer"
  path="-1461469222.1.1.0"></grid-data-variable-view><grid-data-variable-view
  :fuid="userID+'/user/actions/next/id'"
  path="-1461469222.1.1.1"></grid-data-variable-view><grid-data-variable-view
  :fuid="userID+'/user/actions/next/action/id'"
  path="-1461469222.1.1.2"></grid-data-variable-view><grid-data-list-view
  :fuid="userID+'/user/actions'" v-model="userActions" :item-props="{
  userActionsPointer }" :reverse="true"
  path="-1461469222.1.1.3"></grid-data-list-view><grid-data-list-view
  :fuid="userID + '/data/boxes'" v-model="boxes"
  path="-1461469222.1.1.4"></grid-data-list-view><grid-data-list-view
  :fuid="userID + '/data/links'" v-model="links"
  path="-1461469222.1.1.5"></grid-data-list-view></div></div></grid-module>
