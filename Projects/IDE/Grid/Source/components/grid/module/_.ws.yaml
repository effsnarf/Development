dom:
  div: 
    class: grid-module box2
    @mouseenter: $emit('mouseenter', $event)
    @mouseleave: $emit('mouseleave', $event)
    div: 
      v-if: icon && showTitle
      h3:
        ui.title:
          ':icon': icon
          ':text': compName
          ':number': getTitle()
    .module-content:
      slot: null
    div: 
      v-if: showEvents
      ':key': key1
      class: mt-l1
    ui.linq.evaluator:
      ref: evaluator1
props:
  box: null
  node: null
  icon: null
  title: null
  showEvents: false
  showTitle: false
  showConsole: false
  dataBoundSocketData: null
data:
  compMethodArgNames: {}
  isFemitting: false
  femitQueue: []
  femitDelay: 1
  isDirty: false
  key1: 1
mounted: | #js
  function() {
    const self = this;
    // $femit is an emit that goes through the grid
    // Other components listen to events by method names (compName_emitName)
    this.$parent.$femit = async (eventName, ...args) => {
      if (eventName == "to") {
        this.femitDirectEvent(...args);
        return;
      }
      const compName = this.compName;
      args = Objects.clone(args);
      const femit = Objects.clone({ compName: this.compName, eventName, args });
      const handlerName = `${compName}_${eventName}`.replace(/\./g, "_");
      this.$root.$emit(handlerName, ...args);
      return;

      this.femitQueue.push(femit);
      this.nextFemit();
    };

    if ("fuid" in this.$parent) {
      const eventName = `${this.compName}.${this.$parent.fuid}`;
      this.$root.$on(eventName, this.onGridDirectEvent.bind(this));
    }

    // Register {compName}_{eventName} methods as event listeners
    this.registerGridEventHandlers(this.$parent);
    this.registerGridEventHandlers(this);
  }
unmounted: | #js
  function() {
    alertify.error("unmounted");
  }
methods:
  registerGridEventHandlers: | #js
    function(vue) {
      const handlerNames = Object.keys(vue)
        .filter(k => !k.startsWith("_"))
        .filter(k => k.includes("_"));
      
      for (const handlerName of handlerNames) {
        const method = vue[handlerName].bind(vue);
        this.$root.$on(handlerName, method);
      }
    }
  femitDirectEvent: | #js
    function(...args) {
      const to = {
        compName: args[0],
        fuid: args[1],
        methodName: args[2],
        args: args[3],
      };
      const eventName = `${to.compName}.${to.fuid}`;
      this.$root.$emit(eventName, to.methodName, to.args);
    }
  onGridDirectEvent: | #js
    function(methodName, args) {
      const method = this.$parent[methodName]?.bind(this.$parent);
      if (!method) return;
      method(...args);
    }
  nextFemit: | #js
    function(internal) {
      if ((!internal) && this.isFemitting) return;
      if (!this.femitQueue.length) {
        this.isFemitting = false;
        return;
      }
      this.isFemitting = true;
      const femit = this.femitQueue.shift();
      const emitName = `${femit.compName}_${femit.eventName}`.replace(/\./g, "_");
      //console.log("ðŸŸ¢", emitName, femit.args)
      this.$root.$emit("grid.event", femit.compName, femit.eventName, femit.args);
      setTimeout((() => {
        this.nextFemit(true);
      }).bind(this), this.femitDelay);
    }
  getTitle: | #js
    function() {
      if (this.title) return this.title;
      if (this.userID) return this.userID;
      return null;
    }
  grid_client_runtime_socket_value_change: | #js
    function(boxID, sDirection, sID, sValue) {
      if (boxID != this.box?._id) return;
      this.refresh();
    }
  grid_data_list_updated: | #js
    function(fuid, items, datas) {
      if (fuid.endsWith("/data/boxes")) {
        const boxes = items;
        for (let i = 0; i < boxes.length; i++) {
          this.onBoxUpdated(boxes[i], datas[i]);
        }
      }
      if (fuid.endsWith("/data/links")) {
      }
    }
  onBoxUpdated: | #js
    function(box, data) {
      if (this.$parent.onBoxUpdated) this.$parent.onBoxUpdated(box, data);
    }
  getBoxContext: | #js
    function(activeSocketData) {
      const context = {};
      if (!this.box) return context;
      for (const socket of this.box.sockets.input) {
        context[socket.name] = activeSocketData.input?.[socket._id];
      }
      return context;
    }
  getActiveSocketData: | #js
    function() {
      let socketData = Objects.clone((!this.box) ? {} : (this.$root.socket?.runtime.data[this.box._id] || {}));
      socketData = Objects.deepMerge(socketData, Objects.clone(this.dataBoundSocketData || {}));
      return socketData;
    }
  getNodeItem: | #js
    async function(activeSocketData) {
      const boxContext = this.getBoxContext(activeSocketData);
      const inputItem = (activeSocketData.input?.[1]);
      if (!this.$refs.evaluator1) return null;
      const nodeItems = this.$refs.evaluator1.evaluateOps(boxContext, inputItem, this.node?.linq?.operations);
      const nodeItem = nodeItems?.last();
      return nodeItem;
    }
  refresh: | #js
    async function() {
      this.isDirty = true;
      return;
      await this.$nextTick();
      if (!this.__refresh) this.__refresh = this._refresh.throttle(this, 100);
      this.__refresh();
    }
  _refresh: | #js
    async function() {
      this.isDirty = false;
      const activeSocketData = this.getActiveSocketData();
      const nodeItem = await this.getNodeItem(activeSocketData);
      if ("activeSocketData" in this.$parent) this.$parent.activeSocketData = activeSocketData;
      if ("boxContext" in this.$parent) this.$parent.boxContext = this.getBoxContext(activeSocketData);
      if ("inputs" in this.$parent) this.$parent.inputs = activeSocketData.input;
      if ("outputs" in this.$parent) this.$parent.outputs = activeSocketData.output;
      if ("nodeItem" in this.$parent) this.$parent.nodeItem = nodeItem;
      if ("refresh" in this.$parent) this.$parent.refresh();
    }
  onAllEvents: | #js
    function(compName, emitName, args) {
      const methodName = `${compName}_${emitName}`.replace(/\./g, "_");
      if (this.$parent[methodName]) {
        // Module caught an event
        this.femitsInLog[emitName] = args;
        this.$refs.console1?.log("âž–", compName, emitName);
      }
    }
  getCompMethodArgNames: | #js
    function(compName, methodName) {
      const key = `${compName}.${methodName}`;
      if (this.compMethodArgNames[key]) return this.compMethodArgNames[key];
      const methodStr = this.$root.comps
        .find(c => (c.name == compName))
        .source
        .methods[methodName];
      const argNamesRegex = /function\((.*)\)/;
      const argNames = methodStr.match(argNamesRegex)[1]
        .split(",")
        .map(a => a.trim());
      this.compMethodArgNames[key] = argNames;
      return argNames;
    }
computed:
  compName: | #js
    function() {
      return this.$parent?.$data?._?.comp?.name;
    }
  userID: | #js
    function() {
      return this.$parent?.userID;
    }
watch:
  isDirty:
    handler: | #js
      async function(isDirty) {
        if (!isDirty) return;
        this._refresh();
      }
    immediate: true
  dataBoundSocketData:
    handler: | #js
      function(dataBoundSocketData) {
        this.refresh();
      }
    immediate: true
  node:
    handler: | #js
      function(node) {
        this.refresh();
      }
    immediate: true
style:
  h3:
    font-weight: normal
  .log-box:
    max-height: 10em
    overflow: auto
  .box2:
    margin: 0.5em
    border: '1px transparent #ccc'
  .box2 > *:
    margin-left: 0em
_:
  examples:
    count: 0
name: grid-module
template: >-
  <div class="comp-grid-module grid-module box2"
  @mouseenter="$emit('mouseenter', $event)" @mouseleave="$emit('mouseleave',
  $event)" path="1449764372."><div v-if="icon &amp;&amp; showTitle"
  path="1449764372.0"><h3 path="1449764372.0.0"><ui-title :icon="icon"
  :text="compName" :number="getTitle()"
  path="1449764372.0.0.0"></ui-title></h3></div><div class="module-content"
  path="1449764372.1"><slot></slot></div><div class="mt-l1" v-if="showEvents"
  :key="key1" path="1449764372.2"></div><ui-linq-evaluator ref="evaluator1"
  path="1449764372.3"></ui-linq-evaluator></div>
