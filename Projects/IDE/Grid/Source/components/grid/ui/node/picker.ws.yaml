dom:
  .flex:
    div: 
      .node-vues:
        ul:
          li:
            v-for: vue in vues.map(v => v())
            ':class': >-
              { clickable: true, selected: (!selectedVue ? false :
              (selectedVue() == vue)) }
            @click: selectVue(vue)
            ui.title:
              icon: ðŸŽ„
              ':text': vue.$data._.comp.name
    .settings:
      transition:
        name: slide-hor
      div: 
        v-if: selectedVue
        grid.ui.node.settings:
          ':box': selectedVue().box
          ':node': selectedVue().node
          ':data-bound-socket-data': selectedVue().dataBoundSocketData
props:
  box: null
  hoveredElement: null
data:
  mousePos: null
  vues: []
  selectedVue: null
methods:
  selectVue: | #js
    function(vue) {
      if (vue == this.selectedVue?.()) vue = null;
      this.selectedVue = (!vue) ? null : (() => vue);
    }
watch:
  selectedVue:
    handler: | #js
      function(newVue, oldVue) {
        if (oldVue) {
          oldVue = oldVue();
          this.$root.highlighted.nodes.value.removeBy(nr => (nr.box._id == oldVue.box._id) && (nr.node._id == oldVue.node._id));
        }
        if (newVue) {
          newVue = newVue();
          this.$root.highlighted.nodes.value.push({ box: { _id: newVue.box._id }, node: { _id: newVue.node._id } });
        }
      }
    immediate: true
  hoveredElement: | #js
    function(hoveredElement) {
      this.vues = this.$root.vm.getVuesFromElement(hoveredElement)
        .filter(v => (v.$data._?.comp.name.startsWith("grid.ui.node.view")))
        .filter(v => (v.$data._?.comp.name != "grid.ui.node.view"))
        .filter(v => (v.$data._?.comp.name != "grid.ui.node.view.view"))
        .reverse()
        .map(v => (() => v));
    }
style:
  .settings .hoverable:
    background: none
  .node-vues li:nth-child(2):
    margin-left: 1em
  .node-vues li:nth-child(3):
    margin-left: 2em
  .node-vues li:nth-child(4):
    margin-left: 3em
  .node-vues li:nth-child(5):
    margin-left: 4em
_:
  examples:
    count: 0
name: grid-ui-node-picker
template: >-
  <div class="comp-grid-ui-node-picker flex" path="599849288."><div
  path="599849288.0"><div class="node-vues" path="599849288.0.0"><ul
  path="599849288.0.0.0"><li v-for="vue in vues.map(v =&gt; v())" :class="{
  clickable: true, selected: (!selectedVue ? false : (selectedVue() == vue)) }"
  @click="selectVue(vue)" path="599849288.0.0.0.0"><ui-title icon="ðŸŽ„"
  :text="vue.$data._.comp.name"
  path="599849288.0.0.0.0.0"></ui-title></li></ul></div></div><div
  class="settings" path="599849288.1"><transition name="slide-hor"
  path="599849288.1.0"></transition><div v-if="selectedVue"
  path="599849288.1.1"><grid-ui-node-settings :box="selectedVue().box"
  :node="selectedVue().node"
  :data-bound-socket-data="selectedVue().dataBoundSocketData"
  path="599849288.1.1.0"></grid-ui-node-settings></div></div></div>
