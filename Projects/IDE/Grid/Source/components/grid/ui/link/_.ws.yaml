dom:
  grid.module:
    ':show-title': 'false'
    ui.leader.line:
      v-if: showLeaderLine
      ref: leaderLine1
      ':from': fromEl
      ':to': toEl
      ':start-plug': getStartPlug()
      color: '#404040'
      template:
        v-slot: middle
        div:
          class: show-on-hover-container
          ':style': '{ height: ''3em'', border: ''2px solid red'' }'
          ui.button:
            class: show-on-hover
            icon: ❌
            text: delete link
            @click: deleteLink
props:
  link: null
data:
  flashingValue: null
  fromEl: null
  toEl: null
mounted: | #js
  function() {
    this.refresh();
  }
methods:
  deleteLink: | #js
    function() {
      this.$femit("delete.link", this.link._id);
    }
  grid_user_action_stack_do: | #js
    function(box) {
      this.refresh();
    }
  grid_client_runtime_link_flash: | #js
    async function(linkID, sValue) {
      // #TODO: Slow
      if (linkID !== this.link._id) return;
      
      const vLeaderLine = this.$root.vm.getDescendant(this, "ui.leader.line");
      vLeaderLine?.flash(sValue);

      //this.flashingValue = sValue;
      await this.$nextTick();
      this.flashingValue = null;
    }
  getFromEl: | #js
    function() {
      return this.getSocketEl(this.link.from, 'output');
    }
  getToEl: | #js
    function() {
      const toGroupBox = this.getTopGroupBox(this.link.to.box);
      // If the link is going to a box inside a group box, we need to find the group box's window
      // If this box is not a member of the group box
      if (toGroupBox)
      {
        if ((toGroupBox._id != this.link.to.box._id)) {
          //return this.$root.els[`/box/window/${toBox._id}`];
        }
      }
      return this.getSocketEl(this.link.to, 'input');
    }
  getStartPlug: | #js
    function() {
      if (this.link.from.socket.type === "iterator") return "arrow1";
      return null;
    }
  getSocketEl: | #js
    function(socketRef, direction) {
      if (!this.$root.els) {
        setTimeout(this.refresh.bind(this), 100);
        return null;
      }
      const socketElPath = this.getSocketElPath(socketRef, direction);
      return this.$root.els[socketElPath];
    }
  getSocketElPath: | #js
    function(socketRef, direction) {
      const socketElPath = `/box/${socketRef.box._id}/sockets/${direction}/${socketRef.socket._id}`;
      return socketElPath;
    }
  getTopGroupBox: | #js
    function(boxRef) {
      if (!boxRef) return null;
      const box = this.$root.boxes.find(b => b._id == boxRef._id);
      if (!box) return null;
      if (box.groupBoxID) return this.getTopGroupBox({ _id: box.groupBoxID });
      return box;
    }
  refresh: | #js
    function(again = 10) {
      this.fromEl = this.getFromEl();
      this.toEl = this.getToEl();
      if (again) setTimeout(this.refresh.bind(this, again - 1), 400);
    }
computed:
  showLeaderLine: | #js
    function() {
      if (!this.link) return false;
      if (this.link.is.grouped) return false;
      return true;
    }
_:
  examples:
    count: 0
name: grid-ui-link
template: >-
  <grid-module class="comp-grid-ui-link" :show-title="false"
  path="281201772."><ui-leader-line v-if="showLeaderLine" ref="leaderLine1"
  :from="fromEl" :to="toEl" :start-plug="getStartPlug()" color="#404040"
  path="281201772.0"><template v-slot:middle path="281201772.0.0"><div
  class="show-on-hover-container" :style="{ height: '3em', border: '2px solid
  red' }" path="281201772.0.0.0"><ui-button class="show-on-hover" icon="❌"
  text="delete link" @click="deleteLink"
  path="281201772.0.0.0.0"></ui-button></div></template></ui-leader-line></grid-module>
