dom:
  grid.module:
    icon: ⬜
    ':show-title': 'false'
    .slots:
      @click: refresh
      div: 
        v-for: (item, index) in items
        ':class': '''slot-'' + index'
        div: 
          v-if: slotBoxes
          component:
            v-if: slotBoxes[index]?.type
            class: h-100pc
            ':is': getBoxCompName(slotBoxes[index])
            ':userID': userID
            ':box': slotBoxes[index]
            ':data-bound-items': dataBoundItems
props:
  userID: null
  box: null
  dataBoundItems: null
data:
  slotBoxes: null
  boxes: []
  links: []
mounted: | #js
  async function() {
    await this.$nextTick();
    this.refresh();
  }
methods:
  onTitleIconClick: | #js
    function() {
      this.refresh();
    }
  refresh: | #js
    function() {
      this.slotBoxes = this.getSlotBoxes(this.box);
    }
  getSlotBoxes: | #js
    function(box) {
      // Find all boxes that link to this box's input sockets (type=view)
      const boxes = this.$root.boxes;
      const links = this.$root.links;
      const slotBoxes = [];
      const linksToThis = links.filter(l => l.to.box._id == box._id && (this.getInputSocket(l.to.socket._id).type == "view"));
      const fromBoxIDs = linksToThis.map(l => l.from.box._id);
      const fromBoxes = boxes.filter(b => fromBoxIDs.includes(b._id));
      return fromBoxes;
    }
  getBoxCompName: | #js
    function(box) {
      if (!box?.type) return null;
      return `grid.ui.box.${box.type}`.replace(/\./g, "-");
    }
  getInputSocket: | #js
    function(socketID) {
      const socket = this.box.sockets.input.find(s => s._id == socketID);
      return socket;
    }
computed:
  items: | #js
    function() {
      const socketData = this.$root.socket?.runtime.data[this.box._id];
      const item = socketData?.input?.[1];
      if (!item) return [0, 1];
      const slotCanMultiplyView = true;
      const items = (slotCanMultiplyView && Array.isArray(item)) ? item : [item];
      return items;
    }
watch: null
style:
  .item-row:
    height: 1.5em
    overflow: hidden
  .slots:
    display: flex
  .slots, .slots > div:
    height: 100%
  .slots > div:
    border: 2px dashed white
  .slot-0:
    width: 30%
  .slot-1:
    width: 70%
_:
  examples:
    count: 0
name: grid-ui-box-view-layout
template: >-
  <grid-module class="comp-grid-ui-box-view-layout" icon="⬜" :show-title="false"
  path="814806846."><div class="slots" @click="refresh" path="814806846.0"><div
  v-for="(item, index) in items" :class="'slot-' + index"
  path="814806846.0.0"><div v-if="slotBoxes" path="814806846.0.0.0"><component
  class="h-100pc" v-if="slotBoxes[index]?.type"
  :is="getBoxCompName(slotBoxes[index])" :userID="userID"
  :box="slotBoxes[index]" :data-bound-items="dataBoundItems"
  path="814806846.0.0.0.0"></component></div></div></div></grid-module>
