dom:
  div:
    component:
      v-for: item in items
      ':is': getBoxCompName(displayBox)
      ':box': displayBox
      ':data-bound-items': '[item]'
    @click: onClick
props:
  box: null
  surfaceElement: null
data:
  groupBox: null
  displayBox: null
methods:
  onClick: | #js
    function() {
      // #TODO: Find a way to not refresh manually
      this.refresh();
      alertify.success("Refreshed");
    }
  onBoxIsLoading: | #js
    function(boxID, isLoading) {
      if (!this.groupBox.members.includes(boxID)) return;
      if (isLoading) return;
      // Whenever a member box is done loading, refresh the group box
      this.refresh();
    }
  init: | #js
    async function(box) {
      this.groupBox = box;
      this.refresh();
    }
  refresh: | #js
    function() {
      const boxes = this.$root.boxes;
      const links = this.$root.links;
      this.displayBox = boxes.find(b => b._id == this.groupBox.displayBoxID);
    }
  getBoxCompName: | #js
    function(box) {
      if (!box?.type) return null;
      return `grid.ui.box.${box.type}`.replace(/\./g, "-");
    }
computed:
  items: | #js
    function() {
      const socketData = this.$root.socket?.runtime.data[this.box._id];
      const item = socketData?.input?.[1];
      if (!item) return [0, 1];
      const slotCanMultiplyView = true;
      const items = (slotCanMultiplyView && Array.isArray(item)) ? item : [item];
      return items;
    }
watch:
  box:
    handler: | #js
      async function(box) {
        this.init(box);
      }
    immediate: true
_:
  examples:
    count: 0
name: grid-ui-box-group
template: >-
  <div class="comp-grid-ui-box-group" @click="onClick"
  path="1087010666."><component v-for="item in items"
  :is="getBoxCompName(displayBox)" :box="displayBox" :data-bound-items="[item]"
  path="1087010666.0"></component></div>
