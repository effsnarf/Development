dom:
  grid.module:
    ':show-title': 'false'
    ui.input.text.box:
      multiline: 'true'
      ':auto-resize': 'false'
      v-model: boxValue
      @input: onTextInput
props:
  box: null
data:
  boxValue: null
  inputSocketDataValue: null
methods:
  init: | #js
    function(box) {
      this.boxValue = box.value;
    }
  onTextInput: | #js
    function(text) {
      const gridUiBoxVue = this.$root.vm.getAncestors(this, "grid.ui.box")[0];
      gridUiBoxVue.$femit("edit.box", this.box._id, { value: text });
    }
  grid_client_runtime_socket_data_change: | #js
    function(boxID, sDirection, sName, sValue) {
      if (boxID != this.box._id) return;
      if (sDirection != "input") return;
      if (sName != "data") return;
      this.inputSocketDataValue = sValue;
    }
computed:
  icon: | #js
    function() {
      const icons = [];
      const value = this.boxValue;
      
      icons.add("ðŸ†Ž");
      const isUrl = value?.startsWith("http");
      if (isUrl) icons.add("ðŸ”—");

      return icons
        .filter((icon) => icon)
        .join("");
    }
watch:
  box:
    handler: | #js
      async function(box) {
        this.init(box);
      }
    immediate: true
  boxValue:
    handler: | #js
      async function(value) {
        const gridUiBoxVue = this.$root.vm.getAncestors(this, "grid.ui.box")[0];
        gridUiBoxVue.$femit("socket.value.change", this.box._id, "output", 1, value);
      }
style:
  textarea:
    height: 100%
    color: yellow
    resize: none
_:
  examples:
    count: 0
name: grid-ui-box-text
template: >-
  <grid-module class="comp-grid-ui-box-text" :show-title="false"
  path="1559460578."><ui-input-text-box multiline="true" :auto-resize="false"
  v-model="boxValue" @input="onTextInput"
  path="1559460578.0"></ui-input-text-box></grid-module>
