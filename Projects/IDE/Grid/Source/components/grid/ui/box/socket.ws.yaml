dom:
  grid.module:
    ':show-title': 'false'
    ref: socket1
    ui.dnd.dropzone:
      @drop-item: onNewLinkDrop
      ui.context.window:
        v-if: '!isNewLinkDragging'
        div: 
          ':style': dataTooltipStyle
          ui.value.preview: 
            ':value': socketValue
      ui.dnd.draggable:
        ':show-drag-ghost': 'false'
        ':drag-item': '{ box, direction, socket }'
        @drag-start: onNewLinkDragStart
        @drag-end: onNewLinkDragEnd
        @drag: onNewLinkDrag
        .socket:
          ':class': direction + '-socket'
          div: 
            ui.checkbox:
              v-model: socketIsExported
          div: 
            v-text: '''ðŸ”Œ'''
          div: 
            v-text: getSocketIcon(socket)
          div: 
            class: mx-2
            v-text: socket.name
    ui.leader.line:
      v-if: isNewLinkDragging
      ':from': socketEl
      ':to': targetPlugEl
      line-path: fluid
      color: '#404040'
    div: 
      ref: socketValue1
      v-show: 'false'
      ui.value.preview: 
        ':value': socketValue
    div: 
      v-if: 'false'
      ref: targetPlug1
      ':style': targetPlugStyle
      grid.ui.box:
        v-if: showGhostBox
        ':surface-element': targetPlugEl
        ':box': ghostBox
props:
  box: null
  socket: null
  direction: null
data:
  socketEl: null
  targetPlugPos: null
  targetPlugEl: null
  isNewLinkDragging: false
  ghostBox: null
  newBox: null
  socketValue: null
  socketIsExported: null
mounted: | #js
  function() {
    this.socketEl = this.$refs.socket1.$el;

    this.$root.els = this.$root.els || {};
    this.$root.els[this.socketElPath] = this.$el;

    this.ghostBox = {
      _id: `${this.box._id}/${this.socket.name}/ghost/box`,
      type: null,
      name: null,
      rect: {
        pos: { x: 150, y: -100 },
        size: { width: 300, height: 200 },
        is: {
          minimized: true,
        }
      },
      sockets: {
        input: [ ],
        output: [ ],
      },
    };
  }
unmounted: | #js
  function() {
    delete this.$root.els[this.socketElPath];
  }
methods:
  init: | #js
    function(socket){
      this.socketIsExported = socket.is?.exported;
    }
  grid_client_runtime_socket_value_change: | #js
    function(boxID, sDirection, sID, sValue) {
      // #TODO: Slow
      if (boxID != this.box._id) return;
      if (sDirection != this.direction) return;
      if (sID != this.socket._id) return;
      this.socketValue = sValue;
    }
  grid_user_action_stack_new_box_created: | #js
    function(box) {
      this.newBox = box;
    }
  onNewLinkDragStart: | #js
    async function(e) {
      this.isNewLinkDragging = true;
      // Create a new element to be the target plug and append it to the body
      const div = document.createElement('div');
      div.style.background = "linear-gradient(to right, #303030, #101010)";
      div.style.border = "1px solid #ffffff30";
      div.style.width = "fit-content";
      div.style.height = "fit-content";
      div.style.padding = "0.5em";
      div.style.overflow = "hidden";
      Object.assign(div.style, this.dataTooltipStyle);
      this.targetPlugEl?.remove();
      this.targetPlugEl = div;
      // Copy socketValue1's content to targetPlugEl
      this.targetPlugEl.innerHTML = this.$refs.socketValue1.innerHTML;
      document.body.appendChild(this.targetPlugEl);
    }
  onNewLinkDragEnd: | #js
    async function(e) {
      this.isNewLinkDragging = false;

      this.targetPlugEl?.remove();

      // Didn't drop on the surface
      if (!this.targetPlugPos) return;

      const newBox = this.getNewBox(this.ghostBox);
     
      // Create the box
      this.$femit("create.box", newBox);

      // Wait for the box to be created
      this.newBox = null;
      await this.$root.wait(() => this.newBox);

      // Link this socket to the new box
      this.onNewLinkDrop({ box: this.newBox, socket: this.newBox.sockets.input[0], direction: 'input' });
    }
  onNewLinkDrag: | #js
    async function(e) {
      if (!this.nldt) this.nldt = this._onNewLinkDrag.bind(this).throttle(100);
      this.nldt(e);
    }
  _onNewLinkDrag: | #js
    async function(e) {
      const pos = { x: e.e.clientX, y: e.e.clientY };
      if (pos.x == 0 && pos.y == 0) return;
      //const pos = e.relative.pos;
      this.targetPlugPos = { x: (pos.x - 20), y: (pos.y) };
      // Set targetPlugStyle to targetPlugEl
      Object.assign(this.targetPlugEl.style, this.targetPlugStyle);
    }
  onNewLinkDrop: | #js
    function(linkSource) {
      if (linkSource.direction == this.direction) {
        alertify.error('You must connect an output socket to an input socket.');
        return;
      }

      const isReversed = (linkSource.direction == 'input');

      const fromBox = isReversed ? this.box : linkSource.box;
      const toBox = isReversed ? linkSource.box : this.box;
      const fromSocket = isReversed ? this.socket : linkSource.socket;
      const toSocket = isReversed ? linkSource.socket : this.socket;

      const from = {
        box: { _id: fromBox._id },
        socket: { _id: fromSocket._id },
      };
      const to = {
        box: { _id: toBox._id },
        socket: { _id: toSocket._id },
      };

      const gridUiBoxVue = this.$root.vm.getAncestors(this, "grid.ui.box")[0];
      gridUiBoxVue.$femit('create.link', from, to);
    }
  getSocketIcon: | #js
    function(socket) {
      return {
        data: 'ðŸ§Š',
        view: 'â¬œ',
        event: 'âš¡',
      }[socket.type];
    }
  getSurfaceElement: | #js
    function() {
      const gridUiBoxVue = this.$root.vm.getAncestors(this, "grid.ui.box")[0];
      return gridUiBoxVue.surfaceElement;
    }
  getNewBox: | #js
    function(ghostBox) {
      const surfaceElement = this.getSurfaceElement();
      const surfaceRect = this.$root.getAbsoluteRect(surfaceElement);
      
      const newBox = Objects.clone(ghostBox);
      delete newBox._id;

      newBox.sockets.input.add({ _id: 1, type: "data", name: "" });

      const { x, y } = this.targetPlugPos;
      let pos = { x, y };
      // Translate targetPlugPos, which is relative to the window, to be relative to the surface
      pos = { x: (x - surfaceRect.left), y: (y - surfaceRect.top) };
      // Box coordinates are relative to the center of the surface
      pos = { x: (pos.x - (surfaceRect.width / 2)), y: ((surfaceRect.height / 2) - pos.y) };
      // Box coordinates mark the center of the box, not the top-left corner
      pos = { x: (pos.x + (newBox.rect.size.width / 2)), y: (pos.y - (newBox.rect.size.height / 2)) };

      newBox.rect.pos = pos;

      return newBox;
    }
  getBoxVue: | #js
    function() {
      return this.$root.vm.getAncestors(this, "grid.ui.box")[0];
    }
computed:
  dataTooltipStyle: | #js
    function() {
      const style = {};
      style["max-width"] = "20em";
      style["max-height"] = "10em";
      style.overflow = "hidden";
      style["pointer-events"] = "none";
      return style;
    }
  showGhostBox: | #js
    function() {
      return false;
      return this.isNewLinkDragging;
    }
  socketElPath: | #js
    function() {
      return `/box/${this.box._id}/sockets/${this.direction}/${this.socket._id}`;
    }
  targetPlugStyle: | #js
    function() {
      if (!this.targetPlugPos) return null;
      return {
        position: 'fixed',
        left: this.targetPlugPos.x + 'px',
        top: this.targetPlugPos.y + 'px',
      };
    }
watch:
  socket: | #js
    function(socket) {
      this.init(socket);
    }
  socketIsExported: | #js
    function(socketIsExported) {
      if (socketIsExported == undefined) return;
      if (socketIsExported == this.socket.is?.exported) return;
      this.$femit("edit.socket", this.box._id, this.direction, this.socket._id, { is: { exported: socketIsExported } });
    }
style:
  .socket:
    font-size: 100%
    filter: grayscale(1)
    opacity: 0.4
  .socket:hover:
    filter: grayscale(0)
    opacity: 1
  .input-socket, .output-socket:
    display: flex
    cursor: grab
  .output-socket:
    flex-direction: row-reverse
_:
  examples:
    count: 0
name: grid-ui-box-socket
template: >-
  <grid-module class="comp-grid-ui-box-socket" :show-title="false" ref="socket1"
  path="-321995800."><ui-dnd-dropzone @drop-item="onNewLinkDrop"
  path="-321995800.0"><ui-context-window v-if="!isNewLinkDragging"
  path="-321995800.0.0"><div :style="dataTooltipStyle"
  path="-321995800.0.0.0"><ui-value-preview :value="socketValue"
  path="-321995800.0.0.0.0"></ui-value-preview></div></ui-context-window><ui-dnd-draggable
  :show-drag-ghost="false" :drag-item="{ box, direction, socket }"
  @drag-start="onNewLinkDragStart" @drag-end="onNewLinkDragEnd"
  @drag="onNewLinkDrag" path="-321995800.0.1"><div class="socket"
  :class="direction + '-socket'" path="-321995800.0.1.0"><div
  path="-321995800.0.1.0.0"><ui-checkbox v-model="socketIsExported"
  path="-321995800.0.1.0.0.0"></ui-checkbox></div><div v-text="'ðŸ”Œ'"
  path="-321995800.0.1.0.1"></div><div v-text="getSocketIcon(socket)"
  path="-321995800.0.1.0.2"></div><div class="mx-2" v-text="socket.name"
  path="-321995800.0.1.0.3"></div></div></ui-dnd-draggable></ui-dnd-dropzone><ui-leader-line
  v-if="isNewLinkDragging" :from="socketEl" :to="targetPlugEl" line-path="fluid"
  color="#404040" path="-321995800.1"></ui-leader-line><div ref="socketValue1"
  v-show="false" path="-321995800.2"><ui-value-preview :value="socketValue"
  path="-321995800.2.0"></ui-value-preview></div><div v-if="false"
  ref="targetPlug1" :style="targetPlugStyle" path="-321995800.3"><grid-ui-box
  v-if="showGhostBox" :surface-element="targetPlugEl" :box="ghostBox"
  path="-321995800.3.0"></grid-ui-box></div></grid-module>
