options:
  funcs:
    - &options-funcs-bg-color-shades (cls) => `darkest,darker,dark,light,lighter,lightest`.split(`,`).map(s => `bg-${cls}-${s}`)
    - &options-funcs-bg-color-alphas (cls) => [10,20,30,40,50,60,70,80,90].map(n => `bg-${cls}-${n}`)
    - &options-funcs-bg-color-shades-alphas |
      (cls) => {
        var shades = `darkest,darker,dark,light,lighter,lightest`.split(`,`).map(s => `bg-${cls}-${s}`);
        var alphas = [10,20,30,40,50,60,70,80,90].map(n => `bg-${cls}-${n}`);
        if ([`black`, `white`].includes(cls)) return alphas;
        return shades.concat([`-----`]).concat(alphas);
      }
    - &options-funcs-bg-color-withs (cls) => `blue,indigo,purple,pink,red,orange,yellow,pear,green,mint,teal,gray,slategray,brown,wine,almond`.split(`,`).except(cls).map(s => `${cls}-${s}`)

    - &options-funcs-list-of-numbers (prefixes) => prefixes.map(prefix => [...Array(10).keys()].map(n => (n+1)).map(n => `${prefix}${n}`)).flatMap(a => a)

    - &options-funcs-font-demoHtml (cls) => util.haml(`%h3.${cls} ${cls}\n%div\n  Do androids dream,\n  %br\n  of electric sheep`)
    - &options-funcs-flex-width (cls) => util.haml(`%h3 ${cls}\n%div{style:"width:30em;"}\n  %div.flex.${cls}.text-center.bg-gray\n    %div.flex-equal.bg-gray-darker.w-l10.p-3.m-1 &nbsp;\n    %div.flex-equal.bg-gray-darker.p-3.m-1 &nbsp;\n    %div.flex-equal.bg-gray-darker.p-3.m-1 &nbsp;`)
    - &options-funcs-flex-justify (cls) => util.haml(`%h3 ${cls}\n%div{style:"width:30em;"}\n  %div.flex.${cls}.text-center.bg-gray\n    %div.bg-gray-darker.w-l6.p-3.m-1 &nbsp;\n    %div.bg-gray-darker.w-l6.p-3.m-1 &nbsp;\n    %div.bg-gray-darker.w-l6.p-3.m-1 &nbsp;`)
    - &options-funcs-flex-width-wrap (cls) => util.haml(`%h3 ${cls}\n%div\n  %div.flex.${cls}.text-center.bg-gray{style:"width:30em"}\n    %div.bg-gray-darker.w-40pc.p-3.m-1 1\n    %div.bg-gray-darker.w-40pc.p-3.m-1 2\n    %div.bg-gray-darker.w-40pc.p-3.m-1 3`)
    - &options-funcs-flex-width-content (cls) => util.haml(`%h3 ${cls}\n%div\n  %div.flex.flex-wrap.${cls}.text-center.bg-gray{style:"width:30em; height:8em;"}\n    %div.flex.w-33pc.p-1\n      %div.bg-gray-darker.w-100pc.h-100pc.p-1 1\n    %div.flex.w-33pc.p-1\n      %div.bg-gray-darker.w-100pc.h-100pc.p-1 2\n    %div.flex.w-33pc.p-1\n      %div.bg-gray-darker.w-100pc.h-100pc.p-1 3\n    %div.flex.w-33pc.p-1\n      %div.bg-gray-darker.w-100pc.h-100pc.p-1 4\n    %div.flex.w-33pc.p-1\n      %div.bg-gray-darker.w-100pc.h-100pc.p-1 5`)
    - &options-funcs-flex-height (cls) => util.haml(`%h3 ${cls}\n%div\n  %div.flex.${cls}.text-center.bg-gray{style:"width:30em;height:6em; padding:0 0.2em;"}\n    %div.flex-equal.bg-gray-darker.m-1\n      %div.h-l2 &nbsp;\n    %div.flex-equal.bg-gray-darker.m-1\n      %div.h-l4 &nbsp;\n    %div.flex-equal.bg-gray-darker.m-1\n      %div.h-l2 &nbsp;`)
    - &options-funcs-flex-height-item (cls) => util.haml(`%h3 ${cls}\n%div\n  %div.flex.items-stretch.text-center.bg-gray{style:"width:30em;height:6em; padding:0 0.2em;"}\n    %div.flex-equal.bg-gray-darker.m-1\n      %div.h-l3 &nbsp;\n    %div.flex-equal.${cls}.bg-gray-darker.h-l3.m-1.py-3\n      ${cls}\n      %div.h-l3 &nbsp;\n    %div.flex-equal.bg-gray-darker.m-1\n      %div.h-l3 &nbsp;`)
    - &options-funcs-flex-sizes (cls) => util.haml(`%h3 ${cls}\n%div{style:"width:35em; white-space:normal;"}\n  %div.flex.bg-gray\n    %div.${cls}.bg-gray-darker.p-3.m-1\n      %div.text-center ${cls}\n      %div.opacity-50 Do androids\n    %div.${cls}.bg-gray-darker.p-3.m-1\n      %div.text-center ${cls}\n      %div.opacity-50 Do androids dream of\n    %div.${cls}.bg-gray-darker.p-3.m-1\n      %div.text-center ${cls}\n      %div.opacity-50 Do androids dream of electric sheep`)
    - &options-funcs-flex-sizes-grow (cls) => util.haml(`%h3 ${cls}\n%div{style:"width:35em; white-space:normal;"}\n  %div.flex.bg-gray\n    %div.bg-gray-darker.p-3.m-1\n      %div.text-center \n      %div.opacity-50 \n    %div.${cls}.bg-gray-darker.p-3.m-1\n      %div.text-center ${cls}\n      %div.opacity-50 Do androids dream \n    %div.${cls}.bg-gray-darker.p-3.m-1\n      %div.text-center ${cls}\n      %div.opacity-50 Do androids dream of electric sheep`)
    - &options-funcs-flex-sizes-shrink (cls) => util.haml(`%h3 ${cls}\n%div{style:"width:35em; white-space:normal;"}\n  %div.flex.bg-gray\n    %div.bg-gray-darker.p-3.m-1\n      %div.text-center\n      %div.opacity-50 Do androids dream of electric sheep \n    %div.bg-gray-darker.p-3.m-1\n      %div.text-center \n      %div.opacity-50 \n    %div.${cls}.bg-gray-darker.p-3.m-1\n      %div.text-center ${cls}\n      %div.opacity-50 Do androids dream`)
menu:
  flex:
    menu:
      flex:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          demoHtml: *options-funcs-flex-width
          items: [flex, inline-flex]
      fill, equal, grow, shrink:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          demoHtml: *options-funcs-flex-sizes
          items:
            - comment:
                Apply these to one or more individual elements within the flex to control their size.
            - -----
            - flex-fill
            - flex-equal
            - cls: flex-grow-1
              demoHtml: *options-funcs-flex-sizes-grow
            - cls: flex-shrink-1
              demoHtml: *options-funcs-flex-sizes-shrink
      flex wrap:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          demoHtml: *options-funcs-flex-width-wrap
          items: [flex-wrap, flex-nowrap, flex-wrap-reverse]
      justify content:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          demoHtml: *options-funcs-flex-justify
          items: [justify-start, justify-center, justify-end, justify-between, justify-around]
      align items:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          demoHtml: *options-funcs-flex-height
          items: [items-start, items-center, items-end, items-stretch, items-baseline]
      align self:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          demoHtml: *options-funcs-flex-height-item
          items:
            - comment:
                Apply this class to individual blocks inside the flex,
                to override align-items for a specific element.
            - -----
            - self-start
            - self-center
            - self-end
            - self-stretch
            - self-baseline
      align content:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          demoHtml: *options-funcs-flex-width-content
          items:
            - comment:
                Align content only works with flex-wrap.
            - -----
            - content-start
            - content-center
            - content-end
            - content-stretch
            - content-between
            - content-around
  spacing:
    menu:
      padding:
        menu:
          padding:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [p-, p-l]
          padding x:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [px-, px-l]
          padding y:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [py-, py-l]
          padding left:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [pl-, pl-l]
          padding right:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [pr-, pr-l]
          padding top:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [pt-, pt-l]
          padding bottom:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [pb-, pb-l]
      margin:
        menu:
          margin:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [m-, m-l]
          margin x:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [mx-, mx-l]
          margin y:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [my-, my-l]
          margin left:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [ml-, ml-l]
          margin right:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [mr-, mr-l]
          margin top:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [mt-, mt-l]
          margin bottom:
            classes:
              sortBy: (s => 1)
              demoCss: (cls) => ``
              func:
                body: *options-funcs-list-of-numbers
                args: [mb-, mb-l]
  width:
    menu:
      width:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => `${cls} border`
          func:
            body: *options-funcs-list-of-numbers
            args: [w-, w-l]
      width (%):
        classes:
          demoCss: (cls) => `${cls} border`
          sortBy: (s => s.getNumbers()[0])
          regex: ^w-(\d+)pc$
      width (viewport):
        classes:
          demoCss: (cls) => `${cls.replace('vw', 'pc')} border`
          sortBy: (s => s.getNumbers()[0])
          regex: ^w-(\d+)vw$
  height:
    menu:
      height:
        classes:
          sortBy: (s => 1)
          demoCss: (cls) => ``
          func:
            body: *options-funcs-list-of-numbers
            args: [h-, h-l]
      height (%):
        classes:
          demoCss: (cls) => ``
          sortBy: (s => s.getNumbers()[0])
          regex: ^h-(\d+)pc$
      height (viewport):
        classes:
          demoCss: (cls) => ``
          sortBy: (s => s.getNumbers()[0])
          regex: ^h-(\d+)vh$
  display, position:
    menu:
      display:
        classes:
          items: [block, inline, inline-block, table, table-row, table-cell, none]
      position:
        classes:
          demoCss: (cls) => ``
          items:
            - absolute:
                classes:
                  demoCss: (cls) => ``
                  items: [absolute-center, absolute-left, absolute-right, absolute-top, absolute-bottom, absolute-full]
            - fixed:
                classes:
                  demoCss: (cls) => ``
                  items: [fixed-center, fixed-left, fixed-right, fixed-top, fixed-bottom, fixed-full]
            - relative
            - static
            - sticky
  text:
    menu:
      text align:
        classes:
          demoCss: (cls) => `${cls} min-w-l10`
          items:
            - text-center
            - text-left
            - text-right
            - text-justify
      font family:
        classes:
          demoHtml: *options-funcs-font-demoHtml
          items: [sans, serif, mono]
      font size:
        classes:
          sortBy: (s => 1)
          items: [fs-s5, fs-s4, fs-s3, fs-s2, fs-s1, -----, fs-m1, fs-m2, fs-m3, fs-m4, fs-m5, -----, fs-l1, fs-l2, fs-l3, fs-l4, fs-l5]
      font weight:
        classes:
          sortBy: (s => 1)
          items:
          - comment:
              In most browsers, font weights 100-900 only work for custom font files that support it.
          - -----
          - fw-bold
          - -----
          - fw-100
          - fw-200
          - fw-300
          - fw-400
          - fw-500
          - fw-600
          - fw-700
          - fw-800
          - fw-900
      line height:
        classes:
          sortBy: (s => 1)
          demoHtml: *options-funcs-font-demoHtml
          items: [lh-1, lh-2, lh-3, lh-4, lh-5, lh-6]
      letter spacing:
        classes:
          sortBy: (s => 1)
          demoHtml: *options-funcs-font-demoHtml
          items: [ls-tightest, ls-tighter, ls-tight, ls-none, ls-wide, ls-wider, ls-widest]
      text transform:
        classes:
          sortBy: (s => 1)
          demoHtml: *options-funcs-font-demoHtml
          items: [uppercase, lowercase, capitalize]
  colors:
    classes:
      items:
        - text color:
            classes:
              sortBy: (s) => 1
              items:
                - black
                - blue
                - indigo
                - purple
                - pink
                - red
                - orange
                - yellow
                - pear
                - green
                - mint
                - teal
                - gray
                - slategray
                - brown
                - wine
                - almond
                - white
        - background color:
            classes:
              sortBy: (s) => 1
              demoCss: (cls) => `px-l1 w-100pc ${cls}`
              items:
                - bg-black:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [black]
                - bg-blue:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [blue]
                - bg-indigo:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [indigo]
                - bg-purple:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [purple]
                - bg-pink:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [pink]
                - bg-red:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [red]
                - bg-orange:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [orange]
                - bg-yellow:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [yellow]
                - bg-pear:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [pear]
                - bg-green:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [green]
                - bg-mint:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [mint]
                - bg-teal:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [teal]
                - bg-gray:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [gray]
                - bg-slategray:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [slategray]
                - bg-brown:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [brown]
                - bg-wine:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [wine]
                - bg-almond:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [almond]
                - bg-white:
                    classes:
                      sortBy: (s) => 1
                      demoCss: cls => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-shades-alphas
                        args: [white]
        - background (gradient):
            classes:
              sortBy: (s) => 1
              demoCss: (cls) => `px-l1 w-100pc ${cls}`
              items:
                - linear-blue:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [blue]
                - linear-indigo:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [indigo]
                - linear-purple:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [purple]
                - linear-pink:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [pink]
                - linear-red:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [red]
                - linear-orange:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [orange]
                - linear-yellow:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [yellow]
                - linear-pear:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [pear]
                - linear-green:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [green]
                - linear-mint:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [mint]
                - linear-teal:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [teal]
                - linear-gray:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [gray]
                - linear-slategray:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [slategray]
                - linear-brown:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [brown]
                - linear-wine:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [wine]
                - linear-almond:
                    classes:
                      sortBy: (s) => 1
                      demoCss: (cls) => `px-l1 w-100pc ${cls}`
                      func:
                        body: *options-funcs-bg-color-withs
                        args: [almond]
  opacity:
    classes:
      demoCss: (cls) => ``
      sortBy: (s => s.getNumbers()[0])
      regex: ^opacity-(\d+)$
  z-index:
    classes:
      sortBy: (s) => s.getNumbers()[0]
      demoCss: (cls) => ``
      regex: ^z-(.+)$
