dom:
  div:
    h1:
      ui.title:
        icon: ðŸ§Š
        text: Vue Studio
    .user-account:
      component:
        ":is": userAccountCompName
    component:
      ":is": workspaceCompName
props: null
data:
  comps:
    ide: null
    user: null
  css:
    library:
      shorthand: null
  timers:
    recompile:
      comp: {}
  userAccountCompName: null
  workspaceCompName: null
mounted: | #js
  function() {
    this.init();
  }
methods:
  init: | #js
    async function() {
      this.$root.dbp = (await (DatabaseProxy.new("https://db.memegenerator.net/IDE")));
      liveData.dbp = this.$root.dbp;
      this.initCssLibrary();
      this.comps.ide = (await this.getFromCache("vs.comps.ide", this.loadVsIdeComps.bind(this)));
      this.comps.user = (await this.getFromCache("vs.comps.user", this.loadVsUserComps.bind(this)));
      const allComps = [];
      allComps.push(...this.comps.ide);
      allComps.push(...this.comps.user.exceptBy(this.comps.ide, c => c._id));
      const ideVueApp = this;
      window.ideVueApp = ideVueApp;
      compDom.components.value.push(...allComps);
      const mixin = {
        data() {
          return {
            ideVueApp,
            compDom,
            viewDom,
            util
          };
        },
      };
      this.$on("ide-comp-changed-2", this.onCompChanged2.bind(this));
      this.$root.with = util.with;
      await Promise.all(allComps.map(c => vueUserComponentCompiler.compile(c, { mixins: [mixin] })));
      alertify.message(`Vue Studio components loaded`);
      this.userAccountCompName = "meow-comp-267";
      this.workspaceCompName = "meow-comp-171";
      allComps.forEach(comp => liveData.watch.item("ComponentClasses", comp, { on: { changed: this.onCompChanged.bind(this) } }));
    }
  initCssLibrary: | #js
    function() {
      function CssLibrary(url) {
        this.init = async function() {
          this.cssCode = (await (await fetch(url)).text());
          var classNameRegex = /^\.[a-z]([a-z0-9-]+)?(__([a-z0-9]+-?)+)?(--([a-z0-9]+-?)+){0,2}$/;
          this.classNames = {};
          this.classNames.all = css.parse(this.cssCode).stylesheet.rules
            .flatMap(r => r.selectors)
            .filter(s => s)
            .filter(s => s.startsWith(`.`))
            .filter(s => classNameRegex.test(s))
            .map(s => s.substr(1));
          this.classNames.all.sort();
        }
        this.init();
      }
      this.css.library.shorthand = (new CssLibrary("/static/shorthand.css"));
    }
  loadVsIdeComps: | #js
    async function() {
      alertify.message(`Loading Vue Studio components...`);
      const vsComps = (await this.$root.dbp.componentClasses.ide.get());
      alertify.message(`${vsComps.length} components loaded`);
      return vsComps;
    }
  loadVsUserComps: | #js
    async function() {
      alertify.message(`Loading user components...`);
      const userComps = (await this.$root.dbp.componentClasses.user.get());
      alertify.message(`${userComps.length} components loaded`);
      return userComps;
    }
  getIdeComp: | #js
    function(nameOrID) {
      return this.comps.ide.find(c => (c.name === nameOrID) || (c._id === nameOrID));
    }
  onCompChanged: | #js
    function(comp) {
      // onCompChanged is triggered by a watcher, who watches and notifies data, not references
      comp = compDom.get.comp.byID(comp._id);
      this.$emit("ide-comp-changed-2", comp);
    }
  onCompChanged2: | #js
    async function(comp) {
      var timers = this.timers.recompile.comp;
      clearTimeout(timers[comp._id]);
      timers[comp._id] = setTimeout(async () => {
        await this.recompileComp(comp);
        await this.updateLocalCompCache(comp);
      }, 1000);
    }
  updateLocalCompCache: | #js
    async function(comp) {
      // Update local cache
      if (this.comps.user.find(c => (c._id === comp._id))) {
        this.setToCache("vs.comps.user", this.comps.user);
      }
      else {
        alertify.error(`Comp not found in local cache: ${comp.name}`);
      }
    }
  recompileComp: | #js
    async function(comp) {
      // biztos ami biztos
      comp = compDom.get.comp.byID(comp._id);
      await vueUserComponentCompiler.compile(comp, { fix: false });
      this.$emit("ide-comp-recompiled", comp);
    }
  onCompError: | #js
    function(vue, item, ex) {
      const source = (item?.comp ? item.comp.name : null);
      alertify.error(`${source} - ${ex.message}`);
      console.log(item, ex);
    }
  getFromCache: | #js
    async function(key, getValue) {
      const cachedItem = localStorage.getItem(key);
      if (!cachedItem) {
        const value = (await getValue());
        localStorage.setItem(key, JSON.stringify(value));
      }
      return JSON.parse(localStorage.getItem(key));
    }
  setToCache: | #js
    async function(key, value) {
      const started = Date.now();
      localStorage.setItem(key, JSON.stringify(value));
      const elapsed = (Date.now() - started);
    }
style:
  .user-account:
    position: fixed
    right: 1em
    top: 1em
  h1:
    font-size: 3em
_:
  examples:
    count: 0
name: vs-app
template: >-
  <div class="comp-vs-app" path="-809055376."><h1 path="-809055376.0"><ui-title
  icon="ðŸ§Š" text="Vue Studio" path="-809055376.0.0"></ui-title></h1><div
  class="user-account" path="-809055376.1"><component :is="userAccountCompName"
  path="-809055376.1.0"></component></div><component :is="workspaceCompName"
  path="-809055376.2"></component></div>
