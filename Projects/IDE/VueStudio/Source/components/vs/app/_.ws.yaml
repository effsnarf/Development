dom:
  div:
    .flex:
      .logo:
        img:
          class: logo
          src: https://i.imgur.com/bUbkhUu.png
        h1:
          ui.title:
            text: Vue Studio
    .user-account:
      component:
        ":is": userAccountCompName
    component:
      ":is": workspaceCompName
props: null
data:
  comps:
    ide: null
    user: null
  css:
    library:
      shorthand: null
  timers:
    recompile:
      comp: {}
  userAccountCompName: null
  workspaceCompName: null
mounted: | #js
  function() {
    this.init();
  }
methods:
  init: | #js
    async function() {
      const ideVueApp = this;
      window.ideVueApp = ideVueApp;
      this.$root.with = util.with;
      this.$root.dbp = (await (DatabaseProxy.new("https://db.memegenerator.net/IDE")));
      const origLogIn = this.$root.dbp.log.in;
      this.$root.dbp.log.in = (async () => {
        const user = (await origLogIn());
        this.reload();        
      });
      this.$on("ide-comp-changed-2", this.onCompChanged2.bind(this));
      liveData.dbp = this.$root.dbp;
      this.initCssLibrary();
      await this.reload();
    }
  reload: | #js
    async function() {
      this.comps.ide = (await this.getFromCache("vs.comps.ide", this.loadVsIdeComps.bind(this)));
      this.comps.user = (await this.getFromCache("vs.comps.user", this.loadVsUserComps.bind(this)));
      const allComps = [];
      allComps.push(...this.comps.ide.exceptBy(this.comps.user, (c => c._id)));
      allComps.push(...this.comps.user);
      compDom.components.clear();
      compDom.components.add(...allComps);
      alertify.message(`Compiling Vue Studio components...`);
      await Promise.all(allComps.map(this.compileComp.bind(this)));
      alertify.message(`${allComps.length} Vue Studio components compiled`);
      this.userAccountCompName = "ide-user-account-267";
      this.workspaceCompName = "ide-workspace-171";
      await liveData.unwatch.all();
      allComps.forEach(comp => liveData.watch.item("ComponentClasses", comp, { on: { changed: this.onCompChanged.bind(this) } }));
    }
  compileComp: | #js
    async function(comp) {
      const vsGlobalsMixin = {
        data() {
          return {
            ideVueApp,
            compDom,
            viewDom,
            util
          };
        },
      };
      const opTrackerMixin = Mixins.OperationTracker(this.afterCompOperation.bind(this));
      const activityMixin = this.getActivityMixin();
      const mixins = [];
      if (comp.name.kebabize().startsWith("ide-")) mixins.push(vsGlobalsMixin);
      mixins.push(opTrackerMixin);
      mixins.push(activityMixin);
      await vueUserComponentCompiler.compile(comp, { mixins });
    }
  getActivityMixin: | #js
    function() {
      const logActivity = (measurement) => {
        const vue = measurement.operation.context;
        const items = vue.$data._ide_activity.items;
        delete measurement.operation.context;
        const m = measurement;
        const item = {
          name: `${this.getOpIcon(m.operation.type)} ${m.operation.name}`,
          elapsed: Math.round(m.elapsed),
        }
        items.push(item);
        if (items.length > 100) items.shift();
      };
      const activityMixin = Mixins.OperationTracker(logActivity);
      activityMixin.data = function() {
        return {
          _ide_activity: {
            items: []
          }
        };
      }
      return activityMixin;
    }
  getOpIcon: | #js
    function(type) {
      return ({
        "event": "‚ö°",
        "computed": "üí°",
        "watcher": "üëì",
        "method": "üî¥",
      })[type] || "‚ùî";
    }
  afterCompOperation: | #js
    function(measurement) {
      const perfInsp = this.getPerformanceInspector();
      if (!perfInsp) return;
      perfInsp.afterCompOperation(measurement);
    }
  getPerformanceInspector: | #js
    function() {
      if (this._perfInsp) return this._perfInsp;
      if (!window.vueIdeApp) return null;
      this._perfInsp = vueIdeApp.vm.getDescendants(vueIdeApp, "ide.performance.inspector").first();
      return this._perfInsp;
    }
  initCssLibrary: | #js
    function() {
      function CssLibrary(url) {
        this.init = async function() {
          this.cssCode = (await (await fetch(url)).text());
          var classNameRegex = /^\.[a-z]([a-z0-9-]+)?(__([a-z0-9]+-?)+)?(--([a-z0-9]+-?)+){0,2}$/;
          this.classNames = {};
          this.classNames.all = css.parse(this.cssCode).stylesheet.rules
            .flatMap(r => r.selectors)
            .filter(s => s)
            .filter(s => s.startsWith(`.`))
            .filter(s => classNameRegex.test(s))
            .map(s => s.substr(1));
          this.classNames.all.sort();
        }
        this.init();
      }
      this.css.library.shorthand = (new CssLibrary("/static/shorthand.css"));
    }
  loadVsIdeComps: | #js
    async function() {
      alertify.message(`Loading Vue Studio components...`);
      const vsComps = (await this.$root.dbp.componentClasses.ide.get());
      alertify.message(`${vsComps.length} components loaded`);
      return vsComps;
    }
  loadVsUserComps: | #js
    async function() {
      alertify.message(`Loading user components...`);
      const userComps = (await this.$root.dbp.componentClasses.user.get());
      alertify.message(`${userComps.length} components loaded`);
      return userComps;
    }
  getIdeComp: | #js
    function(nameOrID) {
      return this.comps.ide.find(c => (c.name === nameOrID) || (c._id === nameOrID));
    }
  onCompChanged: | #js
    function(comp) {
      // onCompChanged is triggered by a watcher, who watches and notifies data, not references
      comp = compDom.get.comp.byID(comp._id);
      this.$emit("ide-comp-changed-2", comp);
    }
  onCompChanged2: | #js
    async function(comp) {
      var timers = this.timers.recompile.comp;
      clearTimeout(timers[comp._id]);
      timers[comp._id] = setTimeout(async () => {
        await this.updateLocalCompCache(comp);
        await this.recompileComp(comp);
      }, 1000);
    }
  updateLocalCompCache: | #js
    async function(comp) {
      // Delete view from local cache
      const viewNodeKey = compDom.get.node.cache.key(comp, comp.view.node);
      localStorage.removeItem(viewNodeKey);
      // Update local cache
      if (this.comps.user.find(c => (c._id === comp._id))) {
        this.setToCache("vs.comps.user", this.comps.user);
      }
      else {
        alertify.error(`Comp not found in local cache: ${comp.name}`);
      }
    }
  recompileComp: | #js
    async function(comp) {
      // biztos ami biztos
      comp = compDom.get.comp.byID(comp._id);
      await this.compileComp(comp);
      this.$emit("ide-comp-recompiled", comp);
      alertify.message(`<h3>üì¶ ${comp.name}</h3><div>Component recompiled.</div>`);
    }
  onCompError: | #js
    function(vue, item, ex) {
      if (Array.isArray(item)) item = item.last();
      const icon = (item?.comp ? "üì¶" : item?.method ? "üî¥" : "‚ùî");
      const source = Object.values(item)[0].name;
      const message = (ex.message || ex);
      alertify.error(`<h3>${icon} ${source}</h3><div>${message}</div>`);
    }
  getFromCache: | #js
    async function(key, getValue) {
      const cachedItem = localStorage.getItem(key);
      if (!cachedItem) {
        const value = (await getValue());
        localStorage.setItem(key, JSON.stringify(value));
      }
      return JSON.parse(localStorage.getItem(key));
    }
  setToCache: | #js
    async function(key, value) {
      const started = Date.now();
      localStorage.setItem(key, JSON.stringify(value));
      const elapsed = (Date.now() - started);
    }
computed:
style:
  .logo:
    display: flex
    height: fit-content
    position: relative
    left: 0
  .logo h1:
    font-family: Audiowide
    font-size: 3em
    text-shadow: "-6px 6px 6px black"
    animation: slide-in-left 1s ease-out forwards
    animation-delay: 0.5s
    opacity: 0
  .logo img:
    width: 5em
    height: auto
    top: "-0.5em"
    margin-right: 1em
    animation: slide-in-up 1s ease-out forwards
    animation-delay: 0.2s
    opacity: 0
  .user-account:
    position: fixed
    right: 1em
    top: 1em
_:
  examples:
    count: 0
name: vs-app
template: >-
  <div class="comp-vs-app" path="-809055376."><div class="flex"
  path="-809055376.0"><div class="logo" path="-809055376.0.0"><img class="logo"
  src="https://i.imgur.com/bUbkhUu.png" path="-809055376.0.0.0"/><h1
  path="-809055376.0.0.1"><ui-title text="Vue Studio"
  path="-809055376.0.0.1.0"></ui-title></h1></div></div><div
  class="user-account" path="-809055376.1"><component :is="userAccountCompName"
  path="-809055376.1.0"></component></div><component :is="workspaceCompName"
  path="-809055376.2"></component></div>
