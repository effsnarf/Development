dom:
  site:
    page-name: generator
    ':title-image-id': generator?.imageID
    ':title-text': generator?.displayName
    ':title-url': $root.url.generator(generator)
    ':title-key': generator?.generatorID
    template: 
      v-slot: article
      ui.image:
        class: hidden mb-l2
        imageID: 680118409
        ':aspect-ratio': 3/1
      transition: 
        name: slide
        ':key': generator?._id
        div: 
          v-if: generator
          div: 
            class: float-left w-25pc mr-l1
            div: 
              transition: 
                name: fade
                e.instance:
                  v-if: instance
                  ':item': instance
                  ':show-footer': 'false'
                  ':key': instance?._id
          h1:
            v-text: generator?.displayName
          .poem:
            ':style': '{ marginLeft: ''27%'', width: ''fit-content'' }'
            content.poem.stanza:
              ':item': randomStanza
          .description:
            v-if: generator?.desc?.article
            v-html: '$root.textToHtml(generator.desc.article.replace(''Title: '', ''''))'
          div: 
            class: float-clear
    template: 
      v-slot: middle
      content.stream:
        ref: contentStream1
        item-type: e.instance
        ':get-more-items': getMoreInstances
        grid-class: grid-1
        @visible-item: onVisibleSteamInstanceChange
    template: 
      v-slot: left
      e.instance.create:
        v-if: showCreateInstance
        ':generator': generator
        @instance-created: onInstanceCreated
      h3:
        v-text: '''See also'''
      e.generator.list:
        ':generators': recommendationItems
    template: 
      v-slot: right
      .sticky:
        ':style': '{ top: ''0px'' }'
        e.instance.wide:
          ':instance': threadInstance
      e.thread:
        ':threadMedia': '{type: ''instance'', instance: threadInstance}'
data:
  urlName: null
  generator: null
  instance: null
  visibleStreamInstance: null
  poem: null
  randomStanza: null
  recommendationItems: []
  showCreateInstance: false
mounted: | #js
  async function() {
    this.$watch(() => this.$root.params.urlName, {
      handler: async () => {
        await this.init(this.$root.params.page, this.$root.params.urlName);
      },
      immediate: true
    });
  }
methods:
  init: | #js
    async function(page, urlName) {
      const dbp = this.$root.dbp;
      if (page != "generator") return;
      if (urlName == this.urlName) return;
      this.clear();
      if (!urlName) return;
      this.urlName = urlName;
      try
      {
        this.$root.isLoading++;
        this.generator = !this.urlName ? null : await dbp.generators.select.one(null, this.urlName);
        this.recommendationItems.replace(async() => await dbp.generators.select.related(this.urlName), 300, gen => gen.generatorID);
        this.$refs.contentStream1?.reset();
        setTimeout(() => {
          this.poem = this.generator?.desc?.poem;
        }, 500);
        if (this.$root.params.page == "generator") {
          this.$root.setDocumentTitle(this.generator?.displayName);
        }
      }
      finally
      {
        this.$root.isLoading--;
      }
    }
  clear: | #js
    function() {
      this.urlName = null;
      this.generator = null;
      this.poem = null;
      this.recommendationItems = [];
      this.$refs.contentStream1?.reset();
    }
  getMoreInstances: | #js
    async function(pageIndex) {
      await this.init();
      if (!this.urlName) return [];
      const items = await this.$root.dbp.instances.select.popular("en", pageIndex, this.urlName)
      return items;
    }
  getRandomStanzas: | #js
    function(poem) {
      if (!poem) return [];
      // Return random stanzas
      const stanzas = [...poem];
      const result = [];
      for (let i = 0; i < 1; i++) {
        const index = Math.floor(Math.random() * stanzas.length);
        result.push(stanzas[index]);
        stanzas.splice(index, 1);
      }
      return result;
    }
  onInstanceCreated: | #js
    function(instance) {
      this.$refs.contentStream1?.add(instance);
    }
  onVisibleSteamInstanceChange: | #js
    function(instance) {
      this.visibleStreamInstance = instance;
    }
watch:
  generator: | #js
    async function(generator) {
      if (!generator)
      {
        this.instance = null;
        this.randomStanza = null;
        this.showCreateInstance = false;
        return;
      }
      this.instance = (await this.$root.dbp.instances.select.popular("en", 0, generator.urlName)).shuffle()[0];
      this.instance.text0 = null;
      this.instance.text1 = null;
      this.randomStanza = this.getRandomStanzas(generator.desc?.poem)[0];
      setTimeout(() => {
        this.showCreateInstance = true;
      }, 200);
    }
computed:
  threadInstance: | #js
    function() {
      return (this.visibleStreamInstance);
    }
style:
  .comp-e-instance .footer:
    display: none
  .comp-e-teaser:
    filter: grayscale(1)
  .comp-e-teaser:hover:
    filter: grayscale(0)
  .description:
    max-height: 15em
    overflow: auto
    margin: 2em 0
  .description h3:
    font-size: 2rem
    display: inline-block
  .poem: null
  .poem .comp-content-poem-stanza:
    margin: 1rem auto
  .poem .line:nth-child(1):
    font-size: 160%
  .float-clear:
    clear: both
  .sticky:
    padding: 0.5em
name: page-generator
template: >-
  <site class="comp-page-generator" page-name="generator"
  :title-image-id="generator?.imageID" :title-text="generator?.displayName"
  :title-url="$root.url.generator(generator)"
  :title-key="generator?.generatorID" path="-38884812."><template v-slot:article
  path="-38884812.0"><ui-image class="hidden mb-l2" imageID="680118409"
  :aspect-ratio="3/1" path="-38884812.0.0"></ui-image><transition name="slide"
  :key="generator?._id" path="-38884812.0.1"><div v-if="generator"
  path="-38884812.0.1.0"><div class="float-left w-25pc mr-l1"
  path="-38884812.0.1.0.0"><div path="-38884812.0.1.0.0.0"><transition
  name="fade" path="-38884812.0.1.0.0.0.0"><e-instance v-if="instance"
  :item="instance" :show-footer="false" :key="instance?._id"
  path="-38884812.0.1.0.0.0.0.0"></e-instance></transition></div></div><h1
  v-text="generator?.displayName" path="-38884812.0.1.0.1"></h1><div
  class="poem" :style="{ marginLeft: '27%', width: 'fit-content' }"
  path="-38884812.0.1.0.2"><content-poem-stanza :item="randomStanza"
  path="-38884812.0.1.0.2.0"></content-poem-stanza></div><div
  class="description" v-if="generator?.desc?.article"
  v-html="$root.textToHtml(generator.desc.article.replace('Title: ', ''))"
  path="-38884812.0.1.0.3"></div><div class="float-clear"
  path="-38884812.0.1.0.4"></div></div></transition></template><template
  v-slot:middle path="-38884812.1"><content-stream ref="contentStream1"
  item-type="e.instance" :get-more-items="getMoreInstances" grid-class="grid-1"
  @visible-item="onVisibleSteamInstanceChange"
  path="-38884812.1.0"></content-stream></template><template v-slot:left
  path="-38884812.2"><e-instance-create v-if="showCreateInstance"
  :generator="generator" @instance-created="onInstanceCreated"
  path="-38884812.2.0"></e-instance-create><h3 v-text="'See also'"
  path="-38884812.2.1"></h3><e-generator-list :generators="recommendationItems"
  path="-38884812.2.2"></e-generator-list></template><template v-slot:right
  path="-38884812.3"><div class="sticky" :style="{ top: '0px' }"
  path="-38884812.3.0"><e-instance-wide :instance="threadInstance"
  path="-38884812.3.0.0"></e-instance-wide></div><e-thread :threadMedia="{type:
  'instance', instance: threadInstance}"
  path="-38884812.3.1"></e-thread></template></site>
