dom:
  site:
    page-name: generator
    :columns: 2
    ':title-image-id': generator?.imageID
    ':title-text': generator?.displayName
    ':title-url': $root.url.generator(generator)
    ':title-key': generator?.generatorID
    template:
      v-slot: article
      ui.image:
        class: hidden mb-l2
        imageID: 680118409
        :aspect-ratio: "3/1"
      div:
        div:
          class: float-left mr-l1
          :style: "{ width: '30%' }"
          e.generator:
          e.instance:
            :item: instance
            :show-footer: "false"
        h1:
          v-text: generator?.displayName
        .poem:
          :style: "{ marginLeft: '32%', width: '68%' }"
          content.poem.stanza:
            ':item': randomStanza
        #.description:
          #v-html: "'<strong>Feminist Cunt</strong> is a popular internet meme that depicts a penguin character embodying the traits of social awkwardness. The meme typically features a simple illustration of a penguin with a slightly tilted head and a shy expression. It represents those relatable moments when individuals find themselves in uncomfortable or socially challenging situations. Socially Awkward Penguin serves as a lighthearted way to express and relate to the awkwardness many people experience in their daily lives, creating a sense of camaraderie and humor within online communities.'"
        div:
          class: float-clear
    template:
      v-slot: middle
      content.stream:
        ref: contentStream1
        item-type: e.instance
        ':get-more-items': getMoreInstances
        grid-class: grid-3
    template:
      v-slot: left
      e.instance.create:
        v-if: showCreateInstance
        ':generator': generator
        @instance-created: onInstanceCreated
      h3:
        v-text: "'See also'"
      e.generator.list:
        :generators: recommendationItems

    template:
      v-slot: right
data:
  urlName: null
  generator: null
  instance: null
  poem: null
  randomStanza: null
  recommendationItems: []
  showCreateInstance: false
mounted: | #js
  async function() {
    this.$watch(() => this.$root.params.urlName, {
      handler: async () => {
        await this.init();
      },
      immediate: true
    });
  }
methods:
  init: | #js
    async function() {
      const dbp = this.$root.dbp;
      if (this.urlName == this.$root.params.urlName) return;
      this.urlName = this.$root.params.urlName;
      if (!this.urlName) return;
      this.clear();
      try
      {
        this.$root.isLoading = true;
        this.generator = !this.urlName ? null : await dbp.generators.select.one(null, this.urlName);
        this.recommendationItems.replace(async() => await dbp.generators.select.related(this.urlName), 300, gen => gen.generatorID);
        this.$refs.contentStream1?.reset();
        setTimeout(() => {
          this.poem = this.generator?.desc?.poem;
        }, 500);
        if (this.$root.params.page == "generator") {
          this.$root.setDocumentTitle(this.generator?.displayName);
        }
      }
      finally
      {
        this.$root.isLoading = false;
      }
    }
  clear: | #js
    function() {
      this.generator = null;
      this.poem = null;
      this.recommendationItems = [];
      this.$refs.contentStream1?.reset();
    }
  getMoreInstances: | #js
    async function(pageIndex) {
      await this.init();
      if (!this.urlName) return [];
      const items = await this.$root.dbp.instances.select.popular("en", pageIndex, this.urlName)
      return items;
    }
  getRandomStanzas: | #js
    function(poem) {
      if (!poem) return [];
      // Return random stanzas
      const stanzas = [...poem];
      const result = [];
      for (let i = 0; i < 1; i++) {
        const index = Math.floor(Math.random() * stanzas.length);
        result.push(stanzas[index]);
        stanzas.splice(index, 1);
      }
      return result;
    }
  onInstanceCreated: | #js
    function(instance) {
      this.$refs.contentStream1?.add(instance);
    }
watch:
  generator: | #js
    async function(generator) {
      if (!generator)
      {
        this.instance = null;
        this.randomStanza = null;
        this.showCreateInstance = false;
        return;
      }
      this.instance = (await this.$root.dbp.instances.select.popular("en", 0, generator.urlName)).shuffle()[0];
      this.instance.text0 = null;
      this.instance.text1 = null;
      this.randomStanza = this.getRandomStanzas(generator.desc?.poem)[0];
      setTimeout(() => {
        this.showCreateInstance = true;
      }, 200);
    }
style:
  .comp-e-instance .footer:
    display: none
  .comp-e-teaser:
    filter: grayscale(1)
  .comp-e-teaser:hover:
    filter: grayscale(0)
  .description:
    margin: 2em 0
  .description h3:
    font-size: 2rem
    display: inline-block
  .poem: null
  .poem .comp-content-poem-stanza:
    margin: 1rem auto
  .poem .line:nth-child(1):
    font-size: 160%
  .float-clear:
    clear: both
name: page-generator
template: >-
  <site class="comp-page-generator" page-name="generator"
  :title-image-id="generator?.imageID" :title-text="generator?.displayName"
  :title-url="$root.url.generator(generator)"
  :title-key="generator?.generatorID"
  :recommendation-items="recommendationItems" path="-38884812."><template
  v-slot:article path="-38884812.0"><content-article v-if="poem"
  path="-38884812.0.0"><template v-slot:content path="-38884812.0.0.0"><div
  class="poem" path="-38884812.0.0.0.0"><transition-group name="list"
  path="-38884812.0.0.0.0.0"><content-poem-stanza v-for="stanza in
  getRandomStanzas(poem)" :item="stanza" :key="stanza.map(l =&gt; l.substring(0,
  5)).join('-')"
  path="-38884812.0.0.0.0.0.0"></content-poem-stanza></transition-group></div><div
  class="float-clear"
  path="-38884812.0.0.0.1"></div></template></content-article></template><template
  v-slot:middle path="-38884812.1"><content-stream ref="contentStream1"
  item-type="e.instance" :get-more-items="getMoreInstances" grid-class="grid-1"
  path="-38884812.1.0"></content-stream></template><template v-slot:left
  path="-38884812.2"><e-instance-create v-if="showCreateInstance"
  :generator="generator" @instance-created="onInstanceCreated"
  path="-38884812.2.0"></e-instance-create></template></site>
