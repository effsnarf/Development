dom:
  site:
    page-name: generator
    ':title-image-id': generator?.imageID
    ':title-text': generator?.displayName
    ':title-url': $root.url.generator(generator)
    ':title-key': generator?.generatorID
    ':recommendation-items': recommendationItems
    template#1:
      v-slot: article
      content.article:
        v-if: poem
        template:
          v-slot: content
          .poem:
            transition.group:
              name: list
              content.poem.stanza:
                v-for: stanza in getRandomStanzas(poem)
                ':item': stanza
                ':key': stanza.map(l => l.substring(0, 5)).join('-')
          div:
            class: float-clear
    template#2:
      v-slot: middle
      content.stream:
        ref: contentStream1
        item-type: e.instance
        ':get-more-items': getMoreInstances
        grid-class: grid-1
    template#3:
      v-slot: left
      e.instance.create:
        v-if: showCreateInstance
        ':generator': generator
        on_instance-created: onInstanceCreated
data:
  urlName: null
  generator: null
  poem: null
  recommendationItems: []
  showCreateInstance: false
mounted: | #js
  async function() {
    this.$watch(() => this.$root.params.urlName, {
      handler: async () => {
        await this.init();
      },
      immediate: true
    });
  }
methods:
  init: | #js

    async function() {
      const dbp = this.$root.dbp;
      if (this.urlName == this.$root.params.urlName) return;
      this.urlName = this.$root.params.urlName;
      if (!this.urlName) return;
      this.clear();
      try
      {
        this.$root.isLoading = true;
        this.generator = !this.urlName ? null : await dbp.generators.select.one(null, this.urlName);
        this.recommendationItems.replace(async() => await dbp.generators.select.related(this.urlName), 500, gen => gen.generatorID);
        this.$refs.contentStream1?.reset();
        setTimeout(() => {
          this.poem = this.generator?.desc?.poem;
        }, 500);
        if (this.$root.params.page == "generator") {
          this.$root.setDocumentTitle(this.generator?.displayName);
        }
      }
      finally
      {
        this.$root.isLoading = false;
      }
    }
  clear: | #js

    function() {
      this.generator = null;
      this.poem = null;
      this.recommendationItems = [];
      this.$refs.contentStream1?.reset();
    }
  getMoreInstances: | #js

    async function(pageIndex) {
      await this.init();
      if (!this.urlName) return [];
      const items = await this.$root.dbp.instances.select.popular("en", pageIndex, this.urlName)
      return items;
    }
  getRandomStanzas: | #js

    function(poem) {
      if (!poem) return [];
      // Return random stanzas
      const stanzas = [...poem];
      const result = [];
      for (let i = 0; i < 1; i++) {
        const index = Math.floor(Math.random() * stanzas.length);
        result.push(stanzas[index]);
        stanzas.splice(index, 1);
      }
      return result;
    }
  onInstanceCreated: | #js

    function(instance) {
      this.$refs.contentStream1?.add(instance);
    }
watch:
  generator: | #js

    function(newGenerator) {
      if (!newGenerator)
      {
        this.showCreateInstance = false;
        return;
      }
      setTimeout(() => {
        this.showCreateInstance = true;
      }, 2000);
    }
style:
  .poem: null
  .poem .comp-content-poem-stanza:
    margin: 1rem auto
  .poem .line:nth-child(1):
    font-size: 160%
  .float-clear:
    clear: both
name: page-generator
template: >-
  <site class="comp-page-generator" page-name="generator"
  :title-image-id="generator?.imageID" :title-text="generator?.displayName"
  :title-url="$root.url.generator(generator)"
  :title-key="generator?.generatorID"
  :recommendation-items="recommendationItems"><template
  v-slot:article><content-article v-if="poem"><template v-slot:content><div
  class="poem"><transition-group name="list"><content-poem-stanza v-for="stanza
  in getRandomStanzas(poem)" :item="stanza" :key="stanza.map(l =&gt;
  l.substring(0,
  5)).join('-')"></content-poem-stanza></transition-group></div><div
  class="float-clear"></div></template></content-article></template><template
  v-slot:middle><content-stream ref="contentStream1" item-type="e.instance"
  :get-more-items="getMoreInstances"
  grid-class="grid-1"></content-stream></template><template
  v-slot:left><e-instance-create v-if="showCreateInstance"
  :generator="generator"
  @instance-created="onInstanceCreated"></e-instance-create></template></site>
