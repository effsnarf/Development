dom:
  div:
    .flex.items-baseline:
      div#2:
        h3:
          ui.title:
            text: Changes
        ul#2:
          class: changes
          li:
            v-for: change in $root.state.getRefChanges(uid)?.take(20)
            class: hoverable
            ':key': item.id
            @mouseenter: () => onMouseEnter(item)
            @mouseleave: () => onMouseLeave(item)
            ide.state.tracker.item:
              :uid: uid
              :item: change
              :key: item.id
      div#1:
        h3:
          ui.title:
            text: State
        ul#1:
          li:
            v-for: field in $root.vm.getFields(uid)
            ide.state.tracker.item:
              :uid: uid
              :item: field
              :key: "uid+'.'+field.key"
      div#3:
props:
  uid: null
data:
  key1: 1
mounted: | #js
  async function() {
  }
methods:
  onMouseEnter: | #js
    function(item) {
      this.$root.state.apply(this.uid, item);
    }
  onMouseLeave: | #js
    function(item) {
    }
style:
  .comp-ui-title:
    border-radius: 0
    border-bottom: "1px solid #000"
  .flex:
    gap: 1em
  ul:
    display: flex
    flex-direction: column-reverse
  ul:not(.changes) .grid:
    opacity: 0.5
  li:hover:
    background: "#ffffff30"
    transition: 0s
name: ide-state-tracker
template: >-
  <div class="comp-ide-state-tracker" path="-483235177."><div
  path="-483235177.0"><ui-checkbox text="track methods"
  v-model="stateTracker.isTrackingMethods"
  path="-483235177.0.0"></ui-checkbox></div><ul name="list"
  path="-483235177.1"><li class="hoverable" v-for="item in
  stateTracker.items.take(20)" :key="item.id" @click="() =&gt;
  onItemClick(item)" @mouseenter="() =&gt; onMouseEnter(item)" @mouseleave="()
  =&gt; onMouseLeave(item)" path="-483235177.1.0"><ide-state-tracker-item
  :state-tracker="stateTracker" :item="item"
  path="-483235177.1.0.0"></ide-state-tracker-item></li></ul><div
  path="-483235177.2"><button v-text="'❌'" @click="clear"
  path="-483235177.2.0"></button></div></div>
