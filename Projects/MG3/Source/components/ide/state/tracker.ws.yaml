dom:
  div: 
    .flex.items-baseline:
      div: 
        h3: 
          ui.title: 
            text: State
        transition: 
          name: slide
          ul: 
            v-if: '!selectedItem'
            li: 
              class: clickable
              v-for: field in $root.vm.getFields(uid)
              ide.state.tracker.item: 
                ':uid': uid
                ':item': field
                ':key': uid+'.'+field.key
                @select-item: selectedItem = $event
        transition: 
          name: slide
          div: 
            v-if: selectedItem
            h3: 
              ui.title: 
                ':icon': $root.getIcon(selectedItem)
                ':text': selectedItem.key
            ui.value.any:
              ':value': selectedItem.newValue
            .mt-l2:
              ui.button:
                ':text': '''< back'''
                ':click': () => selectedItem = null
      div: 
        h2:
          ui.title: 
            text: Changes
        ul: 
          class: changes
          ':key': key1
          li: 
            v-for: change in $root.state.getRefChanges(uid).take(20)
            class: hoverable
            ':key': change.id
            @mouseenter: () => onMouseEnter(change)
            @mouseleave: () => onMouseLeave(change)
            ide.state.tracker.item: 
              ':uid': uid
              ':item': change
              ':key': change.id
      div:  null
props:
  uid: null
data:
  key1: 1
  selectedItem: null
mounted: | #js
  async function() {
    this.$root.$on("state-changed", this.onStateChanged.bind(this));
  }
methods:
  onStateChanged: | #js
    function(stateChange) {
      if (this.uid == stateChange.uid) {
        this.refresh();
      }
    }
  onMouseEnter: | #js
    function(item) {
      this.$root.state.apply(this.uid, item);
    }
  onMouseLeave: | #js
    function(item) {
    }
  refresh: | #js
    function() {
      this.key1++;
    }
style:
  .comp-ui-title:
    border-radius: 0
    border-bottom: '1px solid #000'
  .flex:
    gap: 1em
  ul:
    display: flex
    flex-direction: column-reverse
  ul:not(.changes) .grid:
    opacity: 0.5
  li:hover:
    background: '#ffffff30'
    transition: 0s
name: ide-state-tracker
template: >-
  <div class="comp-ide-state-tracker" path="-483235177."><div class="flex
  items-baseline" path="-483235177.0"><div path="-483235177.0.0"><h3
  path="-483235177.0.0.0"><ui-title text="State"
  path="-483235177.0.0.0.0"></ui-title></h3><transition name="slide"
  path="-483235177.0.0.1"><ul v-if="!selectedItem" path="-483235177.0.0.1.0"><li
  class="clickable" v-for="field in $root.vm.getFields(uid)"
  path="-483235177.0.0.1.0.0"><ide-state-tracker-item :uid="uid" :item="field"
  :key="uid+'.'+field.key" @select-item="selectedItem = $event"
  path="-483235177.0.0.1.0.0.0"></ide-state-tracker-item></li></ul></transition><transition
  name="slide" path="-483235177.0.0.2"><div v-if="selectedItem"
  path="-483235177.0.0.2.0"><h3 path="-483235177.0.0.2.0.0"><ui-title
  :icon="$root.getIcon(selectedItem)" :text="selectedItem.key"
  path="-483235177.0.0.2.0.0.0"></ui-title></h3><ui-value-any
  :value="selectedItem.newValue" path="-483235177.0.0.2.0.1"></ui-value-any><div
  class="mt-l2" path="-483235177.0.0.2.0.2"><ui-button :text="'&lt; back'"
  :click="() =&gt; selectedItem = null"
  path="-483235177.0.0.2.0.2.0"></ui-button></div></div></transition></div><div
  path="-483235177.0.1"><h2 path="-483235177.0.1.0"><ui-title text="Changes"
  path="-483235177.0.1.0.0"></ui-title></h2><ul class="changes" :key="key1"
  path="-483235177.0.1.1"><li class="hoverable" v-for="change in
  $root.state.getRefChanges(uid).take(20)" :key="change.id" @mouseenter="()
  =&gt; onMouseEnter(change)" @mouseleave="() =&gt; onMouseLeave(change)"
  path="-483235177.0.1.1.0"><ide-state-tracker-item :uid="uid" :item="change"
  :key="change.id"
  path="-483235177.0.1.1.0.0"></ide-state-tracker-item></li></ul></div><div></div></div></div>
