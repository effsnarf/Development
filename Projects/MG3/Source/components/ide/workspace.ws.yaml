dom:
  div:
    class: workspace
    ide.component.editor:
      ':component': selectedComponent
    ui.tree:
      ':root': () => $root
      ':getChildren': getVueChildren
      item-type: ide-vue-node
      on_node-select: onNodeSelect
      on_node-click: onNodeClick
      on_node-hover: onNodeHover
      on_node-unhover: onNodeUnhover
    div:
      ui.list:
        v-slot: slotProps
        ':items': comps
        template:
          ide.component.style:
            ':component': slotProps.item
props:
  comps: null
data:
  selectedNode: null
methods:
  getVueChildren: |
    function(vue) {
      return !vue ? [] : vue().$children?.map(c => (() => c));
    }
  onNodeSelect: |
    function(node) {
      this.selectedNode = node;
    }
  onNodeClick: |
    function(node) {
      //console.log(node());
    }
  onNodeHover: |
    function (node) {
      node()?.$el.classList?.add('highlighted');
    }
  onNodeUnhover: |
    function (node) {
      node()?.$el.classList?.remove('highlighted');
    }
computed:
  selectedComponent: |
    function() {
      if (!this.selectedNode) return null;
      const vue = this.selectedNode();
      const compName = vue?.$options?._componentTag?.replace(/-/g, '.');
      const comp = this.comps.find(c => c.name == compName);
      return comp;
    }
name: ide-workspace
style:
  .comp-ide-workspace:
    position: fixed
    right: 0
    display: flex
    flex-direction: column
    gap: 3em
    z-index: 100
