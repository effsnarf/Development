dom:
  div:
    ui.keyboard:
      @ctrl: onCtrlKey
    ui.mouse:
      @hovered-element: onHoveredElement
      ':global': true
    ui.context.window:
      ref: context1
      ':global': true
      ':visible': showPicker
      icon: ðŸ“¦
      ':title': getTitle(hoveredVueUID)
      template:
        v-slot: content
        .flex.flex-column.gap-1:
          ide.component.editor:
            ':vue-uid': selectedVueUID||hoveredVueUID
          .parent-chain:
            ide.component.title: 
              v-for: uid in parentChainUIDs
              ':item': $root.vm.vues[uid]
              ':class': '{ ''selected'': uid === selectedVueUID }'
              @click: selectVue(uid)
          .child-chain:
            ide.component.title: 
              v-for: uid in childChainUIDs
              ':item': $root.vm.vues[uid]
              ':class': '{ ''selected'': uid === selectedVueUID }'
              @click: selectVue(uid)
props: null
data:
  hoveredElement: null
  hoveredVueUID: null
  selectedVueUID: null
  parentChainUIDs: null
  childChainUIDs: null
  showPicker: false
methods:
  selectVue: | #js
    function(uid) {
      if (uid == this.selectedVueUID) uid = null;
      this.selectedVueUID = uid;
    }
  onCtrlKey: | #js
    function(ctrl) {
      this.showPicker = ctrl;
    }
  getTitle: | #js
    function(vue) {
      return this.$root.vm.getVue(vue)?.$options._componentTag;
    }
  onHoveredElement: | #js
    function(el) {
      if (this.$refs.context1.isPinned) return;
      this.hoveredElement = el;
    }
  getParentChainUIDs: | #js
    function(vue) {
      const maxChainLength = 4;
      let chain = [];
      let parent = vue;
      while (parent && (chain.length < maxChainLength)) {
        chain.push(parent._uid);
        parent = this.getParentVue(parent);
      }
      chain = chain.reverse();
      return chain;
    }
  getChildChainUIDs: | #js
    function(vue) {
      return vue?.$children?.map(c => c._uid);
    }
  getParentVue: | #js
    function(vue) {
      return this.getVueFromVnode(vue.$parent);
    }
  getVueFromElement: | #js
    function(el) {
      return this.getVueFromVnode(this.getVnodeFromElement(el));
    }
  getVnodeFromElement: | #js
    function(el) {
      if (!el) return null;
      if (el.__vue__) return el.__vue__;
      return this.getVnodeFromElement(el.parentElement);
    }
  getVueFromVnode: | #js
    // Skip vnodes like <keep-alive>, <transition>, etc.
    function(vnode) {
      if (!vnode) return null;
      if (this.vNodeIsVue(vnode)) return vnode;
      return this.getVueFromVnode(vnode.$parent);
    }
  vNodeIsVue: | #js
    function(vnode) {
      if ([`transition`, `transition-group`, `keep-alive`].includes(vnode.$options._componentTag)) return false;
      return true;
    }
  updateChains: | #js
    function(vue) {
      this.parentChainUIDs = this.getParentChainUIDs(vue);
      this.childChainUIDs = this.getChildChainUIDs(vue);
    }
computed: null
watch:
  hoveredElement: | #js
    function(newEl, oldEl) {
      const vue = this.getVueFromElement(newEl);
      this.hoveredVueUID = vue?._uid;
      this.updateChains(vue);
    }
  hoveredVueUID:
    handler: | #js
      function(newVueUID, oldVueUID) {
        if (oldVueUID) this.$root.vm.getVue(oldVueUID)?.$el.classList.remove(`highlighted2`);
        if (newVueUID) this.$root.vm.getVue(newVueUID)?.$el.classList.add(`highlighted2`);
      }
    immediate: true
  selectedVueUID:
    handler: | #js
      function(newVueUID, oldVueUID) {
        const vue = this.$root.vm.getVue(newVueUID);
        this.updateChains(vue);
      }
    immediate: true
style:
  div:
    font-family: monospace
  .parent-chain:
    margin-top: 2em
  .parent-chain > :nth-child(1):
    margin-left: 0.5em
  .parent-chain > :nth-child(2):
    margin-left: 1em
  .parent-chain > :nth-child(3):
    margin-left: 1.5em
  .parent-chain > :nth-child(4):
    margin-left: 2em
  .parent-chain > :nth-child(5):
    margin-left: 2.5em
  .child-chain:
    margin-left: 4em
name: ide-component-picker
template: >-
  <div class="comp-ide-component-picker" path="-646340253."><ui-keyboard
  @ctrl="onCtrlKey" path="-646340253.0"></ui-keyboard><ui-mouse
  @hovered-element="onHoveredElement" :global="true"
  path="-646340253.1"></ui-mouse><ui-context-window ref="context1"
  :global="true" :visible="showPicker" icon="ðŸ“¦"
  :title="getTitle(hoveredVueUID)" path="-646340253.2"><template v-slot:content
  path="-646340253.2.0"><div class="flex flex-column gap-1"
  path="-646340253.2.0.0"><ide-component-editor
  :vue-uid="selectedVueUID||hoveredVueUID"
  path="-646340253.2.0.0.0"></ide-component-editor><div class="parent-chain"
  path="-646340253.2.0.0.1"><ide-component-title v-for="uid in parentChainUIDs"
  :item="$root.vm.vues[uid]" :class="{ 'selected': uid === selectedVueUID }"
  @click="selectVue(uid)"
  path="-646340253.2.0.0.1.0"></ide-component-title></div><div
  class="child-chain" path="-646340253.2.0.0.2"><ide-component-title v-for="uid
  in childChainUIDs" :item="$root.vm.vues[uid]" :class="{ 'selected': uid ===
  selectedVueUID }" @click="selectVue(uid)"
  path="-646340253.2.0.0.2.0"></ide-component-title></div></div></template></ui-context-window></div>
