dom:
  div: 
    ui.keyboard:
      @ctrl: toggleVisibility
    ui.mouse:
      @hovered-element: onHoveredElement
      ':global': true
    ui.context.window:
      ref: context1
      ':global': true
      ':visible': showPicker
      icon: ðŸ“¦
      ':title': getTitle(activeVueUID)
      @pinned: onPinned
      template:
        v-slot: content
        .flex.flex-row.gap-1:
          .flex.flex-column.gap-1:
            div: 
              transition.group: 
                tag: div
                name: list2
                class: parent-chain
                div: 
                  v-for: uid in parentChainUIDs
                  ':key': uid
                  ide.component.title: 
                    ':item': $root.vm.vues[uid]
                    ':class': '{ ''selected'': uid === selectedVueUID }'
                    @mouseenter: onMouseEnterVue(uid)
                    @mouseleave: onMouseLeaveVue(uid)
                    @click: selectVue(uid)
              transition.group: 
                tag: div
                name: list2
                class: child-chain
                div: 
                  v-for: uid in childChainUIDs
                  ':key': uid
                  ide.component.title: 
                    ':item': $root.vm.vues[uid]
                    ':class': '{ ''selected'': uid === selectedVueUID }'
                    @mouseenter: onMouseEnterVue(uid)
                    @mouseleave: onMouseLeaveVue(uid)
                    @click: selectVue(uid)
            ide.element.inspector:
              class: hidden
              ':element': hoveredElement
          transition:
            name: slide-hor
            ':key': selectedVueUID
            ide.component.editor:
              ':vue-uid': selectedVueUID
props: null
data:
  hoveredElement: null
  hoveredVueUID: null
  selectedVueUID: null
  parentChainUIDs: null
  childChainUIDs: null
  showPicker: false
methods:
  onPinned: | #js
    function(pinned) {
      if (pinned)
      {
        this.selectedVueUID = this.hoveredVueUID;
        return;
      }
      this.selectedVueUID = null;
    }
  onMouseEnterVue: | #js
    function(uid) {
      this.hoveredVueUID = uid;
    }
  onMouseLeaveVue: | #js
    function(uid) {
      this.hoveredVueUID = null;
    }
  selectVue: | #js
    function(uid) {
      if (uid == this.selectedVueUID) uid = null;
      this.selectedVueUID = uid;
    }
  toggleVisibility: | #js
    function(visible) {
      this.showPicker = visible;
    }
  getTitle: | #js
    function(vue) {
      return this.$root.vm.getVue(vue)?.$options._componentTag;
    }
  onHoveredElement: | #js
    function(el) {
      if (this.$refs.context1.isPinned) return;
      this.hoveredElement = el;
    }
  getParentChainUIDs: | #js
    function(vue) {
      const maxChainLength = 4;
      let chain = [];
      let parent = vue;
      while (parent && (chain.length < maxChainLength)) {
        this.$root.vm.registerVue(parent);
        chain.push(parent._uid);
        parent = this.getParentVue(parent);
      }
      chain = chain.reverse();
      return chain;
    }
  getChildChainUIDs: | #js
    function(vue) {
      const children = [];
      const addChildren = (vue) => {
        if (!vue) return;
        this.$root.vm.registerVue(vue);
        for (const child of vue.$children) {
          if (["transition", "transition-group"].includes(child.$options._componentTag)) {
            addChildren(child);
            continue;
          }
          children.push(child._uid);
        }
      };
      addChildren(vue);
      return children;
    }
  getParentVue: | #js
    function(vue) {
      return this.getVueFromVnode(vue.$parent);
    }
  getVueFromElement: | #js
    function(el) {
      return this.getVueFromVnode(this.getVnodeFromElement(el));
    }
  getVnodeFromElement: | #js
    function(el) {
      if (!el) return null;
      if (el.__vue__) return el.__vue__;
      return this.getVnodeFromElement(el.parentElement);
    }
  getVueFromVnode: | #js
    // Skip vnodes like <keep-alive>, <transition>, etc.
    function(vnode) {
      if (!vnode) return null;
      if (this.vNodeIsVue(vnode)) return vnode;
      return this.getVueFromVnode(vnode.$parent);
    }
  vNodeIsVue: | #js
    function(vnode) {
      if ([`transition`, `transition-group`, `keep-alive`].includes(vnode.$options._componentTag)) return false;
      return true;
    }
  updateChains: | #js
    function(vue) {
      this.$root.vm.registerVue(vue);
      this.parentChainUIDs = this.getParentChainUIDs(vue);
      this.childChainUIDs = this.getChildChainUIDs(vue);
    }
computed:
  activeVueUID: | #js
    function() {
      return this.hoveredVueUID || this.selectedVueUID;
    }
watch:
  hoveredElement: | #js
    function(newEl, oldEl) {
      const vue = this.getVueFromElement(newEl);
      this.hoveredVueUID = vue?._uid;
      this.updateChains(vue);
    }
  hoveredVueUID:
    handler: | #js
      function(newVueUID, oldVueUID) {
        if (oldVueUID) this.$root.vm.getVue(oldVueUID)?.$el.classList?.remove(`highlighted2`);
        if (this.showPicker)
        {
          if (newVueUID) this.$root.vm.getVue(newVueUID)?.$el.classList?.add(`highlighted2`);
        }
      }
    immediate: true
  showPicker:
    handler: | #js
      function(visible) {
        if (visible)
        {
          if (this.hoveredVueUID) this.$root.vm.getVue(this.hoveredVueUID)?.$el.classList?.add(`highlighted2`);
        }
        else
        {
          if (this.hoveredVueUID) this.$root.vm.getVue(this.hoveredVueUID)?.$el.classList?.remove(`highlighted2`);
        }
      }
    immediate: true
  selectedVueUID:
    handler: | #js
      function(newVueUID, oldVueUID) {
        const vue = this.$root.vm.getVue(newVueUID);
        this.updateChains(vue);
      }
    immediate: true
style:
  div:
    font-family: monospace
  .parent-chain: null
  .parent-chain > :nth-child(1):
    margin-left: 0.5em
  .parent-chain > :nth-child(2):
    margin-left: 1em
  .parent-chain > :nth-child(3):
    margin-left: 1.5em
  .parent-chain > :nth-child(4):
    margin-left: 2em
  .parent-chain > :nth-child(5):
    margin-left: 2.5em
  .child-chain:
    margin-left: 4em
name: ide-component-picker
template: >-
  <div class="comp-ide-component-picker" path="-646340253."><ui-keyboard
  @ctrl="toggleVisibility" path="-646340253.0"></ui-keyboard><ui-mouse
  @hovered-element="onHoveredElement" :global="true"
  path="-646340253.1"></ui-mouse><ui-context-window ref="context1"
  :global="true" :visible="showPicker" icon="ðŸ“¦" :title="getTitle(activeVueUID)"
  @pinned="onPinned" path="-646340253.2"><template v-slot:content
  path="-646340253.2.0"><div class="flex flex-row gap-1"
  path="-646340253.2.0.0"><div class="flex flex-column gap-1"
  path="-646340253.2.0.0.0"><div path="-646340253.2.0.0.0.0"><transition-group
  class="parent-chain" tag="div" name="list2" path="-646340253.2.0.0.0.0.0"><div
  v-for="uid in parentChainUIDs" :key="uid"
  path="-646340253.2.0.0.0.0.0.0"><ide-component-title
  :item="$root.vm.vues[uid]" :class="{ 'selected': uid === selectedVueUID }"
  @mouseenter="onMouseEnterVue(uid)" @mouseleave="onMouseLeaveVue(uid)"
  @click="selectVue(uid)"
  path="-646340253.2.0.0.0.0.0.0.0"></ide-component-title></div></transition-group><transition-group
  class="child-chain" tag="div" name="list2" path="-646340253.2.0.0.0.0.1"><div
  v-for="uid in childChainUIDs" :key="uid"
  path="-646340253.2.0.0.0.0.1.0"><ide-component-title
  :item="$root.vm.vues[uid]" :class="{ 'selected': uid === selectedVueUID }"
  @mouseenter="onMouseEnterVue(uid)" @mouseleave="onMouseLeaveVue(uid)"
  @click="selectVue(uid)"
  path="-646340253.2.0.0.0.0.1.0.0"></ide-component-title></div></transition-group></div><ide-element-inspector
  class="hidden" :element="hoveredElement"
  path="-646340253.2.0.0.0.1"></ide-element-inspector></div><transition
  name="slide-hor" :key="selectedVueUID"
  path="-646340253.2.0.0.1"><ide-component-editor :vue-uid="selectedVueUID"
  path="-646340253.2.0.0.1.0"></ide-component-editor></transition></div></template></ui-context-window></div>
