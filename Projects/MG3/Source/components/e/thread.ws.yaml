dom:
  div: 
    div: 
      transition.group:
        tag: ul
        name: list
        li:
          v-for: (post, index) in visiblePosts
          ':key': post?._id||0
          e.post:
            ':item': post
            @thread-updated: refresh
          .text-center.opacity-30:
            v-if: getHiddenPostsCount(index)
            v-text: '''('' + getHiddenPostsCount(index) + '' posts…)'''
      transition:
        name: slide
        ui.loading:
          v-if: isLoading
      e.post.create:
        ':threadID': thread?._id
        ':threadMedia': dThreadMedia
        @created: reload
      .mt-l2:
        ui.button:
          v-if: $root.isAdmin
          ':text': '''♻ reload'''
          ':click': reload
props:
  threadMedia: null
  teaser: false
data:
  thread: null
  dThreadMedia: null
  key1: 1
  isLoading: false
mounted: | #js
  async function() {
  }
methods:
  getHiddenPostsCount: | #js
    function(index) {
      const post = this.visiblePosts[index];
      const nextPost = this.visiblePosts[index + 1];
      if (!post || !nextPost) return null;
      return (nextPost.index - post.index - 1);
    }
  isRelevantThread: | #js
    function(thread) {
      if (!this.thread) return false;
      if (this.thead._id == thread?._id) return true;
      return false;
    }
  refresh: | #js
    function() {
      this.key1++;
    }
  reload: | #js
    async function() {
      // Get the thread
      this.thread = await this.$root.dbp.threads.select.one(this.thread?._id, this.dThreadMedia?._id);
    }
computed:
  visiblePosts: | #js
    function() {
      if (!this.thread) return [];
      const posts1 = [...this.thread.posts];
      // OP is shown on the left
      posts1.shift();
      if (!this.teaser) return posts1;
      // Thread teaser
      let vPosts = [];
      // Take the first two and the last two posts
      vPosts.push(...posts1.slice(0, 2));
      vPosts.push(...posts1.slice(-2));
      // Make sure there are no duplicates
      vPosts = vPosts.filter((post, index, self) => self.findIndex(p => p._id === post._id) === index);
      // Return
      return vPosts;
    }
watch:
  thread:
    handler: | #js
      function() {
        this.refresh();
      }
  threadMedia:
    handler: | #js
      async function(threadMedia) {
        this.dThreadMedia = threadMedia;
        if (!threadMedia) return;
        if (this.dThreadMedia.instance)
        {
          // This instance may already have a media
          const existingInstanceMedia = await this.$root.dbp.medias.select.byInstance(this.dThreadMedia.instance._id);
          if (existingInstanceMedia)
          {
            this.dThreadMedia = existingInstanceMedia;
          }
          await this.reload();
        }
      }
    immediate: true
style:
  .thread-columns:
    display: grid
    grid-template: 1fr / 1fr 1fr
    gap: 2vw
  ul:
    margin: auto
  li:
    margin-bottom: 1vh
name: e-thread
template: >-
  <div class="comp-e-thread" path="1226205107."><div
  path="1226205107.0"><transition-group tag="ul" name="list"
  path="1226205107.0.0"><li v-for="(post, index) in visiblePosts"
  :key="post?._id||0" path="1226205107.0.0.0"><e-post :item="post"
  @thread-updated="refresh" path="1226205107.0.0.0.0"></e-post><div
  class="text-center opacity-30" v-if="getHiddenPostsCount(index)" v-text="'(' +
  getHiddenPostsCount(index) + ' posts…)'"
  path="1226205107.0.0.0.1"></div></li></transition-group><transition
  name="slide" path="1226205107.0.1"><ui-loading v-if="isLoading"
  path="1226205107.0.1.0"></ui-loading></transition><e-post-create
  :threadID="thread?._id" :threadMedia="dThreadMedia" @created="reload"
  path="1226205107.0.2"></e-post-create><div class="mt-l2"
  path="1226205107.0.3"><ui-button v-if="$root.isAdmin" :text="'♻ reload'"
  :click="reload" path="1226205107.0.3.0"></ui-button></div></div></div>
