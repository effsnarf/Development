dom:
  div:
    transition:
      name: slide
      e.generator.select:
        v-show: '!generator && showGeneratorSelect'
        v-model: generator || tempInstance.generator
        on_input: showGeneratorSelect = false
    .container:
      ':class': layout
      div:
        transition#1:
          name: slide
          e.instance:
            class: '{ clickable: !generator  }'
            v-if: ((layout == 'horizontal') || hasText)
            ':item': tempInstance
            ':key': tempInstance.generator?.generatorID
            ':show-create-post': 'false'
            on_click: showGeneratorSelect = !showGeneratorSelect
      .inputs:
        input#1:
          v-model: tempInstance.text0
          placeholder: top text
          on_focus: onFocus
        input#2:
          v-model: tempInstance.text1
          placeholder: bottom text
          on_focus: onFocus
        transition:
          name: slide
          ui.button:
            v-if: showCreateButton && hasText
            text: create
            ':is-loading': isCreating
            on_click: create
props:
  value: null
  generator: null
  layout: null
  showCreateButton: true
data:
  tempInstance: getNewTempInstance()
  showGeneratorSelect: false
  isCreating: false
methods:
  create: |
    async function() {
      this.isCreating = true;
      try
      {
        const newInstance = await this.$root.dbp.instances.create.one(null, this.tempInstance.generator?._id, null, this.tempInstance.text0, this.tempInstance.text1);
        this.clear();
        this.$emit("instance-created", newInstance);
      }
      finally
      {
        this.isCreating = false;
      }
    }
  clear: |
    function() {
      this.tempInstance.text0 = null;
      this.tempInstance.text1 = null;
    }
  onFocus: |
    function(e) {
      if (!this.tempInstance.generator) this.showGeneratorSelect = true;
    }
  getNewTempInstance: |
    function() {
      return { generator: null, imageID: null, text0: null, text1: null };
    }
computed:
  hasContent: |
    function() {
      return (this.hasGenerator && this.hasText) ? true : false;
    }
  hasGenerator: |
    function() {
      return !!this.tempInstance.generator;
    }
  hasText: |
    function() {
      return !!this.tempInstance.text0 || !!this.tempInstance.text1;
    }
watch:
  value:
    handler: |
      function(newValue) {
        this.tempInstance = newValue || this.getNewTempInstance();
      }
    immediate: true
  generator:
    handler: |
      function(newGenerator) {
        this.tempInstance.generator = newGenerator;
      }
    immediate: true
  tempInstance:
    handler: |
      function(newTempInstance) {
        this.$emit("input", newTempInstance);
      }
    deep: true
  hasContent: |
    function(newHasContent) {
      this.$emit("has-content", newHasContent);
    }
name: e-instance-create
style:
  .container:
    margin-bottom: 2rem
  .horizontal:
    display: grid !important
    grid-template: 1fr / 1fr 3fr
    gap: 1rem
  img:
    margin-bottom: 1rem
  .inputs input:
    text-align: center
    text-transform: uppercase
    padding: 0.3em 0.5em !important
    margin-bottom: 0.5rem
  button:
    display: block
    width: 70%
    margin: 0.5rem auto
template: >-
  <div class="comp-e-instance-create"><transition
  name="slide"><e-generator-select v-show="!generator &amp;&amp;
  showGeneratorSelect" v-model="generator || tempInstance.generator"
  @input="showGeneratorSelect = false"></e-generator-select></transition><div
  class="container" :class="layout"><div><transition name="slide"><e-instance
  class="{ clickable: !generator }" v-if="((layout == 'horizontal') || hasText)"
  :item="tempInstance" :key="tempInstance.generator?.generatorID"
  :show-create-post="false" @click="showGeneratorSelect =
  !showGeneratorSelect"></e-instance></transition></div><div
  class="inputs"><input v-model="tempInstance.text0" placeholder="top text"
  @focus="onFocus"/><input v-model="tempInstance.text1" placeholder="bottom
  text" @focus="onFocus"/><transition name="slide"><ui-button
  v-if="showCreateButton &amp;&amp; hasText" text="create"
  :is-loading="isCreating"
  @click="create"></ui-button></transition></div></div></div>
