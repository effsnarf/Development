dom:
  div:
    ui.text.box:
      type: search
      icon: ðŸ”Ž
      hint: searchâ€¦
      v-model: query
    ui.loading:
      class: absolute-center
      v-if: isLoading
    .grid1:
      ui.image:
        v-for: generator in visibleGenerators
        ':class': '{ selected: (dValue?._id == generator._id) }'
        ':tooltip': generator.displayName
        ':imageID': generator.imageID
        ':key': generator.generatorID
        ':square': 'true'
        @click: () => onClick(generator)
props:
  value: null
  defaultGeneratorID: null
data:
  query: null
  dValue: null
  generators: null
  defaultGenerator: null
  isLoading: false
  generatorsQueue: null
created: |
  async function() {
    this.generatorsQueue = new TaskQueue();
  }
mounted: | #js
  async function() {
    await this.init();
  }
methods:
  search: | #js
    async function(query) {
      if (!this.generatorsQueue) this.generatorsQueue = new TaskQueue();
      this.generatorsQueue.enqueue(async () => {
        try
        {
          this.generators = (await this.getGenerators(query));
        }
        finally
        {
          this.isLoading = false;
        }
      });
    }
  getGenerators: | #js
    async function(query) {
      if (query) return (await this.$root.dbp.generators.select.search(query));
      if (this.defaultGenerator) {
        let gens = (await this.$root.dbp.generators.select.related(this.defaultGenerator?.urlName));
        gens.removeByField("_id", this.defaultGenerator?._id)
        gens.unshift(this.defaultGenerator);
        gens = gens.filter(g => g);
        return gens;
      }
      return (await this.$root.dbp.generators.select.popular());
    }
  init: | #js
    async function () {
      await this.search(this.query);
    }
  onClick: | #js
    function (generator) {
      this.$emit('input', generator)
    }
watch:
  value:
    handler: | #js
      async function(value) {
        this.dValue = value;
      }
    immediate: true
  query:
    handler: | #js
      (async function(query) {
        this.search(query);
      }).debounce(400)
    immediate: true
  query2:
    handler: | #js
      function(query) {
        this.isLoading = true;
      }
  defaultGeneratorID:
    handler: | #js
      async function(defaultGeneratorID) {
        this.defaultGenerator = (!defaultGeneratorID ? null : (await this.$root.dbp.generators.select.one(defaultGeneratorID)));
        if (this.defaultGenerator) {
          await this.init();
          this.$emit('input', this.defaultGenerator);
        }
      }
    immediate: true
computed:
  visibleGenerators: | #js
    function() {
      const gens = [...(this.generators||[])];
      return gens;
    }
  query2: | #js
    function() {
      return this.query;
    }
style:
  .grid1:
    display: flex !important
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.3em !important
  .grid1 > div:
    width: calc(20% - 0.3em)
  .comp-ui-image:
    filter: grayscale(1)
    opacity: 0.5
    cursor: pointer
    transition: 0.3s
  .comp-ui-image:hover:
    filter: grayscale(0)
    opacity: 1
    transition: 0s
name: e-generator-select
template: >-
  <div class="comp-e-generator-select" path="-928114976."><ui-text-box
  type="search" icon="ðŸ”Ž" hint="searchâ€¦" v-model="query"
  path="-928114976.0"></ui-text-box><ui-loading class="absolute-center"
  v-if="isLoading" path="-928114976.1"></ui-loading><div class="grid1"
  path="-928114976.2"><ui-image v-for="generator in visibleGenerators" :class="{
  selected: (dValue?._id == generator._id) }" :tooltip="generator.displayName"
  :imageID="generator.imageID" :key="generator.generatorID" :square="true"
  @click="() =&gt; onClick(generator)"
  path="-928114976.2.0"></ui-image></div></div>
