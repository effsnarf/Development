dom:
  div:
    .flex.justify-around:
      ui.button: 
        ':text': '''✏️ recaption'''
        ':click': toggleRecaption
    transition:
      name: slide
      .mt-l2:
        v-if: showRecaption
        ul:
          class: content-items
          li:
            v-for: item in contentItems.filter(it => it.caption)
            e.media.content.item.recaption:
              ':item': item
        ui.select:
          ':options': '[''✨ start new thread'', ''➕ reply in thread'']'
          type: dropdown
          input-type: index
          v-model: replyInThread
        .flex.justify-between.m-l2:
          ui.button: 
            v-if: $root.isAdmin
            ':text': '''✖️ cancel'''
            ':click': onCancel
          ui.button: 
            v-if: $root.isAdmin
            ':text': '''✔️ post'''
            ':click': create
props:
  media: null
data:
  originalMedia: null
  contentItems: []
  originalContentItems: []
  replyInThread: 1
  showRecaption: false
methods:
  create: | #js
    async function () {
        const threadMedia = (!this.replyInThread ? null : this.media);
        let media = JSON.parse(JSON.stringify(this.media));
        delete media._id;
        const _uid = this.$root.getRandomUniqueID();
        media._uid = _uid;
        media = await this.$root.dbp.medias.create.one(media);
        if (!media) media = await this.$root.dbp.medias.select.one(_uid);
        // Also create a post
        if (threadMedia)
        {
          const post = await this.$root.dbp.posts.create.one(null, threadMedia, null, media);
          this.$emit("thread-updated");
        }
        this.$emit("created", media);
        this.toggleRecaption();
        this.clear();
    }
  clear: | #js
    function () {
      for (const item of this.contentItems) {
        if (item.caption) item.caption.text = this.findOriginalItem(item.id).caption.text;
      }
    }
  onCancel: | #js
    function () {
      this.toggleRecaption();
      this.clear();
    }
  toggleRecaption: | #js
    function () {
      this.showRecaption = !this.showRecaption;
    }
  getContentItems: | #js
    function (item) {
      if (!item?.items) return [];
      const getChildren = (item) => {
        return [...(item.items||[]), ...(item.items?.flatMap(getChildren)||[])];
      }
      return item.items.flatMap(getChildren);
    }
  findOriginalItem: | #js
    function (id) {
      return this.originalContentItems.find(it => it.id === id);
    }
computed: null
watch:
  media:
    handler: | #js
      function (media) {
        this.originalMedia = JSON.parse(JSON.stringify(media));
        this.contentItems = this.getContentItems(media?.content);
        this.originalContentItems = this.getContentItems(this.originalMedia?.content);
      }
    immediate: true
style:
  .comp-e-media-recaption:
    margin: auto
    max-width: 20em
  .content-items li:
    margin-bottom: 0.3vh
  input, select:
    padding: 0.2em !important
name: e-media-recaption
template: >-
  <div class="comp-e-media-recaption" path="-2142476480."><div class="flex
  justify-around" path="-2142476480.0"><ui-button :text="'✏️ recaption'"
  :click="toggleRecaption" path="-2142476480.0.0"></ui-button></div><transition
  name="slide" path="-2142476480.1"><div class="mt-l2" v-if="showRecaption"
  path="-2142476480.1.0"><ul class="content-items" path="-2142476480.1.0.0"><li
  v-for="item in contentItems.filter(it =&gt; it.caption)"
  path="-2142476480.1.0.0.0"><e-media-content-item-recaption :item="item"
  path="-2142476480.1.0.0.0.0"></e-media-content-item-recaption></li></ul><ui-select
  :options="['✨ start new thread', '➕ reply in thread']" type="dropdown"
  input-type="index" v-model="replyInThread"
  path="-2142476480.1.0.1"></ui-select><div class="flex justify-between m-l2"
  path="-2142476480.1.0.2"><ui-button v-if="$root.isAdmin" :text="'✖️ cancel'"
  :click="onCancel" path="-2142476480.1.0.2.0"></ui-button><ui-button
  v-if="$root.isAdmin" :text="'✔️ post'" :click="create"
  path="-2142476480.1.0.2.1"></ui-button></div></div></transition></div>
