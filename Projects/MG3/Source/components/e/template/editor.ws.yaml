dom:
  div:
    v-if: temp
    ':class': getCssClass()
    .div1:
      div:
        ui.tree:
          ':root': temp
          ':initial-expanded': 2
          item-type: e.template.item.icon
          ':get-item': (node) => node
          ':get-children': (node) => node.items
          @node-select: selectedItem = $event
      .div2:
        ui.image.select:
          class: hidden
          ref: imageSelect1
          v-if: (selectedItem?.type=='image')
          v-model: selectedItem.imageID
        e.template.grid.item:
          :item: temp
          @file-drop: (item, files) => onFileDrop(item, files)
        .text-center.mt-l2:
          ui.loading:
            v-if: isCreatingMedia
          ui.button:
            v-if: "!isCreatingMedia"
            ":text": "'✔️ Create'"
            @click: "createMedia"
        div:
          v-if: selectedItem && showPropertyEditor
          ui.section#1:
            :title: "selectedItem.type"
            v-model: showFilters
            :opposite: true
            transition:
              name: slide2
              component#1:
                ref: selectedItemEditor1
                ':is': selectedItemEditorType
                ':item': selectedItem
                @toggle-disabled: toggleDisabled($event)
                :key: selectedItemIndex
          ui.section#2:
            v-if: canApplyEffects(selectedItem)
            title: effects
            v-model: showFilters
            e.template.item.filters:
              ':imageID': selectedItem.imageID
              v-model: selectedItem.filters
              @input: () => onItemChange(selectedItem)
      .help:
        .message:
          video:
            autoplay: true
            muted: true
            loop: true
            src: "/video/interface/image/drop.webm"
          div:
            v-text: "'Drop images on boxes to upload.'"
        .message:
          video:
            autoplay: true
            muted: true
            loop: true
            src: "/video/interface/image/move.webm"
          div:
            v-text: "'Drag images inside boxes to move.'"
        .message:
          video:
            autoplay: true
            muted: true
            loop: true
            src: "/video/interface/image/scale.webm"
          div:
            v-text: "'Ctrl-drag images inside boxes to resize.'"
        .message:
          class: large-video
          video:
            autoplay: true
            muted: true
            loop: true
            src: "/video/interface/image/visible.webm"
          div:
            v-text: "'Toggle image visibility using the tree on the left.'"
        .message:
          class: large-video
          video:
            autoplay: true
            muted: true
            loop: true
            src: "/video/interface/image/rotate.webm"
          div:
            v-text: "'If less than 4 images are visible, click the title (Body, Hair..) to change the layout.'"
props:
  temp: null
  showPropertyEditor: true
data:
  selectedItemIndex: 0
  disabled: 0
  showFilters: false
  isCreatingMedia: false
mounted: | #js
  async function() {
    await this.init();
  }
methods:
  init: | #js
    async function() {
    }
  onFileDrop: | #js
    async function(item, files) {
      await this.$nextTick();
      if (files.length > 1) return alertify.error('One file at a time, please');
      item.isLoading = true;
      try
      {
        const image = await this.$root.uploadFile(files[0]);
        item.imageID = image._id;
      }
      finally
      {
        item.isLoading = false;
      }
    }
  canApplyEffects: | #js
    function(item) {
      if (!item) return false;
      return item.type === 'image';
    }
  getCssClass: | #js
    function() {
      return {
        disabled: (this.disabled > 0)
      };
    }
  selectItem: | #js
    function(index) {
      this.selectedItemIndex = index;
    }
  onItemChange: | #js
    function(item) {
    }
  getTabClass: | #js
    function(index) {
      return {
        clickable: true,
        'selected': index === this.selectedItemIndex
      };
    }
  toggleDisabled: | #js
    function(disabled) {
      if (disabled) this.disabled++;
      else this.disabled--;
    }
  createMedia: | #js
    async function() {
      this.isCreatingMedia = true;
      try
      {
        let media = { template: this.temp };
        media = await this.$root.dbp.medias.create.one(media);
        console.log(media);
      }
      finally
      {
        this.isCreatingMedia = false;
      }
    }
  eval: | #js
    function(s) {
      return eval(s);
    }
computed:
  selectedItem: | #js
    function() {
      return this.temp;
      //return this.temp.items[this.selectedItemIndex];
    }
  selectedItemEditorType: | #js
    function() {
      if (!this.selectedItem) return;
      return `e-template-${this.selectedItem.type}-editor`;
    }
  imageItems: | #js
    function() {
      return this.temp.items.filter(item => item.type === 'image');
    }
name: e-template-editor
style:
  .div1:
    display: grid
    grid-template: 1fr / 1fr 4fr 2fr
    margin-bottom: 5rem
    gap: 1em
  .div1 > div:
    overflow: hidden
  .div2:
    display: flex
    flex-direction: column
    gap: 1em
  .tabs:
    display: flex
    flex-direction: column-reverse
    align-items: end
    justify-content: start
  .tabs input[type="checkbox"]:
    position: relative
    top: 0.1em
    transform: scale(0.7)
  .tabs li:
    transition: 0.3s;  
  .tabs li.selected:
    transform: scale(1.2);
  .layout-layers:
    aspect-ratio: 1 / 1
    overflow: hidden
  .layout-layers .layer:
    position: absolute
    top: 0
    left: 0
    width: 100%
    height: 100%
    pointer-events: none
  .layout-layers .layer .comp-ui-image:
  .layout-vertical:
    border: "2px solid #ffffff60"
    display: flex
    flex-direction: column-reverse
  .layout-vertical .item:
    width: 100%
  .layout-vertical, .layout-vertical .item:
    overflow: hidden
  .item:
    overflow: hidden
  .item.selected, .item.selected:hover:
    background: none !important
  .help .message:
    display: grid
    grid-template: 1fr / 1fr 2fr
    gap: 1em
    text-align: left
  .help video:
    filter: grayscale(1)
  .message.large-video:
    grid-template: 1fr / 1fr
template: >-
  <div class="comp-e-template-editor" v-if="temp" :class="getCssClass()"
  path="-650358312."><div class="div1" path="-650358312.0"><ul class="tabs"
  path="-650358312.0.0"><li v-for="(layer, index) in temp.layers"
  :class="getTabClass(index)" path="-650358312.0.0.0"><div class="flex"
  path="-650358312.0.0.0.0"><ui-checkbox v-model="layer.visible"
  path="-650358312.0.0.0.0.0"></ui-checkbox><e-template-layer-icon
  :layer="layer" @click="selectLayer(index)"
  path="-650358312.0.0.0.0.1"></e-template-layer-icon></div></li></ul><div
  class="div2" path="-650358312.0.1"><ui-movable v-model="temp.layers[1].trans"
  path="-650358312.0.1.0"><ui-file-dropzone @file-drop="(files) =&gt;
  onFileDrop(files)" path="-650358312.0.1.0.0"><div class="layers"
  path="-650358312.0.1.0.0.0"><component v-for="layer in temp.layers"
  :class="getLayerClass(layer)" :is="getLayerType(layer)" :item="layer"
  @image-load="(src) =&gt; onLayerImageLoad(layer, src)"
  path="-650358312.0.1.0.0.0.0"></component></div></ui-file-dropzone></ui-movable><transition
  name="slide" path="-650358312.0.1.1"><component ref="selectedLayerEditor1"
  :is="selectedLayerEditorType" :item="selectedLayer"
  @toggle-disabled="toggleDisabled($event)"
  path="-650358312.0.1.1.0"></component></transition><e-template-layer-filters
  :imageID="selectedLayer.imageID" v-model="selectedLayer.filters"
  path="-650358312.0.1.2"></e-template-layer-filters></div></div></div>
