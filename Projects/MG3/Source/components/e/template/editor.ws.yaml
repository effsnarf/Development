dom:
  div:
    v-if: temp
    ':class': getCssClass()
    .div1:
      ul:
        class: tabs
        li:
          v-for: (layer, index) in temp.layers
          ':class': getTabClass(index)
          .flex:
            ui.checkbox:
              v-model: layer.visible
            e.template.layer.icon:
              ':layer': layer
              @click: selectLayer(index)
      .div2:
        ui.file.dropzone:
          @file-drop: (files) => onFileDrop(files)
          .layers:
            component#2:
              v-for: layer in temp.layers
              ':class': getLayerClass(layer)
              ':style': getLayerStyle(layer)
              ':is': getLayerType(layer)
              ':item': layer
              @image-load: (src) => onLayerImageLoad(layer, src)
              @drag-by: ({ dx, dy }) => onLayerDragBy(layer, dx, dy)
              @scale-by: (ds) => onLayerScaleBy(layer, ds)
        ui.section#1:
          :title: "selectedLayer.type"
          v-model: showFilters
          :opposite: true
          transition:
            name: slide2
            component#1:
              ref: selectedLayerEditor1
              ':is': selectedLayerEditorType
              ':item': selectedLayer
              @toggle-disabled: toggleDisabled($event)
              :key: selectedLayerIndex
        ui.section#2:
          title: effects
          v-model: showFilters
          e.template.layer.filters:
            ':imageID': selectedLayer.imageID
            v-model: selectedLayer.filters
            @input: () => onLayerChange(selectedLayer)
props: null
data:
  temp: null
  selectedLayerIndex: 0
  disabled: 0
  showFilters: false
  layersKey: 1
mounted: | #js
  async function() {
    await this.init();
  }
methods:
  init: | #js
    async function() {
      const filters = {
          blur: null,
          transparent: null,
          grayscale: null
        };

      this.temp = {
        layers: []
      };

      this.temp.layers.add({
        "type": "rainbow",
        "visible": true,
        "pattern": "pizza",
        "colors": [
            "#000000",
            "#800000",
            "#e1d441",
            "#6495ED",
            "#87CEEB",
            "#B0E0E6"
        ],
        "colorsCount": 3,
        "slices": "6",
        filters: {...filters}
      });
      this.temp.layers.add({
        "type": "image",
        "visible": true,
        "imageID": 679668891,
        "removeBackground": true,
        "trans": {
            "pos": {
                "x": 0.5,
                "y": 0.5
            },
            "scale": 0.9
        },
        shadow: {
          x: -0.1,
          y: 0.1,
          blur: 0.01,
          color: '#000000',
          opacity: 1
        },
        filters: {...filters}
      });
      this.temp.layers.add({
        type: 'captions',
        visible: true,
        texts: ['why are you so quiet', 'anon?'],
        filters: {...filters}
      });
    }
  getCssClass: | #js
    function() {
      return {
        disabled: (this.disabled > 0)
      };
    }
  getLayerStyle: | #js
    function(layer) {
      if (!layer) return;
      let style = {};
      const { filters } = layer;
      const cssFilters = [];
      if (filters.blur) cssFilters.push(`blur(${filters.blur*10}px)`);
      if (filters.transparent) cssFilters.push(`opacity(${1-filters.transparent})`);
      if (filters.grayscale) cssFilters.push(`grayscale(${filters.grayscale})`);
      style.filter = cssFilters.join(' ');
      return style;
    }
  selectLayer: | #js
    function(index) {
      this.selectedLayerIndex = index;
    }
  onFileDrop: | #js
    async function(files) {
      // If there is only one image layer
      if (this.imageLayers.length == 1)
      {
        // Select the image layer
        this.selectedLayerIndex = this.temp.layers.findIndex(layer => layer.type == 'image');
        // Drop the files
        await this.$nextTick();
        this.$refs.selectedLayerEditor1.onFileDrop(files);
      }
      if (this.imageLayers.length > 1)
      {
        alertify.error("There is more than one image layer.<br />Please select the image layer first.").delay(10);
      }
    }
  onLayerChange: | #js
    function(layer) {
    }
  onLayerImageLoad: | #js
    function(layer, src) {
      const handler = this.$refs.selectedLayerEditor1?.onLayerImageLoad;
      if (handler) handler(src);
    }
  onLayerDragBy: | #js
    function(layer, dx, dy) {
      this.$refs.selectedLayerEditor1.onLayerDragBy({ dx, dy });
    }
  onLayerScaleBy: | #js
    function(layer, ds) {
      this.$refs.selectedLayerEditor1.onLayerScaleBy(ds);
    }
  getLayerType: | #js
    function(layer) {
      return `e-template-${layer.type}-layer`;
    }
  getTabClass: | #js
    function(index) {
      return {
        clickable: true,
        'selected': index === this.selectedLayerIndex
      };
    }
  getLayerClass: | #js
    function(layer) {
      return {
        'layer': true,
        'selected': (layer === this.selectedLayer),
        'hidden': !layer.visible
      };
    }
  toggleDisabled: | #js
    function(disabled) {
      if (disabled) this.disabled++;
      else this.disabled--;
    }
computed:
  selectedLayer: | #js
    function() {
      return this.temp.layers[this.selectedLayerIndex];
    }
  selectedLayerEditorType: | #js
    function() {
      if (!this.selectedLayer) return;
      return `e-template-${this.selectedLayer.type}-editor`;
    }
  imageLayers: | #js
    function() {
      return this.temp.layers.filter(layer => layer.type === 'image');
    }
name: e-template-editor
style:
  .div1:
    display: grid
    grid-template: 1fr / 3.7em 1fr
    margin-bottom: 5rem
    gap: 1em
  .div2:
    display: flex
    flex-direction: column
    gap: 1em
  .tabs:
    display: flex
    flex-direction: column-reverse
    align-items: end;
    justify-content: start;
  .tabs input[type="checkbox"]:
    position: relative
    top: 0.1em
    transform: scale(0.7)
  .layers:
    aspect-ratio: 1 / 1
    overflow: hidden
  .layer:
    position: absolute
    top: 0
    left: 0
    width: 100%
    height: 100%
    pointer-events: none
  .layer.selected, .layer.selected:hover:
    background: none !important
    pointer-events: auto
template: >-
  <div class="comp-e-template-editor" v-if="temp" :class="getCssClass()"
  path="-650358312."><div class="div1" path="-650358312.0"><ul class="tabs"
  path="-650358312.0.0"><li v-for="(layer, index) in temp.layers"
  :class="getTabClass(index)" path="-650358312.0.0.0"><div class="flex"
  path="-650358312.0.0.0.0"><ui-checkbox v-model="layer.visible"
  path="-650358312.0.0.0.0.0"></ui-checkbox><e-template-layer-icon
  :layer="layer" @click="selectLayer(index)"
  path="-650358312.0.0.0.0.1"></e-template-layer-icon></div></li></ul><div
  class="div2" path="-650358312.0.1"><ui-movable v-model="temp.layers[1].trans"
  path="-650358312.0.1.0"><ui-file-dropzone @file-drop="(files) =&gt;
  onFileDrop(files)" path="-650358312.0.1.0.0"><div class="layers"
  path="-650358312.0.1.0.0.0"><component v-for="layer in temp.layers"
  :class="getLayerClass(layer)" :is="getLayerType(layer)" :item="layer"
  @image-load="(src) =&gt; onLayerImageLoad(layer, src)"
  path="-650358312.0.1.0.0.0.0"></component></div></ui-file-dropzone></ui-movable><transition
  name="slide" path="-650358312.0.1.1"><component ref="selectedLayerEditor1"
  :is="selectedLayerEditorType" :item="selectedLayer"
  @toggle-disabled="toggleDisabled($event)"
  path="-650358312.0.1.1.0"></component></transition><e-template-layer-filters
  :imageID="selectedLayer.imageID" v-model="selectedLayer.filters"
  path="-650358312.0.1.2"></e-template-layer-filters></div></div></div>
