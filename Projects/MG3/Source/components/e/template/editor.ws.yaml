dom:
  div:
    v-if: temp
    ':class': getCssClass()
    .div1:
      div:
        ui.tree:
          ':root': temp
          ':initial-expanded': 1
          item-type: e.template.item.icon
          ':get-item': (node) => node
          ':get-children': (node) => node.items
          @node-select: selectedItem = $event
      .div2:
        ui.image.select:
          ref: imageSelect1
          v-if: (selectedItem?.type=='image')
          v-model: selectedItem.imageID
        e.template.container.item:
          :item: temp
        div:
          v-if: selectedItem
          ui.section#1:
            :title: "selectedItem.type"
            v-model: showFilters
            :opposite: true
            transition:
              name: slide2
              component#1:
                ref: selectedItemEditor1
                ':is': selectedItemEditorType
                ':item': selectedItem
                @toggle-disabled: toggleDisabled($event)
                :key: selectedItemIndex
          ui.section#2:
            v-if: (selectedItem?.type!='caption')
            title: effects
            v-model: showFilters
            e.template.item.filters:
              ':imageID': selectedItem.imageID
              v-model: selectedItem.filters
              @input: () => onItemChange(selectedItem)
props: null
data:
  temp: null
  selectedItem: null
  selectedItemIndex: 0
  disabled: 0
  showFilters: false
mounted: | #js
  async function() {
    await this.init();
  }
methods:
  init: | #js
    async function() {
      const filters = {
          blur: null,
          transparent: null,
          grayscale: null
        };

      this.temp = {
        id: this.$root.getUniqueClientID(),
        type: "container",
        visible: true,
        aspectRatio: "1/1",
        layout: "grid-2",
        gap: 0.02,
        items: []
      };

      for (let i = 0; i < 4; i++)
      {
        this.temp.items.add({
          id: this.$root.getUniqueClientID(),
          "type": "container",
          visible: true,
          layout: "grid-2",
          aspectRatio: "1/1",
          caption: {
            visible: true,
            text: ['Body', 'Hair', 'Style', 'Girlfriend'][i],
            font: 'Arial',
            color: 'black',
            align: {
              h: "center",
              v: "bottom"
            },
            uppercase: true,
          },
          filters: {...filters},
          items: []
        });
      }

      if (false)
      {
        this.temp.items.add({
          "type": "rainbow",
          "visible": true,
          "pattern": "pizza",
          "colors": [
              "#000000",
              "#800000",
              "#e1d441",
              "#6495ED",
              "#87CEEB",
              "#B0E0E6"
          ],
          "colorsCount": 3,
          "slices": "6",
          filters: {...filters}
        });
      }

      for (let i = 0; i < 4; i++)
      {
        for (let j = 0; j < 4; j++)
        {
          this.temp.items[i].items.add({
            id: this.$root.getUniqueClientID(),
            type: "image",
            visible: true,
            "imageID": 679668909,
            "removeBackground": false,
            "trans": {
                "pos": {
                    "x": 0.5,
                    "y": 0.5
                },
                "scale": 1
            },
            shadow: {
              x: 0,
              y: 0,
              blur: 0,
              color: '#000000',
              opacity: 1
            },
          });
        }
      }
    }
  onFileDrop: | #js
    async function(files) {
      await this.$nextTick();
    }
  getCssClass: | #js
    function() {
      return {
        disabled: (this.disabled > 0)
      };
    }
  selectItem: | #js
    function(index) {
      this.selectedItemIndex = index;
    }
  onItemChange: | #js
    function(item) {
    }
  getTabClass: | #js
    function(index) {
      return {
        clickable: true,
        'selected': index === this.selectedItemIndex
      };
    }
  toggleDisabled: | #js
    function(disabled) {
      if (disabled) this.disabled++;
      else this.disabled--;
    }
  eval: | #js
    function(s) {
      return eval(s);
    }
computed:
  selectedItem: | #js
    function() {
      return this.temp;
      //return this.temp.items[this.selectedItemIndex];
    }
  selectedItemEditorType: | #js
    function() {
      if (!this.selectedItem) return;
      return `e-template-${this.selectedItem.type}-editor`;
    }
  imageItems: | #js
    function() {
      return this.temp.items.filter(item => item.type === 'image');
    }
name: e-template-editor
style:
  .div1:
    display: grid
    grid-template: 1fr / 10em 1fr
    margin-bottom: 5rem
    gap: 1em
  .div2:
    display: flex
    flex-direction: column
    gap: 1em
  .tabs:
    display: flex
    flex-direction: column-reverse
    align-items: end
    justify-content: start
  .tabs input[type="checkbox"]:
    position: relative
    top: 0.1em
    transform: scale(0.7)
  .tabs li:
    transition: 0.3s;  
  .tabs li.selected:
    transform: scale(1.2);
  .layout-layers:
    aspect-ratio: 1 / 1
    overflow: hidden
  .layout-layers .layer:
    position: absolute
    top: 0
    left: 0
    width: 100%
    height: 100%
    pointer-events: none
  .layout-layers .layer .comp-ui-image:
  .layout-vertical:
    border: "2px solid #ffffff60"
    display: flex
    flex-direction: column-reverse
  .layout-vertical .item:
    width: 100%
  .layout-vertical, .layout-vertical .item:
    overflow: hidden
  .layout-grid-2:
    display: grid
    grid-template: 1fr / 1fr 1fr
  .item:
    overflow: hidden
    pointer-events: none
  .item.selected, .item.selected:hover:
    background: none !important
    pointer-events: auto
template: >-
  <div class="comp-e-template-editor" v-if="temp" :class="getCssClass()"
  path="-650358312."><div class="div1" path="-650358312.0"><ul class="tabs"
  path="-650358312.0.0"><li v-for="(layer, index) in temp.layers"
  :class="getTabClass(index)" path="-650358312.0.0.0"><div class="flex"
  path="-650358312.0.0.0.0"><ui-checkbox v-model="layer.visible"
  path="-650358312.0.0.0.0.0"></ui-checkbox><e-template-layer-icon
  :layer="layer" @click="selectLayer(index)"
  path="-650358312.0.0.0.0.1"></e-template-layer-icon></div></li></ul><div
  class="div2" path="-650358312.0.1"><ui-movable v-model="temp.layers[1].trans"
  path="-650358312.0.1.0"><ui-file-dropzone @file-drop="(files) =&gt;
  onFileDrop(files)" path="-650358312.0.1.0.0"><div class="layers"
  path="-650358312.0.1.0.0.0"><component v-for="layer in temp.layers"
  :class="getLayerClass(layer)" :is="getLayerType(layer)" :item="layer"
  @image-load="(src) =&gt; onLayerImageLoad(layer, src)"
  path="-650358312.0.1.0.0.0.0"></component></div></ui-file-dropzone></ui-movable><transition
  name="slide" path="-650358312.0.1.1"><component ref="selectedLayerEditor1"
  :is="selectedLayerEditorType" :item="selectedLayer"
  @toggle-disabled="toggleDisabled($event)"
  path="-650358312.0.1.1.0"></component></transition><e-template-layer-filters
  :imageID="selectedLayer.imageID" v-model="selectedLayer.filters"
  path="-650358312.0.1.2"></e-template-layer-filters></div></div></div>
