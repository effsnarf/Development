dom:
  div: 
    v-if: temp
    ':class': getCssClass()
    .div1:
      ':style': getStyle()
      div: 
        v-if: showTree
        ui.tree:
          ':root': temp
          ':initial-expanded': 2
          item-type: e.template.item.icon
          ':get-item': (node) => node
          ':get-children': (node) => node.items
          @node-select: onNodeSelect
      .div2:
        ui.image.select:
          class: hidden
          ref: imageSelect1
          v-if: (selectedItem?.type=='image')
          v-model: selectedItem.imageID
        e.template.grid.item:
          ':item': temp
          ':editable': editable
        .flex.justify-around.mt-l2:
          v-if: editable
          ui.button: 
            ':text': '''✖️ cancel'''
            ':click': () => $emit('cancel')
          ui.button: 
            ':text': '''✔️ Create'''
            ':click': createMedia
        div: 
          v-if: selectedItem && showPropertyEditor
          ui.section: 
            ':title': selectedItem.type
            v-model: showFilters
            ':opposite': true
            transition:
              name: slide2
              component:
                ref: selectedItemEditor1
                ':is': selectedItemEditorType
                ':item': selectedItem
                @toggle-disabled: toggleDisabled($event)
                ':key': selectedItemIndex
          ui.section: 
            v-if: canApplyEffects(selectedItem)
            title: effects
            v-model: showFilters
            e.template.item.filters:
              ':imageID': selectedItem.imageID
              v-model: selectedItem.filters
              @input: () => onItemChange(selectedItem)
      .help:
        v-if: editable
        .message: 
          ui.video: 
            src: /video/interface/image/drop.webm
          div: 
            v-text: '''Drop images on boxes to upload.'''
        .message: 
          ui.video: 
            src: /video/interface/image/move.webm
          div: 
            v-text: '''Drag images inside boxes to move.'''
        .message: 
          ui.video: 
            src: /video/interface/image/scale.webm
          div: 
            v-text: '''Ctrl-drag images inside boxes to resize.'''
        .message: 
          v-if: hasMoreThanOneImagePerGrid
          class: large-video
          ui.video: 
            src: /video/interface/image/visible.webm
          div: 
            v-text: '''Toggle image visibility using the tree on the left.'''
        .message: 
          v-if: hasMoreThanOneImagePerGrid
          class: large-video
          ui.video: 
            src: /video/interface/image/rotate.webm
          div: 
            v-text: >-
              'If less than 4 images are visible, click the title (Body, Hair..)
              to change the layout.'
props:
  temp: null
  builder: null
  editable: false
  showPropertyEditor: true
data:
  selectedItemIndex: 0
  disabled: 0
  showFilters: false
mounted: | #js
  async function() {
    await this.init();
  }
methods:
  createMedia: | #js
    async function() {
      try
      {
        let media = this.getMedia(this.temp);
        // Check that [theme] is not empty
        if (media.content.items.some(item => item.caption?.text == '[theme]'))
        {
          alertify.error('Click "[theme]" to edit it.');
          return;
        }
        // Check if all images are empty
        if (media.content.items.every(item => !item.imageID))
        {
          alertify.error('Drop image files from your computer onto boxes to upload.');
          return;
        }
        const _uid = this.$root.getRandomUniqueID();
        media._uid = _uid;
        media = await this.$root.dbp.medias.create.one(media);
        // When POSTing from localhost to db.mg.net, we don't get the response,
        // so we're making another request
        if (!media) media = await this.$root.dbp.medias.select.one(_uid);
        this.$emit('media-created', media);
        await this.$root.navigateTo(media);
      }
      finally
      {
      }
    }
  getMedia: | #js
    function(temp) {
      // Walk the tree and collect caption text and image IDs into an array
      // [{text: 'test', {image: {_id: 1}}, ..]
      let items = [];
      const walk = (node) => {
        const item = {};
        Object.assign(item, node);
        items.push(item);
        if (node.items) node.items.forEach(walk);
      };
      walk(temp);

      items = JSON.parse(JSON.stringify(items));

      const media = {
        created: new Date(),
        builderID: this.builder._id,
        content: { items }
      }

      return media;
    }
  init: | #js
    async function() {
    }
  canApplyEffects: | #js
    function(item) {
      if (!item) return false;
      return item.type === 'image';
    }
  getCssClass: | #js
    function() {
      return {
        disabled: (this.disabled > 0)
      };
    }
  getStyle: | #js
    function() {
      const columns = this.showTree ? [1, 4, 1.5] : this.editable ? [5, 1.5] : [1];
      return {
        gridTemplate: `1fr / ${columns.map(c => `${c}fr`).join(' ')}`
      };
    }
  selectItem: | #js
    function(index) {
      this.selectedItemIndex = index;
    }
  onNodeSelect: | #js
    function(node) {
      // selectedItem is computed, only the root node
      // When editing specific nodes with the property editor, this would be enabled
      //this.selectedItem = node;
    }
  onItemChange: | #js
    function(item) {
    }
  getTabClass: | #js
    function(index) {
      return {
        clickable: true,
        'selected': index === this.selectedItemIndex
      };
    }
  toggleDisabled: | #js
    function(disabled) {
      if (disabled) this.disabled++;
      else this.disabled--;
    }
  eval: | #js
    function(s) {
      return eval(s);
    }
computed:
  selectedItem: | #js
    function() {
      return this.temp;
      //return this.temp.items[this.selectedItemIndex];
    }
  selectedItemEditorType: | #js
    function() {
      if (!this.selectedItem) return;
      return `e-template-${this.selectedItem.type}-editor`;
    }
  imageItems: | #js
    function() {
      return this.temp.items.filter(item => item.type === 'image');
    }
  showTree: | #js
    function() {
      return this.editable && this.hasMoreThanOneImagePerGrid;
    }
  hasMoreThanOneImagePerGrid: | #js
    function() {
      if (!this.temp) return false;

      const checkNode = (node) => {
        if (node.type != 'grid') return false;
        const imageItems = node.items.filter(item => item.type === 'image');
        if (imageItems.length > 1) return true;
        for (const child of node.items)
        {
          if (checkNode(child)) return true;
        }
        return false;
      }

      return checkNode(this.temp);
    }
watch:
  builder: | #js
    async function(builder) {
      if (!builder) this.temp = null;
    }
name: e-template-editor
style:
  .div1:
    display: grid
    margin-bottom: 5rem
    gap: 1em
  .div1 > div:
    overflow: hidden
  .div2:
    display: flex
    flex-direction: column
    gap: 1em
  .tabs:
    display: flex
    flex-direction: column-reverse
    align-items: end
    justify-content: start
  .tabs input[type="checkbox"]:
    position: relative
    top: 0.1em
    transform: scale(0.7)
  .tabs li:
    transition: 0.3s;
  .tabs li.selected:
    transform: scale(1.2);
  .layout-layers:
    aspect-ratio: 1 / 1
    overflow: hidden
  .layout-layers .layer:
    position: absolute
    top: 0
    left: 0
    width: 100%
    height: 100%
    pointer-events: none
  .layout-layers .layer .comp-ui-image: null
  .layout-vertical:
    border: '2px solid #ffffff60'
    display: flex
    flex-direction: column-reverse
  .layout-vertical .item:
    width: 100%
  .layout-vertical, .layout-vertical .item:
    overflow: hidden
  .item:
    overflow: hidden
  .item.selected, .item.selected:hover:
    background: none !important
  .help:
    margin-top: 4em
  .help .message:
    display: grid
    grid-template: 1fr / 1fr 2fr
    gap: 1em
    text-align: left
  .help video:
    filter: grayscale(1)
  .message.large-video:
    grid-template: 1fr / 1fr
template: >-
  <div class="comp-e-template-editor" v-if="temp" :class="getCssClass()"
  path="-650358312."><div class="div1" :style="getStyle()"
  path="-650358312.0"><div v-if="showTree" path="-650358312.0.0"><ui-tree
  :root="temp" :initial-expanded="2" item-type="e.template.item.icon"
  :get-item="(node) =&gt; node" :get-children="(node) =&gt; node.items"
  @node-select="onNodeSelect" path="-650358312.0.0.0"></ui-tree></div><div
  class="div2" path="-650358312.0.1"><ui-image-select class="hidden"
  ref="imageSelect1" v-if="(selectedItem?.type=='image')"
  v-model="selectedItem.imageID"
  path="-650358312.0.1.0"></ui-image-select><e-template-grid-item :item="temp"
  :editable="editable" path="-650358312.0.1.1"></e-template-grid-item><div
  class="flex justify-around mt-l2" v-if="editable"
  path="-650358312.0.1.2"><ui-button :text="'✖️ cancel'" :click="() =&gt;
  $emit('cancel')" path="-650358312.0.1.2.0"></ui-button><ui-button :text="'✔️
  Create'" :click="createMedia" path="-650358312.0.1.2.1"></ui-button></div><div
  v-if="selectedItem &amp;&amp; showPropertyEditor"
  path="-650358312.0.1.3"><ui-section :title="selectedItem.type"
  v-model="showFilters" :opposite="true" path="-650358312.0.1.3.0"><transition
  name="slide2" path="-650358312.0.1.3.0.0"><component ref="selectedItemEditor1"
  :is="selectedItemEditorType" :item="selectedItem"
  @toggle-disabled="toggleDisabled($event)" :key="selectedItemIndex"
  path="-650358312.0.1.3.0.0.0"></component></transition></ui-section><ui-section
  v-if="canApplyEffects(selectedItem)" title="effects" v-model="showFilters"
  path="-650358312.0.1.3.1"><e-template-item-filters
  :imageID="selectedItem.imageID" v-model="selectedItem.filters" @input="()
  =&gt; onItemChange(selectedItem)"
  path="-650358312.0.1.3.1.0"></e-template-item-filters></ui-section></div></div><div
  class="help" v-if="editable" path="-650358312.0.2"><div class="message"
  path="-650358312.0.2.0"><ui-video src="/video/interface/image/drop.webm"
  path="-650358312.0.2.0.0"></ui-video><div v-text="'Drop images on boxes to
  upload.'" path="-650358312.0.2.0.1"></div></div><div class="message"
  path="-650358312.0.2.1"><ui-video src="/video/interface/image/move.webm"
  path="-650358312.0.2.1.0"></ui-video><div v-text="'Drag images inside boxes to
  move.'" path="-650358312.0.2.1.1"></div></div><div class="message"
  path="-650358312.0.2.2"><ui-video src="/video/interface/image/scale.webm"
  path="-650358312.0.2.2.0"></ui-video><div v-text="'Ctrl-drag images inside
  boxes to resize.'" path="-650358312.0.2.2.1"></div></div><div
  class="large-video message" v-if="hasMoreThanOneImagePerGrid"
  path="-650358312.0.2.3"><ui-video src="/video/interface/image/visible.webm"
  path="-650358312.0.2.3.0"></ui-video><div v-text="'Toggle image visibility
  using the tree on the left.'" path="-650358312.0.2.3.1"></div></div><div
  class="large-video message" v-if="hasMoreThanOneImagePerGrid"
  path="-650358312.0.2.4"><ui-video src="/video/interface/image/rotate.webm"
  path="-650358312.0.2.4.0"></ui-video><div v-text="'If less than 4 images are
  visible, click the title (Body, Hair..) to change the layout.'"
  path="-650358312.0.2.4.1"></div></div></div></div></div>
