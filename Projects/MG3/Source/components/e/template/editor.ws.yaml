dom:
  .m-auto:
    v-if: temp
    ':class': getCssClass()
    .div1:
      ':style': getStyle()
      div: 
        v-if: showTree
        ui.tree:
          ':root': temp
          ':initial-expanded': 2
          item-type: e.template.item.icon
          ':get-item': (node) => node
          ':get-children': (node) => node.items
          @node-select: onNodeSelect
      .div2:
        ui.file.dropzone:
          ':enabled': (editable && hasOnlyOneImage)
          ':show-upload-button': 'false'
          @input: onImageUpload
          ui.movable:
            ':enabled': editable
            @drag-by: >-
              ({ dx, dy }) => getOnlyImageComp()?.onItemDragBy(imageItems[0], {
              dx, dy })
            @scale-by: (ds) => getOnlyImageComp()?.onItemScaleBy(imageItems[0], ds)
            e.template.grid.item:
              class: main-content
              ':temp': temp
              ':item': temp
              ':editable': editable
              @image-load: (item, src) => onItemImageLoad(item, src)
              @image-error: (item, src) => onItemImageError(item, src)
        div: 
          v-if: editable
          e.template.editors:
            ':temp': temp
          .flex.justify-around.mt-l2:
            ui.button: 
              v-if: cancel
              ':text': '''✖️ cancel'''
              ':click': cancel
            ui.button: 
              ':text': '''✔️ create'''
              ':click': createMedia
        div: 
          v-if: selectedItem && showPropertyEditor
          ui.section: 
            ':title': selectedItem.type
            v-model: showFilters
            ':opposite': true
            transition:
              name: slide2
              component:
                ref: selectedItemEditor1
                ':is': selectedItemEditorType
                ':item': selectedItem
                @toggle-disabled: toggleDisabled($event)
                ':key': selectedItemIndex
          ui.section: 
            v-if: canApplyEffects(selectedItem)
            title: effects
            v-model: showFilters
            e.template.item.filters:
              ':imageID': selectedItem.imageID
              v-model: selectedItem.filters
              @input: () => onItemChange(selectedItem)
      e.template.help:
        v-if: editable && showHelp
        ':show-visibility-help': hasMoreThanOneImagePerGrid
props:
  temp: null
  builder: null
  editable: false
  showPropertyEditor: true
  showHelp: true
  mediaCreated: null
  cancel: null
data:
  emptyTemp: null
  selectedItemIndex: 0
  disabled: 0
  showFilters: false
mounted: | #js
  async function() {
    await this.init();
  }
methods:
  createMedia: | #js
    async function() {
      try
      {
        let media = this.getMedia(this.temp);
        const mediaGeneratorContent = { item: this.withoutDefaultValues(this.emptyTemp) };

        if (false)
        {
          // Check that [title] is not empty
          if (media.content.items.some(item => item.caption?.text == '[title]'))
          {
            alertify.error('Click "[title]" to edit it.');
            return;
          }
          // Check if all images are empty
          if (media.content.items.every(item => !item.imageID))
          {
            alertify.error('Drop image files from your computer onto boxes to upload.');
            return;
          }
        }

        media = await this.$root.dbp.medias.create.one(media, mediaGeneratorContent);
        if (this.mediaCreated) await this.mediaCreated(media);
      }
      finally
      {
      }
    }
  getMedia: | #js
    function(temp) {
      const item = Objects.subtract(temp, this.emptyTemp);

      const media = {
        created: new Date(),
        type: "builder",
        builderID: this.builder._id,
        content: { item }
      }

      return media;
    }
  withoutDefaultValues: | #js
    function(item, key) {
      if (!item) return null;
      if (Array.isArray(item)) {
        if (item.length == 0) return [];
        if (typeof(item[0]) != "object") return item;
        return item.map(child => this.withoutDefaultValues(child));
      }

      item = JSON.parse(JSON.stringify(item));

      const allDefaults = {
        grid: {
          type: null,
          visible: true,
          grid: null,
          gap: 0.02,
          aspectRatio: null,
          caption: null,
        },
        image: {
          type: null,
          visible: true,
          imageID: null,
          removeBackground: false,
          shadow: {
            blur: 0,
            color: "#000000",
            opacity: 1,
            x: 0,
            y: 0
          },
          trans: {
            pos: {
              x: 0.5,
              y: 0.5
            },
            scale: 1,
          },
          caption: null,
        },
        caption: {
          type: "caption",
          visible: true,
          text: "",
          uppercase: false,
          font: "Arial",
          editable: true,
          color: "white",
          align: null
        }
      };

      const defaults = allDefaults[key||item.type];

      for (const key of Object.keys(item))
      {
        if (key == "items") continue;
        if (defaults && (!(key in defaults))) delete item[key];
        if (item[key] == null) delete item[key];
        if (item[key] == {}) delete item[key];
        if (defaults && Objects.areEqual(item[key], defaults[key])) delete item[key];
        if (Object.keys(allDefaults).includes(key)) {
          item[key] = this.withoutDefaultValues(item[key], key);
          if (item[key] == null) delete item[key];
        }
      }

      if (item.items) item.items = item.items.map(child => this.withoutDefaultValues(child));

      return item;
    }
  init: | #js
    async function() {
    }
  onItemImageLoad: | #js
    function(item, src) {
      const comps = this.findComponents(item)
        .filter(c => c.onItemImageLoad);
      comps.forEach(c => c.onItemImageLoad(src));
    }
  onItemImageError: | #js
    function(item, src) {
      const comps = this.findComponents(item)
        .filter(c => c.onItemImageError);
      comps.forEach(c => c.onItemImageError(src));
    }
  onImageUpload: | #js
    function(imageID) {
      if (!this.hasOnlyOneImage) return;
      this.imageItems[0].imageID = imageID;
    }
  findComponents: | #js
    function(item) {
      if (!item) return null;
      return vueApp.vm.getDescendants(this, (c) => c.$props.item==item);
    }
  getOnlyImageComp: | #js
    function() {
      if (!this.hasOnlyOneImage) return;
      return vueApp.vm.getDescendants(this, (c) => c.$data._?.comp?.name=="e.template.image.item")[0];
    }
  canApplyEffects: | #js
    function(item) {
      if (!item) return false;
      return item.type === 'image';
    }
  getCssClass: | #js
    function() {
      return {
        disabled: (this.disabled > 0)
      };
    }
  getStyle: | #js
    function() {
      const columns = this.showTree ? ["1fr", "4fr", "1.5fr"] : (this.editable && this.showHelp) ? ["1fr", "15em"] : ["1fr"];
      return {
        gridTemplate: `1fr / ${columns.map(c => `${c}`).join(' ')}`
      };
    }
  selectItem: | #js
    function(index) {
      this.selectedItemIndex = index;
    }
  onNodeSelect: | #js
    function(node) {
      // selectedItem is computed, only the root node
      // When editing specific nodes with the property editor, this would be enabled
      //this.selectedItem = node;
    }
  onItemChange: | #js
    function(item) {
    }
  getTabClass: | #js
    function(index) {
      return {
        clickable: true,
        'selected': index === this.selectedItemIndex
      };
    }
  toggleDisabled: | #js
    function(disabled) {
      if (disabled) this.disabled++;
      else this.disabled--;
    }
  eval: | #js
    function(s) {
      return eval(s);
    }
computed:
  selectedItem: | #js
    function() {
      return this.temp;
      //return this.temp.items[this.selectedItemIndex];
    }
  selectedItemEditorType: | #js
    function() {
      if (!this.selectedItem) return;
      return `e-template-${this.selectedItem.type}-editor`;
    }
  imageItems: | #js
    function() {
      return this.temp?.items?.filter(item => item.type === 'image') || [];
    }
  hasOnlyOneImage: | #js
    function() {
      return this.imageItems.length == 1;
    }
  showTree: | #js
    function() {
      return this.editable && this.hasMoreThanOneImagePerGrid;
    }
  hasMoreThanOneImagePerGrid: | #js
    function() {
      if (!this.temp) return false;

      if (this.temp.gridItems?.width == 1) return false;

      const checkNode = (node) => {
        if (node.type != 'grid') return false;
        const imageItems = node.items.filter(item => item.type === 'image');
        if (imageItems.length > 1) return true;
        for (const child of node.items)
        {
          if (checkNode(child)) return true;
        }
        return false;
      }

      return checkNode(this.temp);
    }
watch:
  builder: | #js
    async function(builder) {
    }
  temp:
    handler: | #js
      function(temp) {
        const emptyTemp = JSON.parse(JSON.stringify(temp));
        Objects.traverse(emptyTemp, (node, key, value) => {
          if (!node) return;
          const caption = (key == "caption") ? node.caption :
            (node.type == "caption") ? node : null;
          if (caption && ("text" in caption) && (caption.editable)) delete caption.text;
        });
        this.emptyTemp = emptyTemp;
      }
    immediate: true
name: e-template-editor
style:
  .div1:
    display: grid
    gap: 1em
  .div1 > div:
    overflow: hidden
  .div2:
    display: flex
    flex-direction: column
    gap: 1em
  .tabs:
    display: flex
    flex-direction: column-reverse
    align-items: end
    justify-content: start
  .tabs input[type="checkbox"]:
    position: relative
    top: 0.1em
    transform: scale(0.7)
  .tabs li:
    transition: 0.3s;
  .tabs li.selected:
    transform: scale(1.2);
  .layout-layers:
    aspect-ratio: 1 / 1
    overflow: hidden
  .layout-layers .layer:
    position: absolute
    top: 0
    left: 0
    width: 100%
    height: 100%
    pointer-events: none
  .layout-layers .layer .comp-ui-image: null
  .layout-vertical:
    border: '2px solid #ffffff60'
    display: flex
    flex-direction: column-reverse
  .layout-vertical .item:
    width: 100%
  .layout-vertical, .layout-vertical .item:
    overflow: hidden
  .item:
    overflow: hidden
  .item.selected, .item.selected:hover:
    background: none !important
  .message.large-video:
    grid-template: 1fr / 1fr
_:
  examples:
    count: 0
template: >-
  <div class="comp-e-template-editor m-auto" v-if="temp" :class="getCssClass()"
  path="-650358312."><div class="div1" :style="getStyle()"
  path="-650358312.0"><div v-if="showTree" path="-650358312.0.0"><ui-tree
  :root="temp" :initial-expanded="2" item-type="e.template.item.icon"
  :get-item="(node) =&gt; node" :get-children="(node) =&gt; node.items"
  @node-select="onNodeSelect" path="-650358312.0.0.0"></ui-tree></div><div
  class="div2" path="-650358312.0.1"><ui-file-dropzone :enabled="(editable
  &amp;&amp; hasOnlyOneImage)" :show-upload-button="false"
  @input="onImageUpload" path="-650358312.0.1.0"><ui-movable :enabled="editable"
  @drag-by="({ dx, dy }) =&gt; getOnlyImageComp()?.onItemDragBy(imageItems[0], {
  dx, dy })" @scale-by="(ds) =&gt;
  getOnlyImageComp()?.onItemScaleBy(imageItems[0], ds)"
  path="-650358312.0.1.0.0"><e-template-grid-item class="main-content"
  :temp="temp" :item="temp" :editable="editable" @image-load="(item, src) =&gt;
  onItemImageLoad(item, src)" @image-error="(item, src) =&gt;
  onItemImageError(item, src)"
  path="-650358312.0.1.0.0.0"></e-template-grid-item></ui-movable></ui-file-dropzone><div
  v-if="editable" path="-650358312.0.1.1"><e-template-editors :temp="temp"
  path="-650358312.0.1.1.0"></e-template-editors><div class="flex justify-around
  mt-l2" path="-650358312.0.1.1.1"><ui-button v-if="cancel" :text="'✖️ cancel'"
  :click="cancel" path="-650358312.0.1.1.1.0"></ui-button><ui-button :text="'✔️
  create'" :click="createMedia"
  path="-650358312.0.1.1.1.1"></ui-button></div></div><div v-if="selectedItem
  &amp;&amp; showPropertyEditor" path="-650358312.0.1.2"><ui-section
  :title="selectedItem.type" v-model="showFilters" :opposite="true"
  path="-650358312.0.1.2.0"><transition name="slide2"
  path="-650358312.0.1.2.0.0"><component ref="selectedItemEditor1"
  :is="selectedItemEditorType" :item="selectedItem"
  @toggle-disabled="toggleDisabled($event)" :key="selectedItemIndex"
  path="-650358312.0.1.2.0.0.0"></component></transition></ui-section><ui-section
  v-if="canApplyEffects(selectedItem)" title="effects" v-model="showFilters"
  path="-650358312.0.1.2.1"><e-template-item-filters
  :imageID="selectedItem.imageID" v-model="selectedItem.filters" @input="()
  =&gt; onItemChange(selectedItem)"
  path="-650358312.0.1.2.1.0"></e-template-item-filters></ui-section></div></div><e-template-help
  v-if="editable &amp;&amp; showHelp"
  :show-visibility-help="hasMoreThanOneImagePerGrid"
  path="-650358312.0.2"></e-template-help></div></div>
