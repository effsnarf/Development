dom:
  div:
    v-if: item
    ui.file.dropzone:
      ':enabled': editable
      v-model: item.imageID
      ui.movable:
        ':enabled': editable
        @drag-by: ({ dx, dy }) => onItemDragBy(item, { dx, dy })
        @scale-by: (ds) => onItemScaleBy(item, ds)
        ui.image:
          ref: image1
          v-if: item
          ':style': getStyle(item)
          ':imageID': item.imageID
          ':remove-background': item.removeBackground
          @load: onImageLoad
          @error: onImageError
          @change: refresh
    e.template.caption.item:
      v-if: item.caption
      ':temp': temp
      ':item': item.caption
      ':editable': editable
props:
  temp: null
  item: null
  editable: false
mounted: | #js
  async function () {
  }
methods:
  onItemDragBy: | #js
    function(item, dpos) {
      const pos = item.trans.pos;
      pos.x += dpos.dx;
      pos.y += dpos.dy;
    }
  onItemScaleBy: | #js
    function(item, ds) {
      item.trans.scale += ds;
    }
  onImageLoad: | #js
    function(src) {
      this.$emit('image-load', this.item, src);
    }
  onImageError: | #js
    function(src) {
      this.$emit('image-error', this.item, src);
    }
  refresh: | #js
    function() {
    }
  getStyle: | #js
    function(item) {
      if (!item) return;
      let style = {};
      style.transform = `translate(${(-0.5 + item.trans.pos.x) * 100}%, ${(-0.5 + item.trans.pos.y) * 100}%) scale(${item.trans.scale})`;
      const cssFilters = [];
      const image1 = this.$refs.image1;
      if (image1 && item.shadow)
      {
        // Apply the opacity to the shadow color
        const color = item.shadow.color.replace(/#(..)(..)(..)/, (match, r, g, b) => {
          const opacity = Math.round(item.shadow.opacity*255).toString(16);
          return `#${r}${g}${b}${opacity}`;
        });
        const values = {
          x: (item.shadow.x*image1.width).toFixed(2),
          y: (item.shadow.y*image1.height).toFixed(2),
          blur: item.shadow.blur/20*image1.diagonal.toFixed(2),
          color: color
        };
        const dropShadow = `drop-shadow(${values.x}px ${values.y}px ${values.blur}px ${values.color})`;
        cssFilters.push(dropShadow);
      }
      style.filter = cssFilters.join(' ');
      return style;
    }
watch:
  item:
    handler: | #js
      async function(item) {
      }
    deep: true
style:
  .comp-e-template-image-item:
    border: 1px solid gray
  .comp-e-template-caption-item:
    position: absolute
    top: 0
    width: 100%
    height: 100%
    pointer-events: none
name: e-template-image-item
_:
  examples:
    count: 0
template: >-
  <div class="comp-e-template-image-item" v-if="item"
  path="1623568049."><ui-file-dropzone :enabled="editable"
  v-model="item.imageID" path="1623568049.0"><ui-movable :enabled="editable"
  @drag-by="({ dx, dy }) =&gt; onItemDragBy(item, { dx, dy })" @scale-by="(ds)
  =&gt; onItemScaleBy(item, ds)" path="1623568049.0.0"><ui-image ref="image1"
  v-if="item" :style="getStyle(item)" :imageID="item.imageID"
  :remove-background="item.removeBackground" @load="onImageLoad"
  @error="onImageError" @change="refresh"
  path="1623568049.0.0.0"></ui-image></ui-movable></ui-file-dropzone><e-template-caption-item
  v-if="item.caption" :temp="temp" :item="item.caption" :editable="editable"
  path="1623568049.1"></e-template-caption-item></div>
