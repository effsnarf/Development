dom:
  ui.track.size:
    v-if: item
    div: 
      ':class': '''flex caption-layout-'' + item.caption?.align.v'
      @input: onSizeChange
      div: 
        ':key': key1
        ':class': >-
          'items container grid' + ' grid-items-' + gridWidth + ' items-' +
          getVisibleItemsCount(item.items) + ' rotation-' + item.rotation
        ':style': getMainStyle(item)
        component:
          v-for: item in item.items
          ':key': item.id
          v-if: item.visible
          ':editable': editable
          ':class': getItemClass(item)
          ':style': getItemStyle(item)
          ':is': getItemType(item)
          ':item': item
          @image-load: (src) => onItemImageLoad(item, src)
          @file-drop: (item, files) => $emit('file-drop', item, files)
      e.template.caption.item:
        v-if: item.caption
        ':editable': editable
        ':item': item.caption
        @click: toggleRotation(item)
props:
  item: null
  editable: false
data:
  size: null
  mainStyle: null
  key1: 1
methods:
  getMainStyle: | #js
    function(item) {
      if (!item) return {};
      const style = {};
      //if (item.layout == 'layers') style.aspectRatio = eval(item.aspectRatio);
      const gap = 0.02; // item.gap;
      if ((this.size) && (gap)) style.gap = `${Math.round(gap * this.size.diagonal)}px`;
      return style;
    }
  getItemClass: | #js
    function(item) {
      return {
        'item': true,
        'selected': (item === this.selectedItem),
      };
    }
  getItemStyle: | #js
    function(item) {
      if (!item) return;
      let style = {};
      const { filters } = item;
      const cssFilters = [];
      if (filters)
      {
        if (filters.blur) cssFilters.push(`blur(${filters.blur*10}px)`);
        if (filters.transparent) cssFilters.push(`opacity(${1-filters.transparent})`);
        if (filters.grayscale) cssFilters.push(`grayscale(${filters.grayscale})`);
      }
      style.filter = cssFilters.join(' ');
      //if (this.item.layout != 'layers')
      style.aspectRatio = eval(this.item.aspectRatio);
      return style;
    }
  getItemType: | #js
    function(item) {
      return `e-template-${item.type}-item`;
    }
  onItemImageLoad: | #js
    function(item, src) {
      const handler = this.$refs.selectedItemEditor1?.onItemImageLoad;
      if (handler) handler(src);
    }
  onSizeChange: | #js
    function(size) {
      this.size = size;
      //this.refresh();
      //this.mainStyle = this.getMainStyle(this.item);
    }
  toggleRotation: | #js
    function(item) {
      item.rotation = ((item.rotation||0) + 1) % 2;
      this.refresh();
    }
  getVisibleItemsCount: | #js
    function(items) {
      if (!items) return 0;
      return items.filter(item => item.visible).length;
    }
  refresh: | #js
    function() {
      this.key1++;
    }
computed:
  gridWidth: | #js
    function() {
      return (this.item?.grid?.width || this.item?.items.length);
    }
watch: null
style:
  div:
    transition: 0s !important
  .caption-layout-top:
    flex-direction: column-reverse
  .caption-layout-bottom:
    flex-direction: column
  .container:
    gap: 0.5em
  .items:
    width: 100%
  .items .item:
    background: '#ffffff20'
  .grid-items-3, .grid-items-6, .grid-items-9:
    grid-template: 1fr / 1fr 1fr 1fr
  .grid-items-4.items-2.rotation-1:
    grid-template: 1fr / 1fr 1fr
  .grid-items-4.items-2.rotation-1 > div:
    aspect-ratio: 1 / 2.05 !important
    grid-row: 1 / span 2
  .grid-items-4.items-2 > div:
    grid-column: auto !important
  .grid-items-4.items-2.rotation-1 div: null
  .grid-items-4.items-3:
    grid-template: 1fr / 1fr 1fr
  .grid-items-4.items-3 > div:nth-child(1), .items-2 > div:
    aspect-ratio: 2.05 / 1 !important
    grid-column: 1 / span 2
  .grid-items-4.items-3.rotation-1 > div:nth-child(1):
    aspect-ratio: 1 / 2.1 !important
    grid-column: 1
    grid-row: 1 / span 2
  .items-4:
    grid-template: 1fr / 1fr 1fr
  img.empty:
    height: 100%
name: e-template-grid-item
template: >-
  <ui-track-size class="comp-e-template-grid-item" v-if="item"
  path="-1435649936."><div :class="'flex caption-layout-' +
  item.caption?.align.v" @input="onSizeChange" path="-1435649936.0"><div
  :key="key1" :class="'items container grid' + ' grid-items-' + gridWidth + '
  items-' + getVisibleItemsCount(item.items) + ' rotation-' + item.rotation"
  :style="getMainStyle(item)" path="-1435649936.0.0"><component v-for="item in
  item.items" :key="item.id" v-if="item.visible" :editable="editable"
  :class="getItemClass(item)" :style="getItemStyle(item)"
  :is="getItemType(item)" :item="item" @image-load="(src) =&gt;
  onItemImageLoad(item, src)" @file-drop="(item, files) =&gt; $emit('file-drop',
  item, files)"
  path="-1435649936.0.0.0"></component></div><e-template-caption-item
  v-if="item.caption" :editable="editable" :item="item.caption"
  @click="toggleRotation(item)"
  path="-1435649936.0.1"></e-template-caption-item></div></ui-track-size>
