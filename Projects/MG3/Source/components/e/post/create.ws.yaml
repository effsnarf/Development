dom:
  .container.flex.ver.gap-1:
    v-disable: isLoading
    transition: 
      name: slide
      div: 
        v-show: showCreateMedia
        e.media.create:
          class: mt-l1
          ref: createMedia1
          v-model: media
          @change: toggleShowCreateMedia
    transition: 
      name: slide
      div: 
        ui.file.dropzone:
          @input: onImageUpload
          e.comment.create:
            v-model: text
            ':media': media
            ':new-thread': 'false'
            @click-media-preview: toggleShowCreateMedia
    div:
      transition: 
        name: slide
        .flex.justify-around:
          transition: 
            name: slide
            ui.button: 
              class: ml-2
              v-if: media
              ':text': '''✖'''
              ':click': onClearMedia
          transition: 
            name: slide
            ui.button: 
              v-if: canPost
              text: ✔️ post
              ':click': post
props:
  threadID: null
  threadMediaID: null
  generator: null
data:
  media: null
  text: null
  showCreateMedia: false
  isLoading: false
mounted: | #js
  async function() {
  }
methods:
  onImageUpload: | #js
    function(imageID) {
      this.$refs.createMedia1.onImageUpload(imageID);
    }
  onClearMedia: | #js
    function() {
      this.media = null;
      this.showCreateMedia = false;
    }
  toggleShowCreateMedia: | #js
    function() {
      this.showCreateMedia = !this.showCreateMedia;
    }
  post: | #js
    async function() {
      this.isLoading = true;
      try
      {
        const { generator, text0, text1 } = (this.tempInstance || {});
        const instance = !generator ? null : { generatorID: generator.generatorID, text0, text1 };
        const post = await this.$root.dbp.posts.create.one(this.threadID, this.threadMediaID, this.text, this.media);
        this.$emit('created', post);
        setTimeout(this.clear.bind(this), 1000);
      }
      finally
      {
        this.isLoading = false;
      }
    }
  clear: | #js
    async function() {
      this.media = null;
      this.text = null;
      this.showCreateMedia = false;
      this.$refs.createMedia1.clear();
    }
watch:
  postPreview:
    handler: | #js
      function(postPreview) {
        this.$emit('input-preview', postPreview);
      }
    immediate: true
computed:
  postPreview: | #js
    function() {
      return {
        index: 0,
        text: this.text,
      };
    }
  canPost: | #js
    function() {
      if (this.media) return true;
      if (this.text) return true;
      return false;
    }
style:
  .container:
    max-width: 25em
    margin: auto
  h3:
    text-align: center
config:
  track:
    state: true
name: e-post-create
template: >-
  <div class="comp-e-post-create container flex ver gap-1" v-disable="isLoading"
  path="1762525697."><transition name="slide" path="1762525697.0"><div
  v-show="showCreateMedia" path="1762525697.0.0"><e-media-create class="mt-l1"
  ref="createMedia1" v-model="media" @change="toggleShowCreateMedia"
  path="1762525697.0.0.0"></e-media-create></div></transition><transition
  name="slide" path="1762525697.1"><div path="1762525697.1.0"><ui-file-dropzone
  @input="onImageUpload" path="1762525697.1.0.0"><e-comment-create
  v-model="text" :media="media" :new-thread="false"
  @click-media-preview="toggleShowCreateMedia"
  path="1762525697.1.0.0.0"></e-comment-create></ui-file-dropzone></div></transition><div
  path="1762525697.2"><transition name="slide" path="1762525697.2.0"><div
  class="flex justify-around" path="1762525697.2.0.0"><transition name="slide"
  path="1762525697.2.0.0.0"><ui-button class="ml-2" v-if="media" :text="'✖'"
  :click="onClearMedia"
  path="1762525697.2.0.0.0.0"></ui-button></transition><transition name="slide"
  path="1762525697.2.0.0.1"><ui-button v-if="canPost" text="✔️ post"
  :click="post"
  path="1762525697.2.0.0.1.0"></ui-button></transition></div></transition></div></div>
