dom:
  .container:
    v-disable: isLoading
    div: 
      transition: 
        name: slide
        e.instance.create:
          v-if: showInstanceCreate
          ref: createInstance1
          layout: horizontal
          ':show-create-button': 'false'
          v-model: tempInstance
          ':generator': generator
          @has-content: hasInstanceContent = $event
    transition: 
      name: slide
    transition: 
      name: slide
      div: 
        ui.file.dropzone:
          v-model: imageID
          e.comment.create:
            v-if: showCommentCreate
            ':imageID': imageID
            v-model: text
            ':new-thread': 'false'
    .mt-l1:
      transition: 
        name: slide
        ui.button:
          v-if: canPost
          text: ✔️ post
          ':click': post
props:
  threadID: null
  threadMediaID: null
  generator: null
data:
  larpGenerator: null
  tempInstance: null
  imageID: null
  text: null
  hasInstanceContent: false
  showLarpGeneratorSelect: false
  isLoading: false
mounted: | #js
  async function() {
  }
methods:
  post: | #js
    async function() {
      this.isLoading = true;
      try
      {
        const { generator, text0, text1 } = (this.tempInstance || {});
        const instance = !generator ? null : { generatorID: generator.generatorID, text0, text1 };
        const post = await this.$root.dbp.posts.create.one(this.threadID, this.threadMediaID, this.text, instance, this.imageID);
        this.$emit('created', post);
        this.clear();
      }
      finally
      {
        this.isLoading = false;
      }
    }
  clear: | #js
    function() {
      this.text = null;
      this.tempInstance = null;
    }
watch:
  tempInstance: | #js
    function() {
    }
  threadID:
    handler: | #js
      function() {
        //this.showInstanceCreate = !this.threadID;
      }
    immediate: true
  postPreview:
    handler: | #js
      function(postPreview) {
        this.$emit('input-preview', postPreview);
      }
    immediate: true
computed:
  postPreview: | #js
    function() {
      return {
        index: 0,
        text: this.text,
      };
    }
  showInstanceCreate: | #js
    function() {
      return !this.hasCommentContent;
    }
  showCommentCreate: | #js
    function() {
      return !this.hasInstanceContent;
    }
  hasCommentContent: | #js
    function() {
      return !!this.text;
    }
  canPost: | #js
    function() {
      if (this.hasInstanceContent) return true;
      if (this.text) return true;
      return false;
    }
  larpGeneratorTooltip: | #js
    function() {
      return `Larping as ${this.larpGenerator?.displayName || 'Anonymous'}`;
    }
style:
  .container:
    max-width: 25em
    margin: auto
  h3:
    text-align: center
config:
  track:
    state: true
name: e-post-create
template: >-
  <div class="comp-e-post-create container" v-disable="isLoading"
  path="1762525697."><div path="1762525697.0"><transition name="slide"
  path="1762525697.0.0"><e-instance-create v-if="showInstanceCreate"
  ref="createInstance1" layout="horizontal" :show-create-button="false"
  v-model="tempInstance" :generator="generator" @has-content="hasInstanceContent
  = $event"
  path="1762525697.0.0.0"></e-instance-create></transition></div><transition
  name="slide" path="1762525697.1"></transition><transition name="slide"
  path="1762525697.2"><div path="1762525697.2.0"><ui-file-dropzone
  v-model="imageID" path="1762525697.2.0.0"><e-comment-create
  v-if="showCommentCreate" :imageID="imageID" v-model="text" :new-thread="false"
  path="1762525697.2.0.0.0"></e-comment-create></ui-file-dropzone></div></transition><div
  class="mt-l1" path="1762525697.3"><transition name="slide"
  path="1762525697.3.0"><ui-button v-if="canPost" text="✔️ post" :click="post"
  path="1762525697.3.0.0"></ui-button></transition></div></div>
