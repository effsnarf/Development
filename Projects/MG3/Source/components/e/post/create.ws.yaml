dom:
  .container:
    div:
      transition#1:
        name: slide
        e.instance.create:
          v-if: showInstanceCreate
          ref: createInstance1
          layout: horizontal
          ':show-create-button': 'false'
          v-model: tempInstance
          ':generator': generator
          @has-content: hasInstanceContent = $event
    transition#2:
      name: slide
      div:
        v-show: showLarpGeneratorSelect
        h3:
          v-text: '''Larping as'''
        e.generator.select:
          v-model: larpGenerator
          ':allow-anonymous': 'true'
          @input: showLarpGeneratorSelect = false;
    transition#3:
      name: slide
      div:
        e.comment.create:
          v-if: showCommentCreate
          v-model: text
    transition:
      name: slide
      ui.button:
        v-if: canPost
        text: post
        ':click': post
props:
  threadID: null
  generator: null
  entityID: null
data:
  larpGenerator: null
  tempInstance: null
  text: null
  hasInstanceContent: false
  showLarpGeneratorSelect: false
  isLoading: false
mounted: | #js
  async function() {
  }
methods:
  post: | #js
    async function() {
      const { generator, text0, text1 } = (this.tempInstance || {});
      const instance = !generator ? null : { generatorID: generator.generatorID, text0, text1 };
      const post = await this.$root.dbp.posts.create.one(this.threadID, this.text, { type: "instance", ...instance });
      this.clear();
      // New thread
      if (!this.threadID)
      {
        this.$root.navigateTo(post);
        return;
      }
      this.$emit('created', post);
    }
  clear: | #js
    function() {
      this.text = null;
      this.tempInstance = null;
    }
watch:
  tempInstance: | #js
    function() {
    }
  threadID: | #js
    {
      handler: function() {
        //this.showInstanceCreate = !this.threadID;
      },
      immediate: true
    }
computed:
  showInstanceCreate: | #js
    function() {
      return !this.hasCommentContent;
    }
  showCommentCreate: | #js
    function() {
      return !this.hasInstanceContent;
    }
  hasCommentContent: | #js
    function() {
      return !!this.text;
    }
  canPost: | #js
    function() {
      if (this.hasInstanceContent) return true;
      if (this.text) return true;
      return false;
    }
  larpGeneratorTooltip: | #js
    function() {
      return `Larping as ${this.larpGenerator?.displayName || 'Anonymous'}`;
    }
style:
  .container:
    display: flex
    flex-direction: column
    align-items: center
    max-width: 25em
    margin: auto
    gap: 1em
  h3:
    text-align: center
config:
  track:
    state: true
name: e-post-create
template: >-
  <div class="comp-e-post-create container" path="1762525697."><div
  path="1762525697.0"><transition name="slide"
  path="1762525697.0.0"><e-instance-create v-if="showInstanceCreate"
  ref="createInstance1" layout="horizontal" :show-create-button="false"
  v-model="tempInstance" :generator="generator" @has-content="hasInstanceContent
  = $event"
  path="1762525697.0.0.0"></e-instance-create></transition></div><transition
  name="slide" path="1762525697.1"><div v-show="showLarpGeneratorSelect"
  path="1762525697.1.0"><h3 v-text="'Larping as'"
  path="1762525697.1.0.0"></h3><e-generator-select v-model="larpGenerator"
  :allow-anonymous="true" @input="showLarpGeneratorSelect = false;"
  path="1762525697.1.0.1"></e-generator-select></div></transition><transition
  name="slide" path="1762525697.2"><div path="1762525697.2.0"><e-comment-create
  v-if="showCommentCreate" v-model="text"
  path="1762525697.2.0.0"></e-comment-create></div></transition><transition
  name="slide" path="1762525697.3"><ui-button v-if="canPost" text="post"
  :click="post" path="1762525697.3.0"></ui-button></transition></div>
