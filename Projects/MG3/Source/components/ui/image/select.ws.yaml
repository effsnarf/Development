dom:
  .flex:
    ui.image:
      ':imageID': value
      ':square': true
    ui.file.dropzone:
      @file-drop: onFileDrop
      .dropzone:
        .flex:
          class: justify-center
          div:
            v-text: dropAreaText
          div#2:
            ui.loading: null
            v-if: isUploading
props:
  value: null
data:
  imageID: null
  noBgImageID: null
  isUploading: false
methods:
  onFileDrop: | #js
    function (files) {
      if (files.length != 1) return alertify.error("One file at a time, please.");
      this.uploadFile(files[0]);
    }
  uploadFile: | #js
    async function(file) {
      const image = await this.$root.uploadFile(file);
      this.$emit('input', image._id);
    }
computed:
  dropAreaText: | #js
    function () {
      if (this.isUploading) return "uploadingâ€¦";
      return "drop image here";
    }
watch:
  isUploading: | #js
    function (isUploading) {
      this.$emit('uploading', isUploading);
    }
style:
  .flex:
    gap: 0.5rem
  .comp-ui-image:
    width: 15% !important
  .comp-ui-file-dropzone:
    width: 85% !important
    font-size: 160%
    text-align: center
    font-family: monospace
  .dropzone:
    border: 6px dashed white
    opacity: 0.3
name: ui-image-select
template: >-
  <div class="comp-ui-image-select flex" path="-1667730935."><ui-image
  :imageID="value" :square="true"
  path="-1667730935.0"></ui-image><ui-file-dropzone @file-drop="onFileDrop"
  path="-1667730935.1"><div class="dropzone" path="-1667730935.1.0"><div
  class="justify-center flex" path="-1667730935.1.0.0"><div
  v-text="dropAreaText" path="-1667730935.1.0.0.0"></div><div v-if="isUploading"
  path="-1667730935.1.0.0.1"><ui-loading></ui-loading></div></div></div></ui-file-dropzone></div>
