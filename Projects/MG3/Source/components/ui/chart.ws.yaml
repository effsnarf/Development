dom:
  .card:
    ':class': getCssClass()
    h2:
      class: header
      v-if: header
      v-text: header
    .chart.flex:
      .column1:
        ui.num#1:
          class: opacity-50
          ':value': scaled(minValue)
        ui.num#2:
          ':value': scaled(middleValue)
        ui.num#3:
          class: opacity-50
          ':value': scaled(maxValue)
      div:
        canvas:
          ref: canvas1
          class: ml-l1
          ':width': canvasWidth
          ':height': (canvasWidth / 2)
          on_mousemove: onMouseMove
          on_mouseout: onMouseOut
    .flex.flex-column.justify-center.items-center:
      .title:
        .icon:
          v-text: icon
        .text:
          v-text: title
      ui.num:
        ':value': scaled(hoveredData || total)
props:
  icon: null
  header: null
  total: null
  title: null
  getValue: x => x
  data: []
  scale: 1
  color: null
data:
  canvasWidth: 400
  hoveredIndex: null
methods:
  getCssClass: |
    function() {
      const cls = {};
      if (!this.data?.length) cls.empty = true;
      if (this.color) cls[`${this.color}`] = true;
      return cls;
    }
  drawChart: |
    function(data) {
      if (!this.data?.length) return;

      this.ctx.clearRect(0, 0, this.width, this.height);
      this.ctx.beginPath();
      this.ctx.moveTo(this.paddingX, this.paddingY + this.chartHeight);
      for (let i = 0; i < this.data.length; i++) {
        const x = this.paddingX + i * this.step;
        const y = this.paddingY + this.chartHeight - (this.getValueFunc(this.data[i]) - this.min) * this.stepY;
        this.drawBar(x, this.getValueFunc(this.data[i]), '#ffffff80');
      }
      this.ctx.lineTo(this.paddingX + this.chartWidth, this.paddingY + this.chartHeight);
      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
      this.ctx.fill();
      this.ctx.strokeStyle = '#ffffff80';
      this.ctx.stroke();
    }
  drawBar: |
    function(x, value, color) {
      const y = this.paddingY + this.chartHeight - (value - this.min) * this.stepY;
      this.ctx.fillStyle = color;
      this.ctx.fillRect(x, y, this.step, this.chartHeight - y + this.paddingY);
    }
  onMouseMove: |
    function(e) {
      const rect = this.canvas.getBoundingClientRect();
      const scaleX = this.canvas.width / rect.width;
      const x = e.offsetX;
      const i = Math.floor((x - this.paddingX) / this.step * scaleX);
      this.hoveredIndex = i;
    }
  onMouseOut: |
    function(e) {
      this.hoveredIndex = null;
    }
  getValueFunc: |
    function(value) {
      let func = this.getValue;
      if (typeof func === 'string') func = eval(func);
      return func(value);
    }
  scaled: |
    function(value) {
      return value;
      return Math.round(value * this.scale);
    }
watch:
  data:
    handler: |
      async function(data) {
        await this.$nextTick();
        this.drawChart(data);
      }
    immediate: true
    deep: true
  hoveredIndex:
    handler: |
      async function(newIndex, oldIndex) {
        if (newIndex === oldIndex) return;
        await this.$nextTick();
        this.drawChart(this.data);
        if (newIndex !== null) {
          const value = this.getValueFunc(this.data[newIndex]);
          this.drawBar(this.hoveredX, value, '#ffffff80');
        }
      }
    immediate: true
    deep: true
computed:
  canvas: function() { return this.$refs.canvas1; }
  ctx: function() { return this.canvas.getContext('2d'); }
  width: function() { return this.canvas.width; }
  height: function() { return this.canvas.height; }
  padding: function() { return 0; }
  paddingX: function() { return this.width * this.padding; }
  paddingY: function() { return this.height * this.padding; }
  chartWidth: function() { return this.width - this.paddingX * 2; }
  chartHeight: function () { return this.height - this.paddingY * 2; }
  step: function() { return this.chartWidth / this.data.length; }
  stepY: function() { return this.chartHeight / this.range; }
  min: |
    function() {
      if (!this.data?.length) return 0;
      return Math.round(Math.min(...this.data.map(x => this.getValueFunc(x))));
    }
  max: |
    function() {
      if (!this.data?.length) return 0;
      return Math.round(Math.max(...this.data.map(x => this.getValueFunc(x))) * 1.1);
    }
  minValue: |
    function() {
      return (this.data||[]).filter(v => v).min();
    }
  averageValue: |
    function() {
      return (this.data||[]).filter(v => v).average();
    }
  middleValue: |
    function() {
      return (this.minValue + this.maxValue) / 2;
    }
  maxValue: |
    function() {
      return (this.data||[]).filter(v => v).max();
    }
  range: |
    function() {
      return this.max - this.min;
    }
  hoveredData: |
    function() {
      if (this.hoveredIndex === null) return null;
      const value = this.data[this.hoveredIndex];
      return value;
    }
  hoveredX: |
    function() {
      if (this.hoveredIndex === null) return null;
      return this.paddingX + this.hoveredIndex * this.step;
    }
name: ui-chart
style:
  column1:
    width: 10%
  .chart > div:
    flex-grow: 1
  canvas:
    width: 100%
  .card:
    padding: 0.5rem 1rem
    background-color: '#ffffff30'
    border: '1px solid #e5e5e5'
    border-radius: 0.5em
  .green:
    background: '#00ff0040'
  .red:
    background: '#ff000040'
  .blue:
    background: '#00a0ff40'
  .comp-ui-num, .title:
    font-size: 140%
  .column1 .comp-ui-num:nth-child(2):
    position: absolute
    top: 50%
    transform: translateY(-50%)
  .column1 .comp-ui-num:nth-child(1):
    position: absolute
    bottom: 0
template: >-
  <div class="comp-ui-chart card" :class="getCssClass()"><h2 class="header"
  v-if="header" v-text="header"></h2><div class="chart flex"><div
  class="column1"><ui-num class="opacity-50"
  :value="scaled(minValue)"></ui-num><ui-num
  :value="scaled(middleValue)"></ui-num><ui-num class="opacity-50"
  :value="scaled(maxValue)"></ui-num></div><div><canvas class="ml-l1"
  ref="canvas1" :width="canvasWidth" :height="(canvasWidth / 2)"
  @mousemove="onMouseMove" @mouseout="onMouseOut"></canvas></div></div><div
  class="flex flex-column justify-center items-center"><div class="title"><div
  class="icon" v-text="icon"></div><div class="text"
  v-text="title"></div></div><ui-num :value="scaled(hoveredData ||
  total)"></ui-num></div></div>
