dom:
  div:
    ui.loading:
      class: absolute-center
      v-show: isLoading
    .file-dropzone:
      v-dim: isLoading
      ref: dropArea1
      .upload-button:
        v-if: enabled
        v-text: '''📤🖼️'''
        title: 📤🖼️ upload image
        @click: onClickUpload
      input:
        class: hidden
        type: file
        ref: fileInput
        @change: onChangeFileInput
      slot: null
props:
  enabled: true
data:
  isLoading: 0
mounted: | #js
  function() {
    const dropArea = this.$refs.dropArea1;
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, this.onlyIfFiles(this.preventDefaults), false);
    });
    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, this.onlyIfFiles(this.highlight.bind(this)), false);
    });
    ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, this.onlyIfFiles(this.unhighlight.bind(this)), false);
    });
    dropArea.addEventListener('drop', this.onlyIfFiles(this.handleDrop.bind(this)), false);
  }
methods:
  onFileDrop: | #js
    async function(files) {
      await this.$nextTick();
      if (files.length > 1) return alertify.error('One file at a time, please');
      this.isLoading++;
      try
      {
        const image = await this.$root.uploadFile(files[0]);
        this.$emit("input", image._id);
      }
      finally
      {
        this.isLoading--;
      }
    }
  onClickUpload: | #js
    function (e) {
      this.$refs.fileInput.click();
    }
  onChangeFileInput: | #js
    function (e) {
      let files = e.target.files;
      this.onFileDrop(files);
    }
  handleDrop: | #js
    function (e) {
      if (!this.enabled) return;
      let dt = e.dataTransfer;
      let files = dt.files;
      this.onFileDrop(files);
    }
  highlight: | #js
    function (e) {
      if (!this.enabled) return;
      this.$refs.dropArea1.classList.add('drop-possible');
    }
  unhighlight: | #js
    function (e) {
      if (!this.enabled) return;
      this.$refs.dropArea1.classList.remove('drop-possible');
      // Remove tooltip attribute
      this.$refs.dropArea1.removeAttribute('tooltip');
    }
  preventDefaults: | #js
    function (e) {
      e.preventDefault()
      e.stopPropagation()
    }
  onlyIfFiles: | #js
    function (handler) {
      return function (e) {
        if (!e.dataTransfer.types.includes('Files')) return;
        handler(e);
      }
    }
style:
  .file-dropzone:
    width: 100%
    height: 100%
  .upload-button:
    position: absolute
    height: fit-content !important
    bottom: 0
    right: 0
    cursor: pointer
    z-index: 10
    font-size: 2rem
    filter: grayscale(1)
    opacity: 0.6
  .upload-button:hover:
    filter: none
    opacity: 1
  .file-dropzone:hover .upload-button:
    display: block
  .drop-possible:
    border: '2px dashed #ccc'
    padding: 0.5rem
    box-shadow: 'inset -1em 1em 2em #000'
    transition: 0.3s
  .drop-possible::after:
    content: '''drop image'''
    position: absolute
    top: 50%
    left: 50%
    transform: translate(-50%, -50%)
    font-size: 180%
    text-align: center
    width: 100%
    text-shadow: '-4px 4px 2px #000'
    pointer-events: none
name: ui-file-dropzone
template: >-
  <div class="comp-ui-file-dropzone" path="1956569459."><ui-loading
  class="absolute-center" v-show="isLoading"
  path="1956569459.0"></ui-loading><div class="file-dropzone" v-dim="isLoading"
  ref="dropArea1" path="1956569459.1"><div class="upload-button" v-if="enabled"
  v-text="'📤🖼️'" title="📤🖼️ upload image" @click="onClickUpload"
  path="1956569459.1.0"></div><input class="hidden" type="file" ref="fileInput"
  @change="onChangeFileInput" path="1956569459.1.1"/><slot></slot></div></div>
