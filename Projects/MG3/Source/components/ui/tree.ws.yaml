dom:
  ul:
    li:
      ui.tree.node:
        ':node': root
        ':initial-expanded': initialExpanded
        ':expandable': 'initialExpandable'
        ':item-type': itemType
        ':get-item': getItem || ((node) => node.item)
        ':get-children': getChildren || ((node) => node.children||[])
        ':selected-node': selectedNode
        @node-click: onChildClick
        @node-hover: onChildHover
        @node-unhover: onChildUnhover
props:
  root: null
  initialExpanded: false
  expandable: true
  itemType: null
  getItem: null
  getChildren: null
data:
  selectedNode: null
methods:
  onChildClick: | #js
    function(child) {
      this.$emit('node-click', child);
      this.selectedNode = (child == this.selectedNode) ? null : child;
    }
  onChildHover: | #js
    function (child) {
      this.$emit('node-hover', child);
    }
  onChildUnhover: | #js
    function (child) {
      this.$emit('node-unhover', child);
    }
computed:
  initialExpandable: | #js
    function() {
      if (typeof this.initialExpanded == 'boolean') return !this.initialExpanded;
      return this.expandable;
    }
  depth: | #js
    function() {
      return 0;
    }
watch:
  selectedNode: | #js
    function(newVal, oldVal) {
      this.$emit('node-select', newVal);
    }
name: ui-tree
template: >-
  <ul class="comp-ui-tree" path="-484140360."><li
  path="-484140360.0"><ui-tree-node :node="root"
  :initial-expanded="initialExpanded" :expandable="!initialExpanded"
  :item-type="itemType" :get-item="getItem || ((node) =&gt; node.item)"
  :get-children="getChildren || ((node) =&gt; node.children||[])"
  :selected-node="selectedNode" @node-click="onChildClick"
  @node-hover="onChildHover" @node-unhover="onChildUnhover"
  path="-484140360.0.0"></ui-tree-node></li></ul>
