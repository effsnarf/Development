dom:
  div: 
    ui.mouse: 
      ':global': true
      @move: onMouseMove
      @right-click: e => onRightClick(e, true)
    .context-menu:
      v-show: isVisible
      ref: menu1
      ':class': '{ pinned: isPinned, inited: isInited, visible: isVisible }'
      ':style': style
      div: 
        ui.mouse: 
          @drag: onDrag
          h2:
            ui.mouse: 
              @right-click: onRightClick
            slot: 
              h3:
                ui.title:
                  ':icon': icon
                  ':text': title
          div: 
            slot: 
              name: content
            component:
              v-if: itemType
              ':is': itemType
              v-bind: bindProps
props:
  global: false
  visible: null
  icon: null
  title: null
  itemType: null
  bindProps: null
data:
  lastUpdate: 0
  space: 20
  mousePos:
    x: 0
    'y': 0
  globalPos:
    x: 0
    'y': 0
  isInited: false
  isPinned: false
  isInsideContextElement: false
mounted: | #js
  function() {
    const element = (this.global ? window : this.$el.parentElement);
    element.addEventListener("mouseenter", this.onMouseEnterContext);
    element.addEventListener("mouseleave", this.onMouseLeaveContext);
    this.$root.$emit("context-menu-mounted", this);
  }
unmounted: | #js
  function() {
    const element = (this.global ? window : this.$el.parentElement);
    element.removeEventListener("mouseenter", this.onMouseEnterContext);
    element.removeEventListener("mouseleave", this.onMouseLeaveContext);
    this.$root.$emit("context-menu-unmounted", this);
  }
methods:
  onDrag: | #js
    function(dpos) {
      this.globalPos.x += dpos.dx;
      this.globalPos.y += dpos.dy;
      // Since child context menus are positioned relative to the parent
      // we need to update their position in the other direction when dragging the parent
      const childContexts = this.$root.getDescendants(this, this.$data._.comp.name);
      for (const child of childContexts) {
        // I have no idea what's going on here
        child.globalPos.x -= 0.0001;
        child.globalPos.y -= 0.0001;
      }
    }
  onMouseMove: | #js
    function(pos) {
      if (!this.isVisible) return;
      if (this.isPinned) return;
      this.mousePos = pos;
    }
  onMouseEnterContext: | #js
    function(e) {
      this.isInsideContextElement = true;
    }
  onMouseLeaveContext: | #js
    function() {
      this.isInsideContextElement = false;
    }
  onRightClick: | #js
    function(e, global) {
      if (!e.ctrlKey) return;
      if (!this.isVisible) return;
      // We unpin it by right clicking the title
      // Global right click is ignored if the menu is pinned
      if (global && this.isPinned) return;
      e.preventDefault();
      e.stopPropagation();
      this.isPinned = !this.isPinned;
    }
computed:
  isVisible: | #js
    function() {
      if (this.isPinned) return true;
      // .visible prop allows controlling the visibility from outside
      if (this.visible != null) return this.visible;
      if (this.global) return true;
      if (this.isInsideContextElement) return true;
      return false;
    }
  localPos: | #js
    function() {
      const pos = { ...this.globalPos };
      if (this.global) return pos;
      if (!this.$el) return pos;
      const rect = this.$el.parentElement.getBoundingClientRect();
      pos.x -= rect.left;
      pos.y -= rect.top;
      return pos;
    }
  style: | #js
    function()
    {
      const style = {};
      style.position = (this.global ? "fixed" : "absolute");
      const pos = (this.global ? this.globalPos : this.localPos);
      style.left = ((pos.x + this.space) + "px");
      style.top = ((pos.y + this.space) + "px");
      return style;
    }
watch:
  isPinned:
    handler: | #js
      function(isPinned) {
        this.$emit("pinned", isPinned);
      }
    deep: true
  mousePos:
    handler: | #js
      function() {
        // When the mouse moves, update the position of the context menu
        if (this.isPinned) return;
        this.globalPos = this.mousePos;
      }
    deep: true
style:
  .context-menu.visible:
    display: block
  .context-menu:
    display: none
    min-width: 20rem
    padding: 1rem
    background: 'linear-gradient(to right, #303030, #101010)'
    box-shadow: '-12px 12px 6px #000000'
    opacity: 0.7
    transition: 0s !important
    cursor: move
    pointer-events: none
    z-index: 1000
  .context-menu.pinned:
    opacity: 1
    border: '1px solid #ffffff60'
    transform: translateY(-5em)
    transition: transform 0.3s !important
    pointer-events: all
  h2:
    border-radius: 0
    border-bottom: '1px solid #000'
    margin-bottom: 0.5em
    user-select: none
name: ui-context-window
template: >-
  <div class="comp-ui-context-window" path="1458497449."><ui-mouse
  :global="true" @move="onMouseMove" @right-click="e =&gt; onRightClick(e,
  true)" path="1458497449.0"></ui-mouse><div class="context-menu"
  v-show="isVisible" ref="menu1" :class="{ pinned: isPinned, inited: isInited,
  visible: isVisible }" :style="style" path="1458497449.1"><div
  path="1458497449.1.0"><ui-mouse @drag="onDrag" path="1458497449.1.0.0"><h2
  path="1458497449.1.0.0.0"><ui-mouse @right-click="onRightClick"
  path="1458497449.1.0.0.0.0"></ui-mouse><slot path="1458497449.1.0.0.0.1"><h3
  path="1458497449.1.0.0.0.1.0"><ui-title :icon="icon" :text="title"
  path="1458497449.1.0.0.0.1.0.0"></ui-title></h3></slot></h2><div
  path="1458497449.1.0.0.1"><slot name="content"
  path="1458497449.1.0.0.1.0"></slot><component v-if="itemType" :is="itemType"
  v-bind="bindProps"
  path="1458497449.1.0.0.1.1"></component></div></ui-mouse></div></div></div>
