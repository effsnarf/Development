dom:
  .w-100pc:
    v-if: every
    ui.chart:
      :class: cssClass
      :header: getHeader()
      :title:
      :data: values
      :color: color
      :scale: scale
    a:
      v-text: url
      :href: url
      target: _blank
    div:
      v-text: values

props:
  app:
  category:
  event:
  last:
  every:
  scale:

data:
  values: []
  isBusy: 0

mounted: | #ts
  function() {
    this.fetchData();
  }

methods:
  fetchData: |
    async function() {
      this.isBusy++;
      try
      {
        this.values = await (await fetch(this.url)).json();
      }
      finally
      {
        this.isBusy--;
      }
    }
  getHeader: |
    function() {
      return `${this.event} every ${this.every} in the last ${this.last}`;
    }

computed:
  url: |
    function() {
      try
      {
        let { app, category, event, last, every } = this;
        last = last.deunitify().unitifyTime();
        every = every.deunitify().unitifyTime();
        let url = `https://db.memegenerator.net/analytics/${app}/${category}/${event}/last/${last}/every/${every}`;
        url = url.withoutColors();
        return url;
      }
      catch (ex)
      {
        return null;
      }
    }

  color: |
    function() {
      return {
        "requests": "green",
        "response.time": "blue",
      }[this.event] || "";
    }

  cssClass: |
    function() {
      const cls = {};
      return cls;
      if (this.isBusy) cls["opacity-40"] = true;
      return cls;
    }

watch:
  url:
    handler: |
      async function() {
        await this.fetchData();
      }
    immediate: true
