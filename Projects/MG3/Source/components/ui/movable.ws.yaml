dom:
  .movable:
    @mousedown: onMouseDown
    @mousemove: onMouseMove
    @mouseup: onMouseUp
    @mouseout: onMouseUp
    slot: null
mounted: | #js
  function() {
  }
methods:
  onMouseDown: | #js
    function(e) {
      if (e.button !== 0) return;

      e.preventDefault();
      e.stopPropagation();

      this.isDragging = true;
      this.dragStart = { x: e.clientX, y: e.clientY };
    }
  onMouseMove: | #js
    function(e) {
      if (!this.isDragging) return;

      e.preventDefault();
      e.stopPropagation();

      const dx = e.clientX - this.dragStart.x;
      const dy = e.clientY - this.dragStart.y;

      if (this.value)
      {
        const trans = JSON.parse(JSON.stringify(this.value));
        if (e.ctrlKey)
        {
          trans.scale -= (dy / this.$el.parentElement.offsetHeight) * 2;
        }
        else
        {
          const pos = trans.pos;
          pos.x += dx / this.$el.parentElement.offsetWidth;
          pos.y -= dy / this.$el.parentElement.offsetHeight;
        }
        this.$emit('input', trans);
      }

      this.dragStart = { x: e.clientX, y: e.clientY };

      this.$emit("drag-by", { dx, dy });
    }
  onMouseUp: | #js
    function(e) {
      e.preventDefault();
      e.stopPropagation();

      this.isDragging = false;
    }
  getStyle: | #js
    function() {
      const style = {};
      if (this.posDelta)
      {
        style.position = 'relative';
        style.left = this.posDelta.x + 'px';
        style.top = this.posDelta.y + 'px';
      }
      return style;
    }
props:
  value: null
data:
  isDragging: false
  dragStart: null
  dragStartPos: null
style:
  .movable:
    cursor: move
    user-select: none
name: ui-movable
template: >-
  <div class="comp-ui-movable movable" @mousedown="onMouseDown"
  @mousemove="onMouseMove" @mouseup="onMouseUp" @mouseout="onMouseUp"
  path="1781914900."><slot></slot></div>
