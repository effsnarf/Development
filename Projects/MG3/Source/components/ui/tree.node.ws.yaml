dom:
  div:
    .tree-node:
      ':class': getCssClass()
      ui.expand:
        v-if: expandable
        v-model: isExpanded
      component:
        v-if: itemType
        ':is': getItemType()
        ':item': getItem(node)
      on_click: onNodeClick
      on_mouseenter: onMouseEnter
      on_mouseleave: onMouseLeave
      slot: null
    ul:
      class: ml-3
      li:
        v-for: child in getChildItems(node)
        ui.tree.node:
          ':node': child
          ':initial-expanded': initialExpanded
          ':expandable': expandable
          ':item-type': getItemType()
          ':get-item': getItem
          ':get-children': getChildren
          ':selected-node': selectedNode
          on_node-click: onChildClick
          on_node-hover: onChildHover
          on_node-unhover: onChildUnhover
props:
  node: null
  initialExpanded: false
  expandable: true
  itemType: null
  getItem: null
  getChildren: null
  selectedNode: null
data:
  isInited: false
  isExpanded: null
methods:
  getCssClass: | #js
    function() {
      return {
        hoverable: true,
        selected: this.isSelected,
        expandable: this.expandable,
      };
    }
  onNodeClick: | #js
    function() {
      if (this.isSelected)
      {
          this.isExpanded = false;
          this.children = null;
      }
      else
      {
        this.isExpanded = true;        
        this.children = this.getChildren(this.node);
      }
      this.$emit('node-click', this.node);
    }
  onMouseEnter: | #js
    function() {
      this.$emit('node-hover', this.node);
    }
  onMouseLeave: | #js
    function() {
      this.$emit('node-unhover', this.node);
    }
  onChildClick: | #js
    function(child) {
      this.$emit('node-click', child);
    }
  onChildHover: | #js
    function (child) {
      this.$emit('node-hover', child);
    }
  onChildUnhover: | #js
    function (child) {
      this.$emit('node-unhover', child);
    }
  getItemType: | #js
    function() {
      return this.itemType?.replace(/\./g, '-');
    }
  getChildItems: | #js
    function(node) {
      if (!this.isExpanded) return [];
      return this.getChildren(node);
    }
computed:
  isSelected: | #js
    function() {
      return (this.node == this.selectedNode);
    }
watch:
  initialExpanded:
    handler: | #js
      function(newVal, oldVal) {
        if (this.isInited) return;
        this.isInited = true;
        this.isExpanded = newVal;
      }
    immediate: true
style:
  .tree-node:
    display: block
  .tree.node.expandable:
    display: grid
    grid-template: 1fr / 1.5em 1fr
  .comp-ui-expand .icon:
    font-size: 100% !important
    border: none !important
name: ui-tree-node
template: >-
  <div class="comp-ui-tree-node" path="2053324664."><div class="tree-node"
  :class="getCssClass()" @click="onNodeClick" @mouseenter="onMouseEnter"
  @mouseleave="onMouseLeave" path="2053324664.0"><ui-expand v-if="expandable"
  v-model="isExpanded" path="2053324664.0.0"></ui-expand><component
  v-if="itemType" :is="getItemType()" :item="getItem(node)"
  path="2053324664.0.1"></component><slot></slot></div><ul class="ml-3"
  path="2053324664.1"><li v-for="child in getChildItems(node)"
  path="2053324664.1.0"><ui-tree-node :node="child"
  :initial-expanded="initialExpanded" :expandable="expandable"
  :item-type="getItemType()" :get-item="getItem" :get-children="getChildren"
  :selected-node="selectedNode" @node-click="onChildClick"
  @node-hover="onChildHover" @node-unhover="onChildUnhover"
  path="2053324664.1.0.0"></ui-tree-node></li></ul></div>
