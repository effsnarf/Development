dom:
  div:
    .tree-node:
      ':class': getCssClass()
      ui.expand:
        v-model: isExpanded
      component:
        v-if: itemType
        ':is': getItemType()
        ':item': getItem(node)
      on_click: onNodeClick
      on_mouseenter: onMouseEnter
      on_mouseleave: onMouseLeave
      slot: null
    ul:
      class: ml-l1
      li:
        v-for: child in getChildItems(node)
        ui.tree.node:
          ':node': child
          ':item-type': getItemType()
          ':get-item': getItem
          ':get-children': getChildren
          ':selected-node': selectedNode
          on_node-click: onChildClick
          on_node-hover: onChildHover
          on_node-unhover: onChildUnhover
props:
  node: null
  itemType: null
  getItem: null
  getChildren: null
  selectedNode: null
data:
  isExpanded: null
methods:
  getCssClass: | #js
    function() {
      return {
        hoverable: true,
        selected: this.isSelected,
      };
    }
  onNodeClick: | #js
    function() {
      if (this.isSelected)
      {
          this.isExpanded = false;
          this.children = null;
      }
      else
      {
        this.isExpanded = true;        
        this.children = this.getChildren(this.node);
      }
      this.$emit('node-click', this.node);
    }
  onMouseEnter: | #js
    function() {
      this.$emit('node-hover', this.node);
    }
  onMouseLeave: | #js
    function() {
      this.$emit('node-unhover', this.node);
    }
  onChildClick: | #js
    function(child) {
      this.$emit('node-click', child);
    }
  onChildHover: | #js
    function (child) {
      this.$emit('node-hover', child);
    }
  onChildUnhover: | #js
    function (child) {
      this.$emit('node-unhover', child);
    }
  getItemType: | #js
    function() {
      return this.itemType?.replace(/\./g, '-');
    }
  getChildItems: | #js
    function(node) {
      if (!this.isExpanded) return [];
      return this.getChildren(node);
    }
computed:
  isSelected: | #js
    function() {
      return (this.node == this.selectedNode);
    }
style:
  .tree-node:
    display: grid
    grid-template: 1fr / 2em 1fr
  .comp-ui-expand .icon:
    font-size: 100% !important
    border: none !important
name: ui-tree-node
template: >-
  <div class="comp-ui-tree-node"><div class="tree-node" :class="getCssClass()"
  @click="onNodeClick" @mouseenter="onMouseEnter"
  @mouseleave="onMouseLeave"><ui-expand
  v-model="isExpanded"></ui-expand><component v-if="itemType"
  :is="getItemType()" :item="getItem(node)"></component><slot></slot></div><ul
  class="ml-l1"><li v-for="child in getChildItems(node)"><ui-tree-node
  :node="child" :item-type="getItemType()" :get-item="getItem"
  :get-children="getChildren" :selected-node="selectedNode"
  @node-click="onChildClick" @node-hover="onChildHover"
  @node-unhover="onChildUnhover"></ui-tree-node></li></ul></div>
