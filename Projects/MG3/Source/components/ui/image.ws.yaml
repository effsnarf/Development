dom:
  component:
    ':is': getCompType()
    class: image
    ':url': url
    img:
      ref: image1
      ':class': getCssClass()
      ':src': src1
      on_load: onLoad
    on_click: $emit('click')
props:
  imageID: null
  url: null
  src: null
  square: null
data:
  width: null
  height: null
mounted: |
  function () {
    window.addEventListener(`resize`, this.recalc.bind(this));
    // Detect if the image element changes its size
    let resizeObserver = new ResizeObserver(this.recalc.bind(this));
    resizeObserver.observe(this.$refs.image1);
  }
methods:
  onLoad: |
    function () {
      this.recalc();
      [1,2,3].forEach(i => setTimeout(this.recalc.bind(this), i * 100))
    }
  recalc: |
    function () {
      if (!this.$refs.image1) return;
      let rect = this.$refs.image1.getBoundingClientRect();
      this.width = Math.round(rect.width);
      this.height = Math.round(rect.height);
      this.$emit("change");
    }
  getCssClass: |
    function () {
      return { empty: !this.src, square: this.square };
    }
  getCompType: |
    function () {
      if (!this.url) return `div`;
      return `ui-link`;
    }
computed:
  src1: |
    function () {
      if (this.imageID) return this.$root.url.image(this.imageID);
      if (this.src) return this.src;
      return this.emptySrc;
    }
  emptySrc: |
    function () {
      return '/img/empty.png';
    }
style:
  .comp-ui-image:
    overflow: hidden
  .image, img:
    width: 100%
  .square:
    aspect-ratio: 1
    object-fit: cover
name: ui-image
template: >-
  <component class="comp-ui-image image" :is="getCompType()" :url="url"
  @click="$emit('click')"><img ref="image1" :class="getCssClass()" :src="src1"
  @load="onLoad"/></component>
