dom:
  ui.infinite.scroll:
    transition.group:
      tag: ul
      name: list
      ':class': gridClass
      li:
        v-for: item in items
        ':key': $root.getKey(item)
        component:
          ':is': itemType.kebabize()
          ':item': item
      on_scroll: loadMore
name: content-stream
props:
  itemType: null
  getMoreItems: null
  gridClass: null
data:
  pageIndex: 0
  items: []
  queue: []
methods:
  reset: |
    function() {
      this.pageIndex = 0;
      this.items = [];
      this.loadMore();
    }
  loadMore: |
    async function() {
      if (!this.getMoreItems) return;
      const pageIndex = this.pageIndex++;
      this.queue.push(async () => {
        let newItems = await this.getMoreItems(pageIndex);
        newItems = newItems.exceptBy(this.items, this.$root.getKey);
        this.items.push(...newItems);
      });
    }
  processQueue: |
    async function() {
      const next = this.queue.shift();
      if (next) await next();
      setTimeout(this.processQueue.bind(this), 300);
    }
mounted: |
  function() {
    this.processQueue();
    this.reset();
  }
style:
  ul:
    display: grid
    gap: 5rem
template: >-
  <ui-infinite-scroll class="comp-content-stream"><transition-group tag="ul"
  name="list" :class="gridClass" @scroll="loadMore"><li v-for="item in items"
  :key="$root.getKey(item)"><component :is="itemType.kebabize()"
  :item="item"></component></li></transition-group></ui-infinite-scroll>
