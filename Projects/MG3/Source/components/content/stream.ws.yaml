dom:
  ui.infinite.scroll:
    .stream:
      ':class': gridClass
      component:
        ':is': itemType.kebabize()
        v-for: item in items
        ':item': item
        ':key': $root.getKey(item)
    on_scroll: loadMore
name: content-stream
props:
  itemType: null
  getMoreItems: null
  gridClass: null
data:
  pageIndex: 0
  items: []
  queue: []
methods:
  loadMore: |
    async function() {
      if (!this.getMoreItems) return;
      const pageIndex = this.pageIndex++;
      this.queue.push(async () => {
        const newItems = await this.getMoreItems(pageIndex);
        this.items.push(...newItems);
      });
    }
  processQueue: |
    async function() {
      const next = this.queue.shift();
      if (next) await next();
      setTimeout(this.processQueue.bind(this), 300);
    }
mounted: |
  function() {
    this.processQueue();
  }
style:
  .stream:
    display: grid
    gap: 1rem
template: >-
  <ui-infinite-scroll class="comp-content-stream" @scroll="loadMore"><div
  class="stream" :class="gridClass"><component :is="itemType.kebabize()"
  v-for="item in items" :item="item"
  :key="$root.getKey(item)"></component></div></ui-infinite-scroll>
