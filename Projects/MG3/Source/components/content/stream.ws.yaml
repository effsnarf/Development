dom:
  ui.infinite.scroll:
    @scroll: loadMore
    transition.group:
      tag: ul
      name: slide
      ':class': gridClass
      ':style': '{ gap: gap }'
      li:
        v-for: (item, index) in items
        ':key': $root.getKey(item)
        div: 
          div: 
            ':key': key1
          component:
            ':style': itemStyles[index]
            ':is': itemType.kebabize()
            ':item': item
            v-bind: itemProps
name: content-stream
props:
  itemType: null
  itemProps: null
  getMoreItems: null
  gridClass: null
  gap: null
data:
  pageIndex: 0
  items: []
  queue: []
  visibleItemIndex: null
  distancesToVisibility: []
  itemStyles: []
  scrollTop: 0
  key1: 1
mounted: | #js
  function() {
    this.processQueue();
    this.reset();
    document.addEventListener('scroll', this.onScroll.bind(this));
    this.$watch(() => this.$root.params.url, this.clear.bind(this), { immediate: true });
  }
methods:
  add: | #js
    function(item) {
      this.scrollTo(this.visibleItemIndex);
      this.items.insertAt(this.visibleItemIndex, item, true);
    }
  scrollTo: | #js
    function(index) {
      const items = this.$el.querySelectorAll('li');
      const item = items[index];
      if (!item) return;
      const rect = item.getBoundingClientRect();
      const topMargin = 250;
      const top = rect.top + window.scrollY - topMargin;
      window.scrollTo({ top, behavior: 'smooth' });
    }
  onScroll: | #js
    (function() {
      this.scrollTop = window.scrollY;
      this.updateVisibleItemIndex();
      this.updateDistancesToVisibility();
      this.updateItemStyles();
      this.key1++;
    }).throttle(100)
  getItemStyle: | #js
    function(index) {
      const distance = this.distancesToVisibility[index];
      const getValue = (min, scale) => Math.min(1, Math.max(min, 1 - (distance / window.innerHeight * scale)))
      const opacity = (getValue(0, 1));
      const grayscale = (1 - getValue(0, 1));
      const blur = `${Math.round((1 - getValue(0, 0.5)) * 5)}px`;
      return {
        opacity,
        filter: `grayscale(${grayscale}) blur(${blur})`,
        transition: 'opacity 0.2s, filter 0.2s',
      }
    }
  getDistanceToVisibility: | #js
    function(index) {
      // How many pixels until the item is visible (visibleItemIndex = index)
      const itemScrollTop = this.getItemScrollTop(index);
      const distance = (itemScrollTop - this.scrollTop);
      return distance;
    }
  getItemScrollTop: | #js
    function(index) {
      const items = this.$el.querySelectorAll('li');
      const item = items[index];
      if (!item) return;
      const rect = item.getBoundingClientRect();
      const topMargin = 250;
      const top = rect.top + window.scrollY - topMargin;
      return top;
    }
  updateItemStyles: | #js
    function() {
      for (let i = 0; i < this.items.length; i++) {
        this.itemStyles[i] = this.getItemStyle(i);
      }
    }
  updateDistancesToVisibility: | #js
    function() {
      const count = Math.max(this.items.length, this.distancesToVisibility.length);
      for (let i = 0; i < count; i++) {
        this.distancesToVisibility[i] = this.getDistanceToVisibility(i);
      }
    }
  updateVisibleItemIndex: | #js
    function() {
      const items = this.$el.querySelectorAll('li');
      const visibleItemIndex = Array.from(items).findIndex(this.isOnScreen.bind(this));
      this.visibleItemIndex = visibleItemIndex;
    }
  isOnScreen: | #js
    function(item) {
      const rect = item.getBoundingClientRect();
      const viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
      return (rect.top > 0) && (rect.bottom < viewHeight);
    }
  reset: | #js
    async function() {
      this.clear();
      await this.loadMore();
    }
  clear: | #js
    function() {
      this.pageIndex = 0;
      this.items = [];
    }
  loadMore: | #js
    function() {
      return new Promise((resolve, reject) => {
        if (!this.getMoreItems) return resolve();
        const pageIndex = this.pageIndex++;
        const lastItemID = this.items?.last()?._id;
        this.queue.push(async () => {
          let newItems = await this.getMoreItems(pageIndex, lastItemID);
          newItems = newItems.exceptBy(this.items, this.$root.getKey);
          this.items.push(...newItems);
          this.updateVisibleItemIndex();
          resolve();
          this.$nextTick(this.onScroll.bind(this));
        });
      });
    }
  processQueue: | #js
    async function() {
      const next = this.queue.shift();
      if (next) await next();
      setTimeout(this.processQueue.bind(this), 300);
    }
watch:
  visibleItemIndex:
    handler: | #js
      (function() {
        this.$emit("visible-item", this.items[this.visibleItemIndex]);
      }).debounce(100)
style:
  ul:
    display: grid
  .grid-3 > li:
    margin-bottom: 2em
template: >-
  <ui-infinite-scroll class="comp-content-stream" @scroll="loadMore"
  path="-30902635."><transition-group tag="ul" name="slide" :class="gridClass"
  :style="{ gap: gap }" path="-30902635.0"><li v-for="(item, index) in items"
  :key="$root.getKey(item)" path="-30902635.0.0"><div
  path="-30902635.0.0.0"><div :key="key1"
  path="-30902635.0.0.0.0"></div><component :style="itemStyles[index]"
  :is="itemType.kebabize()" :item="item" v-bind="itemProps"
  path="-30902635.0.0.0.1"></component></div></li></transition-group></ui-infinite-scroll>
