dom:
  div:
    ui.link:
      :url: $root.url.instance(item)
      div:
        ui.image:
          ref: image1
          :imageID: item.imageID
          @load: onImageLoad
        .texts:
          .text:
            v-for: (text, index) in [item.text0, item.text1]
            v-text: text
            :style: "{ fontSize: fontSizes[index] }"
        div:
          class: spacer
    e.generator.small:
      :item: item

name: e-instance
props:
  item:
  showGenerator: true
data:
  width:
methods:
  getFontSize: | #ts
    function (s) {
      if (!s) return 0;
      if (!this.width) return 0;
      const size = Math.min(3, Math.max(14, (36 - (s.length / 6))) / 50 *  this.width / 150);
      return `${size*2}vh`;
    }
  onImageLoad: | #ts
    function () {
      this.width = this.$refs.image1.width;
    }
computed:
  fontSizes: | #ts
    function () {
      const sizes = [this.getFontSize(this.item.text0), this.getFontSize(this.item.text1)];
      return sizes;
    }
style:
  .comp-e-instance:
    box-shadow: "-10px 10px 2px #000"
  .comp-ui-image, img:
    aspect-ratio: 1
    object-fit: cover
  .comp-ui-image, .texts, .text:
    position: absolute
  .spacer, .texts:
    width: 100%
    aspect-ratio: 1
  .text:
    text-align: center
    display: block
    width: 100%
    top: 0
    overflow: hidden
    color: "#fff"
    line-height: 1.2em
    font-family: Impact,Oswald
    text-transform: uppercase
    text-shadow: "-2px -2px 0 #000, 2px -2px 0 #000, -2px 2px 0 #000, 2px 2px 0 #000"
    -webkit-font-smoothing: antialiased
    box-sizing: border-box
    padding: 0.3em
    filter: "drop-shadow(-2px 4px 2px #00000060)"
    transition: 0s
  .text:nth-child(2):
    top: auto
    bottom: 0
