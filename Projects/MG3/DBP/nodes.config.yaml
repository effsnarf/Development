title:
admin:
  ips:
    - 127.0.0.1
    - ::1
    - 89.134.7.165
    - 2a02:ab88:c8b:fb00:a4d4:ea7:170e:ce50
server:
  host: localhost
  port:
  cors:
    dev: [localhost, localhost:5051]
    prod: [memegenerator.net, localhost, localhost:5051]
  # on dev, we're relaying requests to the production dbp/db
  proxy:
    dev: db.memegenerator.net
database:
  connectionString: mongodb://localhost:27017
  query:
    max:
      docs: 50
analytics:
  min:
    elapsed: 50
  database:
    prod:
      write:
        path: F:\Database\MG-Analytics
      read:
        connectionString: mongodb://localhost:47017
        database: MG-Analytics
severity:
  time: [50, 500, "<"]
log:
  debug:
    path: (env) => env.getLogPath(env.config.title, "debug")
  errors:
    path: (env) => env.getLogPath(env.config.title, "errors")
requests:
  severity:
    time: [100, 500, "<"]
dbs:
  IDE:
    users:
      enabled: true
  MemeGenerator:
    users:
      enabled: false
restart:
  url: /restart/Jz0xnwG1bDv57LFpKTS6UkV8h9XQtCeBOMl2NHfRIj3yPcZYimAsrqdV4oWEaFhu
api:
  methods:
    Builders.select.one:
      args: [urlName]
      code: | #js
        const builder = await db.findOne("Builders", { UrlName: urlName });
        return builder;
    Builders.select.all:
      args: []
      code: | #js
        const builders = await db.find("Builders", { }, { }, 100, undefined, true);
        return builders;
    Medias.create.one:
      args: [media]
      code: | #js
        if (!media) throw new Error("Argument missing: media");
        const existingMedia = await db.findOne("Medias", { _uid: media._uid });
        if (existingMedia) return existingMedia;
        media = await db.upsert("Medias", media, true);
        return media;
    Medias.select.one:
      args: [mediaID]
      code: | #js
        const uid = (typeof mediaID != "string") ? null : mediaID;
        const media = uid ?
          await db.findOne("Medias", { _uid: mediaID }) :
          await db.findOne("Medias", { _id: mediaID });
        return media;
    Medias.select.byInstance:
      args: [instanceID]
      code: | #js
        const media = await db.findOne("Medias", { "Instance._id": instanceID });
        return media;
    Medias.select.new:
      args: [builderID, fromMediaID]
      code: | #js
        if (!builderID) throw new Error("Argument missing: builderID");
        if (!fromMediaID) fromMediaID = Number.MAX_VALUE;
        const pageSize = 15;
        const medias = await db.find("Medias", { BuilderID: builderID, _id: { $lt: fromMediaID } }, { _id: -1 }, pageSize, 0, true);
        return medias;
    Medias.delete.one:
      admin: true
      args: [mediaID]
      code: | #js
        await db.delete("Medias", { _id: mediaID });
        return true;
    Generators.select.search:
      args: [query]
      code: | #js
        const pageIndex = 0;
        const pageSize = 15;
        const regex = new RegExp(query, "i");
        const filter = (!query) ? {} : { DisplayName: regex };
        var gens = (await db.find('Generators', filter, { InstancesCount: -1 }, pageSize, (pageIndex * pageSize), true));
        return gens;
    Generators.select.related:
      args: [urlName]
      code: | #js
        if (!urlName) return [];

        if (urlName == "Forever-Alone")
        {
          const gens = [await db.findOne("Generators", { UrlName: "Depression-Dog" })];
          return gens;
        }

        if (urlName == "Socially-Awkward-Penguin") {
          const displayName = urlName.replace(/-/g, ' ');
          const regex = new RegExp(`penguin`, 'gi');
          var gens = await db.find('Generators', { DisplayName: { $regex: regex, $ne: displayName } }, { InstancesCount: -1 }, 10, 0, true);
          return gens;
        }

        var gen = (await db.findOne('Generators', { UrlName: urlName }));

        if (!gen) return [];

        var displayName = gen.displayName;
        var words = displayName.split(' ');
        var regex = new RegExp(`(${words.join("|")})`, 'gi');
        var gens = await db.find('Generators', { DisplayName: { $regex: regex, $ne: displayName } }, { InstancesCount: -1 }, 10, 0, true);

        return gens;
    Generators.sample.popular:
      args: [count]
      code: | #js
        let gens = (await db.aggregate("Generators",
          [
            { $match: { IsQuality: true, "Desc.Article": { $exists: true } } },
            { $sample: { size: count * 2 } }
          ]
        ));

        const genNames = gens.map(g => g.UrlName).distinct();

        gens = genNames
          .take(count)
          .map(g => gens.first(gg => gg.UrlName == g));

        return gens;
    Instances.delete.one:
      admin: true
      args: [instanceID]
      code: | #js
        await db.delete("Instances", { _id: instanceID });
    Instances.sample.popular:
      args: [urlName, count]
      code: | #js
        if (!urlName)
        {
          if (false)
          {
            const commentEntities = await db.find("CommentEntities", { }, { CommentsCount: -1 }, 100, undefined, true);
            const ids = commentEntities.take(count).map(c => c.entityID);
            const insts = await db.find("Instances", { _id: { $in: ids } }, { }, count, undefined, true);
            return insts;
          }

          const gens = await db.find("Generators", { IsQuality: true }, {}, 100, undefined, true);
          const genIDs = gens.shuffle().take(count).map(g => g._id);

          const getOneInstance = async (genID, minScore) => {
            const instances = (await db.aggregate("Instances",
              [
                { $match: { LanguageCode: "en", GeneratorID: genID, TotalVotesScore: { $gt: minScore } } },
                { $sample: { size: 1 } }
              ]
            ));
            return instances[0];
          };

          const getGoodInstance = async (genID) => {
            for (const score of [20, 10, 5, 0])
            {
              const instance = await getOneInstance(genID, score);
              if (instance) return instance;
            }
          };

          const instances = await Promise.all(genIDs.map(async (gid) => await getGoodInstance(gid)));

          return instances;
        }

        const gen = await db.findOne("Generators", { UrlName: urlName });

        const instances = await db.aggregate("Instances",
          [
            { $match: { LanguageCode: "en", GeneratorID: gen._id, TotalVotesScore: { $gt: 20 } } },
            { $sample: { size: count } }
          ]
        );

        return instances;
    Instances.select.popular:
      args: [languageCode, pageIndex, urlName]
      code: | #js
        const pageSize = 15;
        const skip = pageIndex * pageSize;

        if (!urlName) {
          return await db.aggregate(
            'Instances',
            [
              {
                $match: {
                  LanguageCode: "en",
                  TotalVotesScore: { $gt: 30 }
                }
              },
              { $sample: { size: pageSize } }
            ],
            true
          );
        }

        const gens = (await db.find('Generators', { UrlName: urlName }, {}, 1));

        if (!gens.length) return [];

        const gen = gens[0];

        const insts = await db.find(
          'Instances',
          { LanguageCode: languageCode, GeneratorID: gen._id },
          { TotalVotesScore: -1 },
          pageSize,
          skip,
          true
        );

        return insts;
    Instances.select.one:
      args: [instanceID, uid]
      code: | #js
        if (uid) return await db.findOne("Instances", { _uid: uid });
        return await db.findOne("Instances", { _id: instanceID });
    Instances.create.one:
      args: [languageCode, generatorID, imageID, text0, text1, _uid]
      code: | #js
        if (null == generatorID) throw new Error("GeneratorID is required");

        //let existingInstance = await db.findOne("Instances", { GeneratorID: generatorID, Text0: text0, Text1: text1 });
        //if (existingInstance) return existingInstance._id;

        const now = (new Date());
        const nowDate = (new Date());
        nowDate.setHours(0, 0, 0, 0);
        const generator = await db.findOne("Generators", { _id: generatorID });
        if (!generator) throw new Error("Generator not found");
        let instance = {
          LanguageCode: languageCode,
          MgUserID: null,
          GeneratorID: generatorID,
          UrlName: generator.urlName,
          UrlName_Lowercase: generator.urlName.toLowerCase(),
          DisplayName: generator.displayName,
          ImageID: generator.imageID,
          Text0: text0,
          Text1: text1,
          Text: [text0, text1].filter(a => a).join(" "),
          UpVotesScore: 0,
          DownVotesScore: 0,
          TotalVotesScore: 0,
          Created: now,
          CreatedDate: nowDate,
          _uid: _uid,
        };
        instance = await db.upsert("Instances", instance, true);
        instance.InstanceID = instance._id;
        await db.upsert("Instances", instance, true);
        return instance._id;
    Threads.create.one:
      args: []
      code: | #js
        let thread = {
          PostsCount: 0,
          Created: Date.now(),
        };
        thread = await db.upsert("Threads", thread, true);
        return thread;
    Threads.select.one:
      args: [threadID, threadMediaID, threadMediaInstanceID]
      code: | #js
        if (!threadID)
        {
          if (!threadMediaID)
          {
            if (!threadMediaInstanceID) return null;
            const firstPost = await db.findOne("Posts", { "Media.Instance._id": threadMediaInstanceID });
            if (firstPost) threadID = firstPost.threadID;
          }
          else
          {
            const firstPost = await db.findOne("Posts", { "Media._id": threadMediaID });
            if (firstPost) threadID = firstPost.threadID;
          }
        }
        const thread = await db.findOne("Threads", { _id: threadID });
        if (!thread) return null;
        thread.posts = await db.find("Posts", { ThreadID: thread._id }, { Index: 1 }, 1000, null, true);
        return thread;
    Threads.select.all:
      args: []
      code: | #js
        const threads = await db.find("Threads", {}, { LastPostCreated: -1 }, 1000, null, true);
        const allPosts = await db.find("Posts", {}, { }, 1000, null, true);
        for (const thread of threads)
        {
          thread.posts = allPosts.filter(p => p.threadID == thread._id);
        }
        return threads;
    Threads.select.recent:
      args: []
      code: | #js
        const threads = await db.find("Threads", { }, { LastPostCreated: -1 }, 15, null, true);
        for (const thread of threads)
        {
          const firstPost = await db.findOne("Posts", { ThreadID: thread._id }, { Index: 1 });
          let lastPosts = await db.find("Posts", { ThreadID: thread._id, Index: { $ne: 0 } }, { Index: -1 }, 3, null, true);
          lastPosts = [...lastPosts].reverse();
          const posts = [firstPost, ...lastPosts];
          thread.posts = posts;
        }
        return threads;
    Posts.create.one:
      args: [threadID, threadMedia, text, media]
      code: | #js
        const now = Date.now();

        const getSimpleInstance = async (instance) => {
          // Make sure that the instance has an imageID
          if (!instance.imageID)
          {
            // Find the generator
            const generator = await db.findOne("Generators", { _id: instance.generatorID });
            if (!generator) throw new Error(`Generator not found. Instance: ${instance}`);
            instance.imageID = generator.imageID;
          }

          // Take only the important fields, in a media instance we don't need all the fields
          instance = {
            _id: instance.instanceID,
            GeneratorID: instance.generatorID,
            DisplayName: instance.displayName,
            UrlName: instance.urlName,
            ImageID: instance.imageID,
            Text0: instance.text0,
            Text1: instance.text1,
          };

          return instance;
        }

        // This only happens on instances
        // Migrate instances to new media format, when posting in a new thread (commenting on the instance)
        if (threadMedia && !threadMedia._id)
        {
          // Double check if a media with this instance content already exists
          const instance = threadMedia.instance;
          if (!instance) throw new Error("threadMedia must have an _id or instance");
          const existingInstanceMedia = await db.findOne("Medias", { "Instance.GeneratorID": instance.generatorID, "Instance.ImageID": instance.imageID, "Instance.Text0": instance.text0, "Instance.Text1": instance.text1 });
          if (existingInstanceMedia)
          {
            threadMedia = existingInstanceMedia;
          }
          else
          {
            threadMedia.instance = await getSimpleInstance(threadMedia.instance);
            // Import the new thread media (with the instance) to the database
            threadMedia = await db.upsert("Medias", threadMedia, true);
          }
        }

        let thread = null;
        thread = await dbp.threads.select.one(threadID, threadMedia?._id);
        // We create threads on the fly when posting to a new media (builder, instance, etc)
        if (!thread) {
          thread = await dbp.threads.create.one();
          if (threadMedia)
          {
            const firstPost = {
              ThreadID: thread._id,
              Index: 0,
              Text: null,
              Media: threadMedia,
              Created: now,
            };
            await db.upsert("Posts", firstPost, true);
          }
        }
        if (!thread) throw new Error("Provide either a threadID or a threadMedia");

        // When posting an instance (in a thread), this code is supposed to insert in the Instances collection
        // but calling dbp.instances.create.one() is not working, because of yo dawg I heard you like dbps shenaningans
        // so in the meanwhile the instance will only exist in the post
        // and later if needed we'll create Instances or Medias for it
        // if (media?.instance && !media.instance._id)
        // {
        //   Double check that an instance with this content doesn't already exist
        //   let instance = await db.findOne("Instances", { GeneratorID: media.instance.generatorID, ImageID: media.instance.imageID, Text0: media.instance.text0, Text1: media.instance.text1 });
        //   if (!instance) {
        //     instance = await dbp.instances.create.one("en", media.instance.generatorID, null, media.instance.text0, media.instance.text1);
        //   }
        //   instance = await getSimpleInstance(instance);
        //   media.type = "instance";
        //   media.instance = instance;
        // }

        const otherPosts = (await db.find("Posts", { ThreadID: thread._id }, { }, 1000, null, true));

        let post = {
          ThreadID: thread._id,
          Index: otherPosts.length,
          Text: text,
          Media: media,
          Created: now,
        };

        post = await db.upsert("Posts", post, true);

        thread.postsCount = ((thread.postsCount || 0) + 1);
        thread.lastPostCreated = now;
        await db.upsert("Threads", thread);

        return post._id;
    Posts.delete.one:
      admin: true
      args: [postID]
      code: | #js
        const post = await db.findOne("Posts", { _id: postID });
        if (!post) return;
        const thread = await dbp.threads.select.one(post.threadID);
        await db.delete("Posts", { _id: postID });
        // Delete the thread if this is the first post
        if (post._id == thread.posts[0]._id)
        {
          await db.delete("Threads", { _id: thread._id });
          return;
        }
        thread.postsCount--;
        await db.upsert("Threads", thread);
    Comments.select.by:
      args: [entityID]
      code: | #js
        let comments = await db.find("Comments", { EntityType: 1, EntityID: entityID }, { }, 1000, null, true);
        comments = comments.sortBy(c => c._id);
        for (const comment of comments) comment.created = comment.created.valueOf();
        return comments;
