# TreeScript
data:
  global:
    functions:
      getTimeIntervals:
        args: [sinceMinutes, intervalMinutes]
        body: | #ts
          const now = Date.now();
          const since = sinceMinutes * 60 * 1000;
          const interval = intervalMinutes * 60 * 1000;
          const start = now - since;
          const intervals = [];
          for (let i = start; i <= now; i += interval) {
            intervals.push({
              start: i,
              end: i + interval
            });
          }
          return intervals;
  init: | #ts
    // CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    const dbEvents = (await dbs.get(config.database.analytics.name));
    const dbContent = (await dbs.get(config.database.content.name));
    const ip = (req.headers['x-forwarded-for'] || req.connection.remoteAddress);
  routes:
    /ip:
      code: | #ts
        response.end(ip);
    /instances/:sinceMinutes/:intervalMinutes:
      defaults:
        sinceMinutes: 30
        intervalMinutes: 1
    /analytics/events/:sinceMinutes/:intervalMinutes:
      events:
        filter:
    /visits/count:
      events:
        filter:
          e: visit
templates:
  main: | #ts
    export default async function (request, response, next) {
      const processRequest = async (data) => {
        {{#each routes}}
        {{routeCode @key this}}
        {{/each}}
      };

      const process = async(data) => {
        try
        {
          await processRequest(data);
        }
        catch (ex)
        {
          response.end(ex.message + "\n" + ex.stack);
        }
      }

      if (request.method === 'GET') {
        process();
      }
      else if (request.method === 'POST') {
        let body = '';
        request.on('data', (data) => {
          body += data;
        });
        request.on('end', async () => {
          process(body);
        });
      }
      else {
        response.end("Unsupported method");
      }
    }
  routeCode:
    args: [url, route]
    code: |
      // {{url}}
      // {{route}}
