dom:
  div:
    app.box:
      template:
        v-slot: content
        img:
          class: generator-image
          :src: getImageUrl(generator?.imageID)
        h1:
          v-text: generator?.displayName
        .poem:
          .stanza:
            v-for: stanza in poem
            v-text: stanza
        .article:
          :class: "{expanded: isArticleExpanded}"
          v-text: getArticleText(generator?.desc?.article)
        .flex:
          class: justify-center
          button:
            class: expand
            v-text: "isArticleExpanded ? 'ðŸ¡…' : 'ðŸ¡‡'"
            @click: "isArticleExpanded = !isArticleExpanded"
    app.gallery:
      :template: "'app.instance.medium'"
      :items: "instances1"
    ui.pager:
      :items-count: generator?.instancesCount
      :page-size: 15
      :value: pageIndex
      :url-format: "'/' + generator?.urlName + '/${pageIndex}'"

props:
  urlName: null

data:
  generator: null
  instances1: null
  isArticleExpanded: false

mounted: | #js
  async function() {
    await this.init();
  }

methods:
  init: | #js
    async function() {
      const urlName = this.urlName;
      const url1 = `https://db.memegenerator.net/MemeGenerator/api/Generators/select/one?urlName="${urlName}"`;
      this.generator = (await (await fetch(url1)).json());
      const url2 = `https://db.memegenerator.net/MemeGenerator/api/Instances/select/popular?languageCode=%22en%22&pageIndex=0&urlName=%22${urlName}%22`;
      this.instances1 = (await (await fetch(url2)).json()).slice(0, 9);
    }
  getPoem: | #js
    function() {
      const poems = this.generator?.desc?.poem;
      if (!poems) return [];
      const index = Math.floor(Math.random() * poems.length);
      return poems[index];
    }
  getImageUrl: | #js
    function(imageID) {
      if (!imageID) return null;
      return `https://img.memegenerator.net/images/${imageID}.jpg`;
    }
  getArticleText: | #js
    function(text) {
      if (!text) return null;
      if (text.startsWith("Title: ")) {
        // Remove the first line
        text = text.slice(text.indexOf("\n") + 1);
      }
      return text;
    }

computed:
  poem: | #js
    function() {
      return this.getPoem();
    }
  pageIndex: | #js
    function() {
      return 0;
      const url = window.location.pathname;
      const parts = url.split('/');
      const pageIndex = parseInt(parts[2]);
      return pageIndex;
    }

style:
  .flex1:
    display: flex
    flex-direction: row
    gap: 1em
  .generator-image:
    width: 20%
    margin: 0.5em 1em 0.5em 0
    float: left
    border-radius: 0.5em
    box-shadow: -3px 3px 10px black
  .article:
    margin: 2em 1em
    max-height: 4.5em
    overflow: hidden
    transition: 1s
  .article.expanded:
    max-height: 30em
  .poem:
    display: flex
    flex-direction: column
    margin: auto
    width: fit-content
    padding: 1em
    font-size: 130%
    color: white
    background: "#00000060"
    border-radius: 0.5em
    box-shadow: inset -3px 3px 10px black
    text-shadow: -2px 2px 1px black
  h1:
    font-size: 3em
  button.expand:
    font-size: 120%
    opacity: 0.4
  button.expand:hover:
    opacity: 1