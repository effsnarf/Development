dom:
  .flex.gap-2:
    div:
      ui.input.text.box:
        :multiline: "true"
        hint: Ask your database anything…
        v-model: prompt
      transition:
        name: slide
        ui.button:
          v-if: canExecute
          text: Send ✔️
          :click: promptToTask
    div:
      v-if: task
      .flex:
        .fs-l1:
          v-text: "'❔'"
        h3:
          v-text: task.title
      .flex.gap-2:
        ui.drawer:
          :open: "!result"
          .flex.flex-column.gap-2:
            .solution:
              v-for: solution in task.solutions
              .flex:
                .fs-l1:
                  v-text: "'📝'"
                div:
                  .box1.show-on-hover-container:
                    h3:
                      v-text: solution.idea.title
                    transition:
                      name: slide
                      div:
                        v-if: "solution.editing"
                        div:
                          ui.input.text.box:
                            :multiline: "true"
                            v-model: solution.query
                    .show-on-hover:
                      .flex.justify-between:
                        ui.button:
                          text: ✏️ edit
                          :click: () => solution.editing = !solution.editing
                        ui.button:
                          text: execute ▶️
                          :click: () => execute(solution)
                  ui.title:
                    icon: "🤔"
                    :text: solution.interesting.fields.join(', ')
        div:
          ui.loading:
            v-if: is.loading
          transition:
            name: slide
            div:
              v-if: result
              h3:
                v-text: resultTitle
              ui.value:
                :value: result
                :visible-fields: visibleFields
props:
  dbp: null

data:
  prompt: null
  query: null
  entities: null
  shortEntities: null
  task: null
  result: null
  resultTitle: null
  visibleFields: null
  is:
    loading: false

mounted: | #js
  async function() {
    this.entities = (await this.dbp.get.entity.infos());
    this.shortEntities = this.entities
      .map(e => (
      `
      ${e.name}
      (${e.stats.count} items)
      ${e.fields.map(f => `${f.name} (${f.type})`).join(', ')}
      indexes: ${e.indexes.map(indx => `(${Object.entries(indx.key).map(([k, v]) => `${k}:${v}`).join(', ')})`).join(', ')}
      
      `
    ))
    .join('\n');
    debugger;
  }

methods:
  execute: | #js
    async function(solution) {
      this.is.loading = true;
      this.result = null;
      this.result = await this.dbp.execute(solution.query);
      this.resultTitle = solution.idea.title;
      this.visibleFields = solution.interesting.fields;
      this.is.loading = false;
    }
  promptToTask: | #js
    async function() {
      this.is.loading = true;
      this.task = null;
      this.result = null;
      this.task = (await (await fetch(`/api/prompt/to/task`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          entities: this.shortEntities,
          prompt: this.prompt
        })
      })).json());
      this.is.loading = false;
    }

computed:
  canExecute: | #js
    function() {
      return this.entities && this.prompt?.length > 0;
    }

watch:
  result: | #js
    function(result) {
      if (!result) this.visibleFields = null;
    }

style:
  .box1:
    background: "#ffffff20"
    padding: 0.5em
    cursor: pointer
  .box1:hover:
    background: "#ffffff30"
  .solution:
    opacity: 0.6
  .solution:nth-child(1):
    opacity: 1
  .solution:hover:
    opacity: 1