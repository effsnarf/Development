title: database.interface
server:
  host: localhost
  port: 5051
project:
  folder: (env) => env.path.resolve(env.process.cwd(), '../Source')
webscript:
  folder: (env) => env.path.join(env.process.cwd(), "../../../Shared/WebScript")
websiteHost:
  folder: (env) => env.path.resolve(env.process.cwd(), '../../WebsiteHost')
static:
  folder: (env) => env.process.cwd()
handler: | #js
  (ctx) => {
    return async (req, res, data) => {
      // Get only the url path, without the query string.
      const url = req.url.split('?')[0];
      if (url == "/api/prompt/to/task") {
        const { entities, prompt } = data;
        const chat = await ctx.ChatOpenAI.new(ctx.Roles.ChatGPT);
        const msg = `
        I will ask you questions about my database and you'll help me find solutions.

        this is the database we're working on:

        ${JSON.stringify(entities, null, 2)}}

        your query can only use fields that actually exist in the schema I provided.
        the query you're writing will be executed as eval(),
        so ensure that your query execution includes iterating over the cursor and fetching the results (toArray() etc)
        
        reply in this format:
        (don't write anything else, not even \`\`\` delimiters)
        (make sure the JSON is strictly and properly formatted)

        {
          "title": "...", (what info the user wants to know, formatted as a short question),
          "solutions": [
            {
              "idea": {
                title: "...", (phrased as a command, example: "find all the people who were born in 1990")
              },
              "query": "...", (if can be done in a single query),
              "interesting": {
                "fields": ["...", "..."], (fields that are interesting to the user, for example, the name of the person, the date of birth, etc)
              },
            },
            ...
          ]
        }
        

        the task is:

        ${prompt}`;

        const result = JSON.parse(await chat.send(msg));
        return res.end(JSON.stringify(result));
      }

    };
  }
