title: database.interface
server:
  host: localhost
  port: 5051
project:
  folder: (env) => env.path.resolve(env.process.cwd(), '../Source')
webscript:
  folder: (env) => env.path.join(env.process.cwd(), "../../../Shared/WebScript")
websiteHost:
  folder: (env) => env.path.resolve(env.process.cwd(), '../../WebsiteHost')
static:
  folder: (env) => env.process.cwd()
handler: | #js
  (ctx) => {
    return async (req, res, data) => {
      // Get only the url path, without the query string.
      const url = req.url.split('?')[0];
      if (url == "/api/prompt/to/task") {
        const { entities, prompt } = data;
        const chat = await ctx.ChatOpenAI.new(ctx.Roles.ChatGPT);
        const msg = `
        I will ask you questions about my database and you'll help me find solutions.

        this is the database we're working on:

        ${JSON.stringify(entities, null, 2)}}
        
        reply in this format:
        (don't write anything else, not even \`\`\` delimiters)
        (make sure the JSON is strictly and properly formatted)

        {
          "title": "...", (the title of the problem, formatted as a short question),
          "analysis": "...", (your understanding of the situation),
          "solutions": (different ways to approach the problem, make sure they have different costs in terms of performance, time and feasibility, not just variations on the same computation. all ideas are in the database, not external apps, etc),
          [
            {
              "idea": { title, subtitle, desc },
              "query": "...", (if can be done in a single query),
              "warnings": ["...", "..."],
              "problems": ["...", "..."],
              "score": {
                "performance": (0-1), (how fast it is to execute on the database, use the database structure and the size of the data I provided to estimate)
              }
            },
            ...
          ]
        }
        

        the task is:

        ${prompt}`;

        const result = JSON.parse(await chat.send(msg));
        return res.end(JSON.stringify(result));
      }

    };
  }
