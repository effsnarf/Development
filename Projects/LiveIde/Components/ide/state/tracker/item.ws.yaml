dom:
  div: 
    .grid:
      ':class': getGridClass()
      ':style': getGridStyle()
      @click: onItemClick(item)
      div: 
        v-if: icon
        v-text: icon
      .opacity-30:
        v-text: vueCompName
      .text-center:
        v-text: $root.getIcon(item)
      div: 
        v-text: item.key
      .newValue:
        v-if: (valueInGrid && item.newValue)
        ui.value.preview:
          v-if: showValue(item)
          ':value': item.newValue.value
        @mouseenter: onHoverValue
        @mouseleave: onUnhoverValue
    ui.value.any:
      v-if: (!valueInGrid && showValue(item))
      ':value': item.newValue.value
    ide.component.method:
      v-if: (showMethod(item))
      ':method': getMethod(item)
      ':args': item.args
props:
  item: null
  icon: null
  preview: false
data:
  isHoveringOverValue: false
  selectedItem: null
mounted: | #js
  function() {
    //this.$root.$on("state-changed", this.onStateChanged.bind(this));
  }
methods:
  getMethod: | #js
    function(item) {
      const vue = this.$root.vm.getVue(item.uid);
      const methodDatas = vue._vueIde.methodDatas;
      return methodDatas[item.key].originalMethod;
    }
  showValue: | #js
    function(item) {
      if (["m"].includes(item.type)) return false;
      return true;
    }
  showMethod: | #js
    function(item) {
      if (!this.preview) return false;
      if (["m"].includes(item.type)) return true;
      return false;
    }
  onHoverValue: | #js
    function() {
      this.isHoveringOverValue = true;
      this.$root.$emit("preview-state-item", this.item);
    }
  onUnhoverValue: | #js
    function() {
      this.isHoveringOverValue = false;
      this.$root.$emit("preview-state-item", null);
    }
  onItemClick: | #js
    function(item) {
      this.selectedItem = (this.selectedItem == item) ? null : item;
      //this.$root.$emit("watch-state-item", { uid: this.uid, key: item.key });
    }
  showFieldContext: | #js
    function(item) {
      if (item.type == "m") return false;
      if (typeof(item.newValue) == "boolean") return false;
      if ([undefined, null].includes(item.newValue)) return false;
      return true;
    }
  getMethodBodyColored: | #js
    function(compName, methodName) {
      let methodBody = this.getMethodBody(compName, methodName);
      methodBody = Prism.highlight(methodBody, Prism.languages.javascript, 'javascript');
      return methodBody;
    }
  getMethodBody: | #js
    function(compName, methodName) {
      const comp = this.$root.getComponent(compName);
      if (!comp) return null;
      const methodBody = comp.source.methods[methodName] || comp.source[methodName];
      if (!methodBody) return null;
      return methodBody;
    }
  onStateChanged: | #js
    function(item) {
      //if (item.key == this.item.key) this.refresh();
    }
  getGridClass: | #js
    function() {
      const cls = [];
      cls.push(this.item.type);
      if (this.preview) cls.push("preview");
      return cls;
    }
  getGridStyle: | #js
    function() {
      const style = {};
      const compColumn = "8em";
      const valueColumn = (this.valueInGrid) ? "8em" : "0px";
      const nameColumn = (this.valueInGrid) ? "8em" : "8em";
      if (this.icon) {
        style["grid-template"] = `1fr / 1em ${compColumn} 2em ${nameColumn} ${valueColumn}`;
      }
      else {
        style["grid-template"] = `1fr / ${compColumn} 2em ${nameColumn} ${valueColumn}`;
      }
      return style;
    }
  consoleLog: | #js
    function(value) {
      console.log(value);
    }
computed:
  vueCompName: | #js
    function() {
      const vue = this.$root.vm.getVue(this.item.uid);
      if (!vue) return null;
      return vue.$options._componentTag;
    }
  valueInGrid: | #js
    function() {
      return (!this.preview);
    }
watch:
  selectedItem:
    handler: | #js
      function(selectedItem) {
        this.$emit("select-item", selectedItem);
      }
    immediate: true
style:
  .grid:
    width: min-content
    text-wrap: nowrap
    overflow: hidden
  .grid > *:
    overflow: hidden
  .grid.preview:
    font-size: 140%
  .comp-name:
    opacity: 0.5
  .newValue:
    color: cyan
  .oldValue:
    opacity: 0.5
  .comp-ui-textarea:
    width: 40em
    height: 20em
    font-size: 110%
name: ide-state-tracker-item
template: >-
  <div class="comp-ide-state-tracker-item" path="841306122."><div class="grid"
  :class="getGridClass()" :style="getGridStyle()" @click="onItemClick(item)"
  path="841306122.0"><div v-if="icon" v-text="icon"
  path="841306122.0.0"></div><div class="opacity-30" v-text="vueCompName"
  path="841306122.0.1"></div><div class="text-center"
  v-text="$root.getIcon(item)" path="841306122.0.2"></div><div v-text="item.key"
  path="841306122.0.3"></div><div class="newValue" v-if="(valueInGrid &amp;&amp;
  item.newValue)" @mouseenter="onHoverValue" @mouseleave="onUnhoverValue"
  path="841306122.0.4"><ui-value-preview v-if="showValue(item)"
  :value="item.newValue.value"
  path="841306122.0.4.0"></ui-value-preview></div></div><ui-value-any
  v-if="(!valueInGrid &amp;&amp; showValue(item))" :value="item.newValue.value"
  path="841306122.1"></ui-value-any><ide-component-method
  v-if="(showMethod(item))" :method="getMethod(item)" :args="item.args"
  path="841306122.2"></ide-component-method></div>
