dom:
  div: 
    .grid:
      ':class': item.type
      ':style': getGridStyle()
      @click: onItemClick(item)
      div: 
        v-if: icon
        v-text: icon
      .text-center:
        v-text: $root.getIcon(item)
      div: 
        v-text: item.key
      .newValue:
        v-if: item.newValue
        .opacity-50:
          v-if: (item.newValue.type == 'p')
          v-text: '''[console.log()]'''
          @click: consoleLog(item.newValue.value)
        ui.value.preview:
          v-if: showValue(item)
          ':value': (item.delta||item.newValue).value
        @mouseenter: onHoverValue
        @mouseleave: onUnhoverValue
props:
  uid: null
  item: null
  icon: null
data:
  isHoveringOverValue: false
  selectedItem: null
mounted: | #js
  function() {
    //this.$root.$on("state-changed", this.onStateChanged.bind(this));
  }
methods:
  showValue: | #js
    function(value) {
      if (["m"].includes(value.type)) return false;
      return true;
    }
  onHoverValue: | #js
    function() {
      this.isHoveringOverValue = true;
      this.$root.$emit("preview-state-item", this.item);
    }
  onUnhoverValue: | #js
    function() {
      this.isHoveringOverValue = false;
      this.$root.$emit("preview-state-item", null);
    }
  onItemClick: | #js
    function(item) {
      this.selectedItem = (this.selectedItem == item) ? null : item;
      //this.$root.$emit("watch-state-item", { uid: this.uid, key: item.key });
    }
  showFieldContext: | #js
    function(item) {
      if (item.type == "m") return false;
      if (typeof(item.newValue) == "boolean") return false;
      if ([undefined, null].includes(item.newValue)) return false;
      return true;
    }
  getMethodBodyColored: | #js
    function(compName, methodName) {
      let methodBody = this.getMethodBody(compName, methodName);
      methodBody = Prism.highlight(methodBody, Prism.languages.javascript, 'javascript');
      return methodBody;
    }
  getMethodBody: | #js
    function(compName, methodName) {
      const comp = this.$root.getComponent(compName);
      if (!comp) return null;
      const methodBody = comp.source.methods[methodName] || comp.source[methodName];
      if (!methodBody) return null;
      return methodBody;
    }
  onStateChanged: | #js
    function(item) {
      //if (item.key == this.item.key) this.refresh();
    }
  getGridStyle: | #js
    function() {
      const style = {};
      if (this.icon) {
        style["grid-template"] = "1fr / 1em 2em 10em 10em";
      }
      else {
        style["grid-template"] = "1fr / 2em 10em 10em";
      }
      return style;
    }
  consoleLog: | #js
    function(value) {
      console.log(value);
    }
computed: null
watch:
  selectedItem:
    handler: | #js
      function(selectedItem) {
        this.$emit("select-item", selectedItem);
      }
    immediate: true
style:
  .grid:
    width: min-content
    text-wrap: nowrap
    overflow: hidden
  .grid > *:
    overflow: hidden
  .comp-name:
    opacity: 0.5
  .newValue:
    color: cyan
  .oldValue:
    opacity: 0.5
  .comp-ui-textarea:
    width: 40em
    height: 20em
    font-size: 110%
name: ide-state-tracker-item
template: >-
  <div class="comp-ide-state-tracker-item" path="841306122."><div class="grid"
  :class="item.type" :style="getGridStyle()" @click="onItemClick(item)"
  path="841306122.0"><div v-if="icon" v-text="icon"
  path="841306122.0.0"></div><div class="text-center"
  v-text="$root.getIcon(item)" path="841306122.0.1"></div><div v-text="item.key"
  path="841306122.0.2"></div><div class="newValue" v-if="item.newValue"
  @mouseenter="onHoverValue" @mouseleave="onUnhoverValue"
  path="841306122.0.3"><div class="opacity-50" v-if="(item.newValue.type ==
  'p')" v-text="'[console.log()]'" @click="consoleLog(item.newValue.value)"
  path="841306122.0.3.0"></div><ui-value-preview v-if="showValue(item)"
  :value="(item.delta||item.newValue).value"
  path="841306122.0.3.1"></ui-value-preview></div></div></div>
