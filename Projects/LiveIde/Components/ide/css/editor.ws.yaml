dom:
  div: 
    .flex.gap-2:
      div: 
        transition: 
          name: slide-hor
          .opacity-50:
            v-show: '!selectedRule'
            ui.select: 
              ':options': classList
              item-icon: 🟢
              input-type: value
              v-model: selectedClass
            ui.select: 
              ':options': cssFieldNames
              ':get-item-icon': () => '⛏️'
              input-type: value
              search-hint: properties…
              v-model: selectedFieldName
      .css-rule-select:
        ui.select:
          ':options': cssRules
          item-icon: 📐
          ':get-item-text': (rule) => rule.selectorText
          ':get-item-key': (rule) => rule.selectorText
          ':is-option-visible': isRuleVisible
          search-hint: rules…
          ':show-search': 'true'
          v-model: selectedRuleIndex
          @input:query: ruleQuery=$event
        div: 
          v-if: ruleQuery?.length
          h3:
            ui.title: 
              icon: 📐
              ':text': ruleQuery
          ui.button: 
            text: ➕ add new rule
            ':click': addNewRule
      .flex.ver.gap-1:
        transition: 
          name: slide-hor
          div: 
            v-if: selectedRule
            div: 
              .opacity-30:
                v-text: getShortPath(selectedRule.parentStyleSheet?.href)
              .title1:
                .flex: 
                  span:
                    v-text: '''📐'''
                  ul:
                    li:
                      v-for: selector in getSelectors(selectedRule)
                      div: 
                        v-text: selector
            div: 
              ui.tabs:
                ':options': '[''📝 Properties'', ''🔳 Flex'']'
                direction: horizontal
                template: 
                  v-slot: tab0
                  table: 
                    tr: 
                      ':class': '{ highlighted: (selectedFieldName == field.name) }'
                      v-for: field in selectedRuleFields
                      ':key': field.id
                      th: 
                        .flex: 
                          .w-l2:
                            v-text: '''⛏️'''
                          div: 
                            div: 
                              v-if: field.value
                              v-text: field.name
                            ui.input.text.box:
                              ':style': '{ width: ''5em'' }'
                              v-if: '!field.value'
                              v-model: field.name
                      td: 
                        ide.css.field.editor:
                          ':field': field
                          @input: (value) => setNewCssRule(field.name, value)
                  .mt-l1:
                    ui.button: 
                      text: ➕
                      ':click': addNewField
                template: 
                  v-slot: tab1
                  ide.css.editor.flex: null
        div: 
          table: 
            v-if: 'false'
            tr: 
              v-for: field in appliedStyles
              th: 
                ui.title: 
                  icon: ⛏️
                  ':text': field.name
              td: 
                .css-field-value:
                  v-text: field.value
props:
  contextElement: null
data:
  classList: []
  cssRules: []
  cssFields: []
  cssFieldNames: []
  selectedFieldName: null
  selectedClass: null
  selectedClassRules: []
  selectedClassFields: []
  selectedRuleIndex: null
  selectedRuleFields: []
  selectedItemFields: []
  appliedStyles: {}
  allCssRules: []
  newCssRules: {}
  ruleQuery: null
mounted: | #js
  function() {
    this.init();
  }
methods:
  init: | #js
    function() {
      this.allCssRules = this.getAllCssRules();
    }
  update: | #js
    function() {
      this.selectedClassRules = [];
      this.selectedClassFields = [];
      this.selectedRuleFields = [];
      this.selectedClassRules = this.cssRules.filter(rule => {
        return rule.selectorText?.includes(`.${this.selectedClass}`);
      });
      this.selectedClassFields = this.selectedClassRules.flatMap(r => this.getCssFields(r));
      this.selectedRuleFields = this.getCssFields(this.selectedRule);
      this.selectedItemFields = this.selectedClass ? this.selectedClassFields :
        this.selectedRule ? this.selectedRuleFields : [];
    }
  addNewRule: | #js
    function() {
      const selector = this.ruleQuery;
      this.setNewCssRule("display", "flex", selector);
      this.allCssRules = this.getAllCssRules();
    }
  addNewField: | #js
    function() {
      this.selectedRuleFields.push({ id: this.$root.getUniqueClientID(), name: "", value: "" });
    }
  setNewCssRule: | #js
    function(name, value, selector) {
      selector = selector || (this.selectedRule ? this.selectedRule.selectorText : this.selectedClass ? `.${this.selectedClass}` : null);
      if (!selector) throw new Error("Selector is needed to set a new css rule");
      const newCssRule = (this.newCssRules[selector] = (this.newCssRules[selector] || {}));
      newCssRule[name] = value;
      this.$root.newCssRules = JSON.parse(JSON.stringify(this.newCssRules));
    }
  getCssFields: | #js
    function(rule) {
      if (!rule) return [];
      // Take everything between the first { and the last }
      const cssText = rule.cssText;
      const start = cssText.indexOf("{");
      const end = cssText.lastIndexOf("}");
      const fields = cssText.substring(start + 1, end)
        .split(";")
        .map(s => s.trim())
        .map(s => s.split(":"))
        .map(s => { return {
          id: this.$root.getUniqueClientID(),
          name: s[0]?.trim(),
          value: this.removeImportant(s[1]?.trim())
        } })
        .filter(f => f.name)
      return fields;
    }
  stringifyCssFields: | #js
    function(fields, block = false) {
      if (!fields) return "";
      const s = fields.map(f => `${f.name}: ${f.value}`).join(";\n");
      return block ? `{${s}}` : s;
    }
  getCssFieldStyle: | #js
    function(field) {
      const canVisualize = (!["position"].includes(field.name));
      if (!canVisualize) return {};
      const style = {};
      style[field.name] = field.value;
      return style;
    }
  removeImportant: | #js
    function(s) {
      if (!s) return s;
      return s.replace(" !important", "").trim();
    }
  getSelectors: | #js
    function(rule) {
      if (!rule) return [];
      return rule.selectorText.split(",").map(s => s.trim());
    }
  isRuleVisible: | #js
    function(rule) {
      let isVisible = true;
      if (this.selectedFieldName) isVisible = isVisible && rule.cssText?.includes(this.selectedFieldName);
      if (this.selectedClass) isVisible = isVisible && rule.selectorText?.includes(`.${this.selectedClass}`);
      return isVisible;
    }
  getClassList: | #js
    function(el) {
      if (!el) return [];
      return [...el.classList];
    }
  getAllCssRules: | #js
    function() {
      let rules = [...document.styleSheets].map(st => {
        try { return st.rules; }
        catch (ex) { return null; }
      })
      .filter(a => a)
      .flatMap(a => [...a]);

      // Multiple rules may have the same selectors
      const selectors = rules.map(r => r.selectorText).distinct();

      rules = selectors.map(s => {
        const sameSelectorRules = rules.filter(r => r.selectorText == s);
        let fields = sameSelectorRules.flatMap(r => this.getCssFields(r));
        fields = fields.map(f => f.name).distinct().map(f => {
          return {
            name: f,
            value: fields.filter(f2 => f2.name == f).last().value
          };
        });
        return {
          selectorText: s,
          cssText: this.stringifyCssFields(fields, true)
        }
      });

      return rules;
    }
  getCssRulesForElement: | #js
    function(el) {
      if (!el) return [];

      const elCssRules = this.allCssRules.filter(rule => {
        return el.matches(rule.selectorText);
      });

      return elCssRules;
    }
  getShortPath: | #js
    function(path) {
      if (!path) return null;
      return `/` + path.split("/").reverse().take(2).reverse().join("/");
    }
computed:
  selectedRule: | #js
    function() {
      if (!this.cssRules) return null;
      return this.cssRules[this.selectedRuleIndex];
    }
  visibleCssRules: | #js
    function() {
      if (!this.cssRules) return [];
      return this.cssRules.filter(r => this.isRuleVisible(r));
    }
  visibleCssRulesKey: | #js
    function() {
      return this.visibleCssRules.map(r => r.selectorText).join(",");
    }
watch:
  selectedRule: | #js
    function(selectedRule) {
      //if (selectedRule) this.selectedClass = null;
      this.update();
    }
  selectedClass: | #js
    function(selectedClass) {
      //if (selectedClass) this.selectedRuleIndex = null;
      this.update();
    }
  visibleCssRulesKey: | #js
    function(visibleCssRulesKey) {
    }
  contextElement:
    handler: | #js
      function(contextElement) {
        this.selectedFieldName = null;
        this.classList = this.getClassList(contextElement);
        this.cssRules = this.getCssRulesForElement(contextElement).sortBy(r => r.selectorText);
        this.cssFields = this.cssRules.flatMap(r => this.getCssFields(r)).sortBy(f => f.name);
        this.cssFieldNames = this.cssFields.map(f => f.name).distinct();
        this.appliedStyles = this.$root.html.getAppliedStyles(contextElement);
        this.update();
      }
    immediate: true
style:
  table:
    display: block
    max-height: 30em
    overflow: auto
  .title1:
    font-size: 120%
    border-bottom: '1px solid #ffffff30'
    border-radius: 0
    margin-bottom: 1em
  tr:hover th, tr:hover td:
    background-color: '#ffffff20'
    transition: 0s
  th:
    padding-right: 2em
  .css-field-value:
    min-width: 10em
    text-align: left
    cursor: pointer
    user-select: none
    transition: 0s
  .css-field-value:hover:
    background-color: '#ffffff20'
  div:
    font-family: monospace
  .css-rule-select:
    max-width: 15em
    overflow: hidden
  input:
    font-size: 100%
name: ide-css-editor
_:
  examples:
    count: 0
template: >-
  <div class="comp-ide-css-editor" path="-1978980996."><div class="flex gap-2"
  path="-1978980996.0"><div path="-1978980996.0.0"><transition name="slide-hor"
  path="-1978980996.0.0.0"><div class="opacity-50" v-show="!selectedRule"
  path="-1978980996.0.0.0.0"><ui-select :options="classList" item-icon="🟢"
  input-type="value" v-model="selectedClass"
  path="-1978980996.0.0.0.0.0"></ui-select><ui-select :options="cssFieldNames"
  :get-item-icon="() =&gt; '⛏️'" input-type="value" search-hint="properties…"
  v-model="selectedFieldName"
  path="-1978980996.0.0.0.0.1"></ui-select></div></transition></div><div
  class="css-rule-select" path="-1978980996.0.1"><ui-select :options="cssRules"
  item-icon="📐" :get-item-text="(rule) =&gt; rule.selectorText"
  :get-item-key="(rule) =&gt; rule.selectorText"
  :is-option-visible="isRuleVisible" search-hint="rules…" :show-search="true"
  v-model="selectedRuleIndex" @input:query="ruleQuery=$event"
  path="-1978980996.0.1.0"></ui-select><div v-if="ruleQuery?.length"
  path="-1978980996.0.1.1"><h3 path="-1978980996.0.1.1.0"><ui-title icon="📐"
  :text="ruleQuery" path="-1978980996.0.1.1.0.0"></ui-title></h3><ui-button
  text="➕ add new rule" :click="addNewRule"
  path="-1978980996.0.1.1.1"></ui-button></div></div><div class="flex ver gap-1"
  path="-1978980996.0.2"><transition name="slide-hor"
  path="-1978980996.0.2.0"><div v-if="selectedRule"
  path="-1978980996.0.2.0.0"><div path="-1978980996.0.2.0.0.0"><div
  class="opacity-30" v-text="getShortPath(selectedRule.parentStyleSheet?.href)"
  path="-1978980996.0.2.0.0.0.0"></div><div class="title1"
  path="-1978980996.0.2.0.0.0.1"><div class="flex"
  path="-1978980996.0.2.0.0.0.1.0"><span v-text="'📐'"
  path="-1978980996.0.2.0.0.0.1.0.0"></span><ul
  path="-1978980996.0.2.0.0.0.1.0.1"><li v-for="selector in
  getSelectors(selectedRule)" path="-1978980996.0.2.0.0.0.1.0.1.0"><div
  v-text="selector"
  path="-1978980996.0.2.0.0.0.1.0.1.0.0"></div></li></ul></div></div></div><div
  path="-1978980996.0.2.0.0.1"><ui-tabs :options="['📝 Properties', '🔳 Flex']"
  direction="horizontal" path="-1978980996.0.2.0.0.1.0"><template v-slot:tab0
  path="-1978980996.0.2.0.0.1.0.0"><table path="-1978980996.0.2.0.0.1.0.0.0"><tr
  :class="{ highlighted: (selectedFieldName == field.name) }" v-for="field in
  selectedRuleFields" :key="field.id" path="-1978980996.0.2.0.0.1.0.0.0.0"><th
  path="-1978980996.0.2.0.0.1.0.0.0.0.0"><div class="flex"
  path="-1978980996.0.2.0.0.1.0.0.0.0.0.0"><div class="w-l2" v-text="'⛏️'"
  path="-1978980996.0.2.0.0.1.0.0.0.0.0.0.0"></div><div
  path="-1978980996.0.2.0.0.1.0.0.0.0.0.0.1"><div v-if="field.value"
  v-text="field.name"
  path="-1978980996.0.2.0.0.1.0.0.0.0.0.0.1.0"></div><ui-input-text-box
  :style="{ width: '5em' }" v-if="!field.value" v-model="field.name"
  path="-1978980996.0.2.0.0.1.0.0.0.0.0.0.1.1"></ui-input-text-box></div></div></th><td
  path="-1978980996.0.2.0.0.1.0.0.0.0.1"><ide-css-field-editor :field="field"
  @input="(value) =&gt; setNewCssRule(field.name, value)"
  path="-1978980996.0.2.0.0.1.0.0.0.0.1.0"></ide-css-field-editor></td></tr></table><div
  class="mt-l1" path="-1978980996.0.2.0.0.1.0.0.1"><ui-button text="➕"
  :click="addNewField"
  path="-1978980996.0.2.0.0.1.0.0.1.0"></ui-button></div></template><template
  v-slot:tab1
  path="-1978980996.0.2.0.0.1.0.1"><ide-css-editor-flex></ide-css-editor-flex></template></ui-tabs></div></div></transition><div
  path="-1978980996.0.2.1"><table v-if="false" path="-1978980996.0.2.1.0"><tr
  v-for="field in appliedStyles" path="-1978980996.0.2.1.0.0"><th
  path="-1978980996.0.2.1.0.0.0"><ui-title icon="⛏️" :text="field.name"
  path="-1978980996.0.2.1.0.0.0.0"></ui-title></th><td
  path="-1978980996.0.2.1.0.0.1"><div class="css-field-value"
  v-text="field.value"
  path="-1978980996.0.2.1.0.0.1.0"></div></td></tr></table></div></div></div></div>
