dom:
  div: 
    .flex.gap-3:
      h3:
        ui.title:
          text: ✨ Activity
          ':number': changes.length
      div: 
        .checkboxes:
          ui.checkbox:
            v-for: type in changes.map(c => c.type).distinct()
            ':text': $root.getIcon(type)
            ':value-array': showTypes
            ':value-key': type
    .flex1:
      transition.group:
        tag: ul
        name: list2
        ':class': activityListClass
        ':key': key1
        li:
          v-for: change in visibleChanges
          ':class': '{ hoverable: true, ''selected'': (selectedChange == change) }'
          ':key': change.id
          @mouseenter: () => onMouseEnter(change)
          @mouseleave: () => onMouseLeave(change)
          @click: () => onClick(change)
          ide.state.tracker.item: 
            ':icon': '''✨'''
            ':item': change
            ':key': change.id
      transition:
        name: slide-hor
        ide.state.tracker.item: 
          v-if: selectedChange
          ':preview': 'true'
          ':icon': '''✨'''
          ':item': selectedChange
          ':key': selectedChange.id
props:
  uid: null
data:
  changes: []
  showTypes:
    - p
    - d
    - e
    - m
    - c
  selectedChange: null
  key1: 1
mounted: | #js
  async function() {
    this.$root.$on("state-changed", this.onStateChanged.bind(this));
  }
methods:
  onStateChanged: | #js
    function(change) {
      if (!change) return;
      if (this.uid == change.uid) this.reload();
    }
  onMouseEnter: | #js
    function(item) {
      this.$root.state.apply(this.uid, item);
    }
  onMouseLeave: | #js
    function(item) {
    }
  onClick: | #js
    function(change) {
      this.selectedChange = (this.selectedChange == change) ? null : change;
    }
  getChanges: | #js
    function(uid, depth = 0) {
      let changes = [...(this.$root.state.changes.get(uid) || [])];
      const vue = this.$root.vm.getVue(uid);
      if ((vue) && (depth < 5)) {
        for (const childVue of vue.$children) {
          changes.push(...this.getChanges(childVue._uid, (depth + 1)));
        }
      }
      changes = changes.sortBy(c => c.id);
      changes = [...changes].reverse();
      changes = changes.take(50);
      return changes;
    }
  reload: | #js
    function() {
      this.changes = this.getChanges(this.uid);
    }
  refresh: | #js
    function() {
      this.key1++;
    }
computed:
  activityListClass: | #js
    function() {
      return {
        list2: true,
        // 'slider-opened': !this.selectedChange,
        // 'slider-closed': !!this.selectedChange,
      };
    }
  visibleChanges: | #js
    function() {
      return this.changes.filter(c => this.showTypes.includes(c.type));
    }
watch:
  uid:
    handler: | #js
      function() {
        this.reload();
      }
    immediate: true
style:
  .list2:
    max-height: 50vh
    overflow-x: hidden
    overflow-y: auto
  .flex1:
    display: flex
    flex-direction: row
    gap: 1em
    margin-top: 1em
  .checkboxes:
    display: flex
name: ide-component-activity
template: >-
  <div class="comp-ide-component-activity" path="720218788."><div class="flex
  gap-3" path="720218788.0"><h3 path="720218788.0.0"><ui-title text="✨ Activity"
  :number="changes.length" path="720218788.0.0.0"></ui-title></h3><div
  path="720218788.0.1"><div class="checkboxes"
  path="720218788.0.1.0"><ui-checkbox v-for="type in changes.map(c =&gt;
  c.type).distinct()" :text="$root.getIcon(type)" :value-array="showTypes"
  :value-key="type"
  path="720218788.0.1.0.0"></ui-checkbox></div></div></div><div class="flex1"
  path="720218788.1"><transition-group tag="ul" name="list2"
  :class="activityListClass" :key="key1" path="720218788.1.0"><li v-for="change
  in visibleChanges" :class="{ hoverable: true, 'selected': (selectedChange ==
  change) }" :key="change.id" @mouseenter="() =&gt; onMouseEnter(change)"
  @mouseleave="() =&gt; onMouseLeave(change)" @click="() =&gt; onClick(change)"
  path="720218788.1.0.0"><ide-state-tracker-item :icon="'✨'" :item="change"
  :key="change.id"
  path="720218788.1.0.0.0"></ide-state-tracker-item></li></transition-group><transition
  name="slide-hor" path="720218788.1.1"><ide-state-tracker-item
  v-if="selectedChange" :preview="true" :icon="'✨'" :item="selectedChange"
  :key="selectedChange.id"
  path="720218788.1.1.0"></ide-state-tracker-item></transition></div></div>
