dom:
  div:
    slot: null
props:
  global: false
  ctrlRightClick: true
data:
  pos: {}
  hoveredElement: null
  posQueue: []
  isMounted: false
  dragStart: null
  posSmoother: null
  smoothPos: null
  moveThrottleRate: 0.01
mounted: | #js
  function() {
    this.isMounted = true;
    this.bindToElement();
  }
unmounted: | #js
  function() {
    this.isMounted = false;
    alertify.message("unmounted");
  }
methods:
  bindToElement: | #js
    function() {
      const element = this.getElement();
      if (!element) {
        setTimeout(this.bindToElement.bind(this), 100);
        return;
      }
      element.addEventListener("mousedown", this.onMouseDown);
      element.addEventListener("mouseup", this.onMouseUp);
      window.addEventListener("mousemove", this.onMouseMove.bind(this).throttle(this.moveThrottleRate * 1000));
      element.addEventListener("contextmenu", this.onContextMenu);
    }
  onMouseDown: | #js
    function(e) {
      if (!this.global && e.target.tagName != "DIV") return;
      if (e.button != 0) return;
      if (this.dragStart) return;
      this.dragStart = { x: e.clientX, y: e.clientY };
      this.$emit("down", e);
    }
  onMouseUp: | #js
    function(e) {
      if (e.button != 0) return;
      this.dragStart = null;
      this.$emit("up", e);
    }
  onMouseMove: | #js
    function(e) {
      const pos = { x: e.clientX, y: e.clientY };
      this.pos = pos;
    }
  onContextMenu: | #js
    function(e) {
      if (this.ctrlRightClick && !e.ctrlKey) return;
      //e.preventDefault();
      e.stopPropagation();
      this.$emit("right-click", e);
    }
  updateHoveredElement: | #js
    function(pos) {
      if (!this.updateHoveredElementThrottled) this.updateHoveredElementThrottled = this._updateHoveredElement.bind(this).throttle(400);
      this.updateHoveredElementThrottled(pos);
    }
  _updateHoveredElement: | #js
    function(pos) {
      var el = document.elementFromPoint(pos.x, pos.y);
      this.hoveredElement = el;
    }
  onPosChanged: | #js
    function(pos, delta) {
      this.$emit("move", pos);
      if (this.dragStart) {
        const delta = { dx: pos.x - this.dragStart.x, dy: pos.y - this.dragStart.y };
        this.dragStart = pos;
        this.$emit("drag", delta);
      }
    }
  getElement: | #js
    function() {
      return (this.global ? window : this.$el.parentElement);
    }
  cancelEvent: | #js
    function(e) {
      e.preventDefault();
      e.stopPropagation();
    }
watch:
  pos:
    handler: | #js
      function(pos) {
        //if (!this.posSmoother) this.posSmoother = new MovingPositionSmoother(pos, (this.moveThrottleRate * 2), this.onPosChanged.bind(this));
        //this.posSmoother.updateThrottled(pos);
        requestAnimationFrame(() => {
          this.onPosChanged(pos);
        });
        this.updateHoveredElement(pos);
      }
    deep: false
  hoveredElement: | #js
    function(newHoveredElement) {
      this.$emit("hovered-element", newHoveredElement);
    }
name: ui-mouse
_:
  examples:
    count: 0
template: <div class="comp-ui-mouse" path="-2129987381."><slot></slot></div>
