dom:
  div: 
    .flex: 
      div: 
        ui.tabs: 
          ':options': colors
          ':get-option-html': getSolidHtml
          direction: vertical
          ':show-search': 'false'
          ':can-select-none': 'true'
          @option-hover: (colorIndex) => onOptionHover(colorIndex)
          v-model: selectedColorIndex
      .color-selection:
        ui.value:
          ':value': selectedValue
        transition: 
          name: slide-hor-ver
          div: 
            v-show: selectedColor
            ':key': selectedColor
            .flex: 
              ui.tabs: 
                v-if: 'false'
                ':options': '[''shade'', ''alpha'', ''gradient'']'
                ':get-option-html': (category) => getCategoryHtml(selectedColor, category)
                direction: vertical
                ':show-search': 'false'
                ':can-select-none': 'true'
                v-model: selectedCategoryIndex
              transition: 
                name: slide-hor
                div: 
                  v-if: true || (selectedCategoryIndex == 0)
                  ui.tabs: 
                    ':options': shades
                    ':get-option-html': (shade) => getShadeHtml(selectedColor, shade)
                    direction: vertical
                    ':show-search': 'false'
                    ':can-select-none': 'true'
                    @option-hover: (shadeIndex) => onOptionHover(null, shadeIndex)
                    @input: selectShade
                    v-model: selectedShadeIndex
              transition: 
                name: slide-hor
                div: 
                  v-if: true || (selectedCategoryIndex == 1)
                  ui.tabs: 
                    ':options': alphas
                    ':get-option-html': (alpha) => getAlphaHtml(selectedColor, alpha)
                    direction: vertical
                    ':show-search': 'false'
                    ':can-select-none': 'true'
                    @option-hover: (alphaIndex) => onOptionHover(null, null, alphaIndex)
                    @input: selectAlpha
                    v-model: selectedAlphaIndex
              transition: 
                name: slide-hor
                div: 
                  v-if: true || (selectedCategoryIndex == 2)
                  ui.tabs: 
                    ':options': gradients
                    ':get-option-html': (color) => getGradientHtml(selectedColor, color)
                    direction: vertical
                    ':show-search': 'false'
                    ':can-select-none': 'true'
                    @option-hover: >-
                      (gradientIndex) => onOptionHover(null, null, null,
                      gradientIndex)
                    @input: selectGradient
                    v-model: selectedGradientIndex
props:
  value: null
data:
  colors:
    - blue
    - indigo
    - purple
    - pink
    - red
    - orange
    - yellow
    - pear
    - green
    - mint
    - teal
    - gray
    - slategray
    - brown
    - wine
    - almond
  shades:
    - darkest
    - darker
    - dark
    - null
    - light
    - lighter
    - lightest
  alphas:
    - 90
    - 80
    - 70
    - 60
    - 50
    - 40
    - 30
    - 20
    - 10
  selectedColorIndex: null
  selectedCategoryIndex: null
  selectedShadeIndex: null
  selectedAlphaIndex: null
  selectedGradientIndex: null
  hoveredValue: null
methods:
  onOptionHover: | #js
    function(colorIndex, shadeIndex, alphaIndex, gradientIndex) {
      this.hoveredValue = this.getValue(colorIndex,  shadeIndex, alphaIndex, gradientIndex);
    }
  getSolid: | #js
    function(color, shade) {
      return ["bg", color, shade].filter(Boolean).join("-");
    }
  getSolidHtml: | #js
    function(color) {
      return `<div class="option ${this.getSolid(color)}"></div>`;
    }
  getShadeHtml: | #js
    function(color, shade) {
      return `<div class="option ${this.getSolid(color, shade)}"></div>`;
    }
  getAlphaHtml: | #js
    function(color, alpha) {
      return `<div class="option bg-${color}-${alpha}"></div>`;
    }
  getGradientHtml: | #js
    function(color1, color2) {
      if (color1 == color2) color1 = "linear";
      return `<div class="option gradient ${color1}-${color2}"></div>`;
    }
  getSingleGradientHtml: | #js
    function(color) {
      return `<div class="option linear-${color}"></div>`;
    }
  getCategoryHtml: | #js
    function(color, category) {
      return `<div class="option bg-${color}-darker">${category}</div>`;
    }
  getTab: | #js
    function(i) {
      return `tab${i}`;
    }
  getValue: | #js
    function(colorIndex, shadeIndex, alphaIndex, gradientIndex) {
      if (colorIndex == null) colorIndex = this.selectedColorIndex;
      const color = this.colors[colorIndex];
      const shade = this.shades[shadeIndex];
      const alpha = this.alphas[alphaIndex];
      const gradient = this.gradients[gradientIndex];
      if (!color) return null;
      if (!shade && !alpha && !gradient) return null;
      if (shade) return `bg-${color}-${shade}`;
      if (alpha) return `bg-${color}-${alpha}`;
      if (gradient) {
        if (gradient == color) return `linear-${gradient}`;
        return `${color}-${gradient}`;
      }
      if (color) return `bg-${color}`;
      return null;
    }
  setValue: | #js
    function(value) {
      if (!value) return;
      if (value.startsWith("bg-")) {
        const parts = value.split("-");
        // bg-color-90, bg-color-darker
        if (parts.length == 3) {
          this.setColor(parts[1]);
          // bg-color-90
          if (parts[2].match(/^\d+$/)) {
            this.setAlpha(parseInt(parts[2]));
            this.setShade(null)
            this.setGradient(null);
            return;
          }
          // bg-color-darker
          this.setShade(parts[2]);
          this.setAlpha(null);
          this.setGradient(null);
          return;
        }
        // bg-color
        if (parts.length == 2) {
          this.setColor(parts[1]);
          this.setShade(null);
          this.setAlpha(null);
          this.setGradient(null);
          return;
        }
        throw new Error(`Invalid value: ${value}`);
      }
      // linear-color
      if (value.startsWith("linear-")) {
        const parts = value.split("-");
        this.setColor(parts[1]);
        this.setGradient(parts[1]);
        this.setAlpha(null);
        this.setShade(null);
        return;
      }
      // color-color
      const parts = value.split("-");
      if (parts.length == 2) {
        this.setColor(parts[0]);
        this.setGradient(parts[1]);
        this.setAlpha(null);
        this.setShade(null);
        return;
      }
      throw new Error(`Invalid value: ${value}`);
    }
  setColor: | #js
    function(color) {
      this.setItem("color", color);
    }
  setShade: | #js
    function(shade) {
      this.setItem("shade", shade);
    }
  setAlpha: | #js
    function(alpha) {
      this.setItem("alpha", alpha);
    }
  setGradient: | #js
    function(gradient) {
      this.setItem("gradient", gradient);
    }
  setItem: | #js
    function(name, value) {
      if (value == null) {
        this[`selected${name.capitalize()}Index`] = null;
        return;
      }
      const index = this[name.pluralize()].indexOf(value);
      if (index == -1) throw new Error(`Invalid ${name}: ${value}`);
      this[`selected${name.capitalize()}Index`] = index;
    }
  selectShade: | #js
    function(shadeIndex) {
      this.selectedShadeIndex = shadeIndex;
      this.selectedAlphaIndex = null;
      this.selectedGradientIndex = null;
    }
  selectAlpha: | #js
    function(alphaIndex) {
      this.selectedShadeIndex = null;
      this.selectedAlphaIndex = alphaIndex;
      this.selectedGradientIndex = null;
    }
  selectGradient: | #js
    function(gradientIndex) {
      this.selectedShadeIndex = null;
      this.selectedGradientIndex = gradientIndex;
      this.selectedAlphaIndex = null;
    }
computed:
  gradients: | #js
    function() {
      return ([this.selectedColor, ...this.colors.except(this.selectedColor)]);
    }
  selectedValue: | #js
    function() {
      const value = this.getValue(this.selectedColorIndex, this.selectedShadeIndex, this.selectedAlphaIndex, this.selectedGradientIndex);
      return value;
    }
  selectedColor: | #js
    function() {
      return this.colors[this.selectedColorIndex];
    }
  selectedShade: | #js
    function() {
      return this.shades[this.selectedShadeIndex];
    }
  selectedAlpha: | #js
    function() {
      return this.alphas[this.selectedAlphaIndex];
    }
  selectedGradient: | #js
    function() {
      return this.gradients[this.selectedGradientIndex];
    }
watch:
  value:
    handler: | #js
      function(value) {
        this.setValue(value);
      }
    immediate: true
  selectedValue: | #js
    function(newValue, oldValue) {
      if (newValue == oldValue) return;
      if (newValue == this.value) return;
      this.$emit("input", newValue);
    }
  hoveredValue: | #js
    function(newValue, oldValue) {
      this.$emit("value-hover", oldValue, false);
      this.$emit("value-hover", newValue, true);
    }
style:
  .color-selection li::after:
    display: none
  h3:
    text-align: center
    opacity: 0.5
  h3, .option:
    width: 6em !important
  .option.gradient:
    width: 10em !important
  .option:
    height: 2em
    text-align: center
    text-shadow: '-3px 3px 1px black'
_:
  examples:
    count: 0
name: ui-input-background-color
template: >-
  <div class="comp-ui-input-background-color" path="-1102478111."><div
  class="flex" path="-1102478111.0"><div path="-1102478111.0.0"><ui-tabs
  :options="colors" :get-option-html="getSolidHtml" direction="vertical"
  :show-search="false" :can-select-none="true" @option-hover="(colorIndex) =&gt;
  onOptionHover(colorIndex)" v-model="selectedColorIndex"
  path="-1102478111.0.0.0"></ui-tabs></div><div class="color-selection"
  path="-1102478111.0.1"><ui-value :value="selectedValue"
  path="-1102478111.0.1.0"></ui-value><transition name="slide-hor-ver"
  path="-1102478111.0.1.1"><div v-show="selectedColor" :key="selectedColor"
  path="-1102478111.0.1.1.0"><div class="flex"
  path="-1102478111.0.1.1.0.0"><ui-tabs v-if="false" :options="['shade',
  'alpha', 'gradient']" :get-option-html="(category) =&gt;
  getCategoryHtml(selectedColor, category)" direction="vertical"
  :show-search="false" :can-select-none="true" v-model="selectedCategoryIndex"
  path="-1102478111.0.1.1.0.0.0"></ui-tabs><transition name="slide-hor"
  path="-1102478111.0.1.1.0.0.1"><div v-if="true || (selectedCategoryIndex ==
  0)" path="-1102478111.0.1.1.0.0.1.0"><ui-tabs :options="shades"
  :get-option-html="(shade) =&gt; getShadeHtml(selectedColor, shade)"
  direction="vertical" :show-search="false" :can-select-none="true"
  @option-hover="(shadeIndex) =&gt; onOptionHover(null, shadeIndex)"
  @input="selectShade" v-model="selectedShadeIndex"
  path="-1102478111.0.1.1.0.0.1.0.0"></ui-tabs></div></transition><transition
  name="slide-hor" path="-1102478111.0.1.1.0.0.2"><div v-if="true ||
  (selectedCategoryIndex == 1)" path="-1102478111.0.1.1.0.0.2.0"><ui-tabs
  :options="alphas" :get-option-html="(alpha) =&gt; getAlphaHtml(selectedColor,
  alpha)" direction="vertical" :show-search="false" :can-select-none="true"
  @option-hover="(alphaIndex) =&gt; onOptionHover(null, null, alphaIndex)"
  @input="selectAlpha" v-model="selectedAlphaIndex"
  path="-1102478111.0.1.1.0.0.2.0.0"></ui-tabs></div></transition><transition
  name="slide-hor" path="-1102478111.0.1.1.0.0.3"><div v-if="true ||
  (selectedCategoryIndex == 2)" path="-1102478111.0.1.1.0.0.3.0"><ui-tabs
  :options="gradients" :get-option-html="(color) =&gt;
  getGradientHtml(selectedColor, color)" direction="vertical"
  :show-search="false" :can-select-none="true" @option-hover="(gradientIndex)
  =&gt; onOptionHover(null, null, null, gradientIndex)" @input="selectGradient"
  v-model="selectedGradientIndex"
  path="-1102478111.0.1.1.0.0.3.0.0"></ui-tabs></div></transition></div></div></transition></div></div></div>
