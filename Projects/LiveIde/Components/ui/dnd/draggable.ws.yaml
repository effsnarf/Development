dom:
  div:
    ref: dragElement1
    ':class': '{ draggable: true }'
    draggable: true
    @dragstart: onDragStart
    @dragend: onDragEnd
    @drag: onDrag
    slot: null
props:
  dragItem: null
  showDragGhost: true
data:
  dragElementPos: null
  isDragging: false
methods:
  onDragStart: | #js
    function(e) {
      this.isDragging = true;

      this.dragElementPos = { x: e.clientX, y: e.clientY };

      if (!this.showDragGhost)
      {
        // Hide the drag ghost
        const img = new Image();
        e.dataTransfer.setDragImage(img, 0, 0);
      }

      this.$root.dragItem = this.dragItem;
      this.$emit('drag-start', this.dragItem);
    }
  onDragEnd: | #js
    async function(e) {
      this.isDragging = false;
      await this.$nextTick();
      this.$emit('drag-end', this.dragItem);
      this.$root.dragItem = null;
    }
  onDrag: | #js
    function(e) {
      if (!this.__onDrag) this.__onDrag = this._onDrag.throttle(this, 100);
      this.__onDrag(e);
    }
  _onDrag: | #js
    function(e) {
      const dep = this.dragElementPos;
      const relativePos = { x: (e.clientX - dep.x), y: (e.clientY - dep.y) };
      const data = {
        e,
        relative: {
          pos: relativePos,
        }
      };
      this.$emit('drag', data);
    }
style:
  .draggable:
    cursor: grabbing
_:
  examples:
    count: 0
name: ui-dnd-draggable
template: >-
  <div class="comp-ui-dnd-draggable" ref="dragElement1" :class="{ draggable:
  true }" draggable="true" @dragstart="onDragStart" @dragend="onDragEnd"
  @drag="onDrag" path="-26676257."><slot></slot></div>
