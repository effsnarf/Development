dom:
  div: 
    v-if: rect
    ':style': style
    ':class': >-
      Object.assign({ hovered: (isFullSize), 'auto-expand': autoExpand },
      (cssClass||{}))
    @mouseenter: (e) => { isHovered++; $emit('mouseenter', e); }
    @mouseleave: (e) => { isHovered=0; $emit('mouseleave', e); }
    @dragenter: (e) => { isHovered++; }
    @dragleave: (e) => { isHovered--; }
    .above:
      ':style': '{ width: rect1.size.width+''px'' }'
      @dragenter: (e) => { isHovered++; }
      @dragleave: (e) => { isHovered--; }
      slot: 
        name: above
    .h-100pc:
      .h-100pc:
        ui.mouse:
          @up: onMouseUp
          @drag: onMouseDrag
        .resize-handle.en:
          v-text: ''
          @mousedown: () => isResizing = 'en'
        .resize-handle.wn:
          v-text: ''
          @mousedown: () => isResizing = 'wn'
        .resize-handle.ws:
          v-text: ''
          @mousedown: () => isResizing = 'ws'
        .resize-handle.es:
          v-text: ''
          @mousedown: () => isResizing = 'es'
        .window:
          ref: window
          ':style': windowStyle
          @click: () => { isHovered = 1; $emit('click'); }
          .header:
            v-if: showHeader
            .flex.w-100pc:
              .flex-grow-1:
                slot: 
                  name: header
              .buttons:
                .flex:
                  transition:
                    name: list2
                    div: 
                      ':key': rect.is.minimized
                      v-text: 'rect.is.minimized ? ''ðŸ—–'' : ''ðŸ—•'''
                      @click: onMinimizeToggle
          .content:
            v-if: showContent
            ':style': contentStyle
            slot: 
              name: content
          .footer:
            v-if: 'false'
            .flex.justify-between:
              div: 
                v-for: size in sizes
                ui.button:
                  ':text': size.width + 'x' + size.height
                  @click: rect1.size = size
      .left-side:
        slot: 
          name: left-side
      .right-side:
        slot: 
          name: right-side
    .below:
      ':style': '{ width: rect1.size.width+''px'' }'
      slot: 
        name: below
props:
  rect: null
  autoExpand: false
  centerCoords: false
  surfaceElement: null
  surfaceCamera:
    pos:
      x: 0
      'y': 0
    scale: 1
  showHeader: true
  windowStyle: null
  cssClass: null
data:
  sizes:
    - width: 300
      height: 200
    - width: 400
      height: 300
    - width: 500
      height: 400
  rect1: null
  isDraggingMoving: false
  isDragging: false
  isResizing: false
  dragStartPos:
    x: 0
    'y': 0
  dragTimeout: null
  isHovered: 0
mounted: | #js
  function() {
  }
methods:
  move: | #js
    async function(pos) {
      this.rect1.pos = this.adjustPos(pos);
    }
  onMinimizeToggle: | #js
    function() {
      this.$emit("is-minimized", !this.rect1.is?.minimized);
    }
  onMouseDrag: | #js
    async function(dpos) {
      if (!this.isDragging)
      {
        this.isDragging = true;
        this.dragStartPos = Objects.clone(this.rect1.pos);
      }
      if (this.isResizing)
      {
        const size = this.rect1.size;
        size.width += (dpos.dx * 2) * (this.isResizing.includes("e") ? 1 : -1);
        size.height += (dpos.dy * 2) * (this.isResizing.includes("s") ? 1 : -1);
        this.rect1.size = size;
        return;
      }
      this.isDraggingMoving = true;
      const pos = this.rect1.pos;
      dpos.dy = -dpos.dy;
      pos.x += dpos.dx;
      pos.y += dpos.dy;
      this.rect1.pos = pos;
      this.$emit("drag", { delta: dpos });
      clearTimeout(this.dragTimeout);
      this.dragTimeout = setTimeout(() => {
        this.isDraggingMoving = false;
      }, 100);
    }
  onMouseUp: | #js
    async function() {
      if (!this.isDragging) return;
      const dragType = this.isResizing ? "resize" : "move";
      this.isDragging = false;
      this.isResizing = false;
      const pos = this.rect1.pos;
      const size = this.rect1.size;
      const rect = { pos, size };
      //if (Objects.areEqual(pos, this.dragStartPos)) return;
      this.$emit("drag-stop", rect, dragType);
    }
  getSurfaceCenter: | #js
    function(cssPosition) {
      const surfaceRect = this.getSurfaceRect();
      if (cssPosition == "fixed")
      {
        return {
          x: Math.round(surfaceRect.left + surfaceRect.width / 2),
          y: Math.round(surfaceRect.top + surfaceRect.height / 2)
        };
      }
      else
      {
        return {
          x: Math.round(surfaceRect.width / 2),
          y: Math.round(surfaceRect.height / 2)
        };
      }
    }
  getSurfaceRect: | #js
    function() {
      const surface = this.surfaceElement || window;
      const surfaceRect = this.$root.getAbsoluteRect(surface);
      return surfaceRect;
    }
  getStyleHeight: | #js
    function() {
      const size = this.rect1.size;
      const minimizedHeight = "40px";
      const fullHeight = (size.height + "px");
      if (this.isFullSize) return fullHeight;
      if (this.rect1.is?.minimized) return minimizedHeight;
      return fullHeight;
    }
  adjustPos: | #js
    function(pos) {
      if (!pos) return pos;
      if (!this.centerCoords) return pos;
      const center = this.getSurfaceCenter();
      const x = Math.round(pos.x - center.x);
      const y = Math.round(center.y - pos.y);
      return { x, y };
    }
  yamlify: | #js
    function(obj) {
      return jsyaml.dump(obj);
    }
computed:
  isFullSize: | #js
    function() {
      return (!!this.isHovered || !!this.isResizing || !!this.isDragging || !!this.isDraggingMoving);
    }
  showContent: | #js
    function() {
      return true;
      if (!this.rect.is.minimized) return true;
      if (this.isHovered) return true;
      if (this.isResizing) return true;
      return false;
    }
  style: | #js
    function()
    {
      const rect1 = this.rect1;
      if (!rect1) return {};
      const camera = this.surfaceCamera;
      const center = this.getSurfaceCenter();
      const pos = rect1.pos;
      const size = rect1.size;
      const style = {};
      style.position = "absolute";
      style.width = (size.width + "px");
      style.height = this.getStyleHeight();
      const height = parseInt(style.height);
      const x = (center.x - camera.pos.x + pos.x - (size.width / 2));
      const y = (center.y + camera.pos.y - pos.y - (height / 2));
      style.left = `${0}px`;
      style.top = `${0}px`;
      style.transform = `translate(${x}px, ${y}px)`;
      if ("opacity" in rect1)
      {
        style.opacity = rect1.opacity;
        if (rect1.opacity == 0) style["pointer-events"] = "none";
      }
      if (rect1.zOnTop) style["z-index"] = 1000;
      if (!this.isDraggingMoving && !this.isResizing) {
        style.transition = "all 1s, transform 0.4s, border 0s";
      }
      return style;
    }
  contentStyle: | #js
    function()
    {
      const style = {};
      const size = this.rect1.size;
      style.width = ((size.width - 20) + "px");
      //style.height = (size.height + "px");
      return style;
    }
  alertify: | #js
    function()
    {
      return alertify;
    }
watch:
  isFullSize:
    handler: | #js
      function(isFullSize) {
        this.$emit("is-hovered", !!isFullSize);
      }
  rect:
    handler: | #js
      function(rect) {
        this.rect1 = Objects.clone(rect);
      }
    immediate: true
    deep: true
  rect1:
    handler: | #js
      function(rect) {
        this.$emit("input", rect);
      }
    deep: true
style:
  .comp-ui-window: null
  .header:
    display: flex
  .buttons:
    max-width: 0
    opacity: 0
    transition: 1s
  .header:hover .buttons:
    max-width: 10em
    transition: 1s
    opacity: 0.3
  .buttons:hover:
    opacity: 1 !important
  .buttons > div > div:
    height: 2em
    background: transparent
    padding: 0.2em
    margin: 0em
    text-align: center
    white-space: nowrap
    cursor: pointer
  .buttons > div > div:hover:
    background: '#ffffff10'
  .resize-handle:
    position: absolute
    width: 2em
    height: 2em
    user-select: none
    z-index: 100
  .resize-handle:hover:
    background: '#ffffff30'
  .resize-handle.wn:
    top: '-1em'
    left: '-1em'
    cursor: nwse-resize
  .resize-handle.ws:
    bottom: '-1em'
    left: '-1em'
    cursor: nesw-resize
  .resize-handle.es:
    bottom: '-1em'
    right: '-1em'
    cursor: nwse-resize
  .resize-handle.en:
    top: '-1em'
    right: '-1em'
    cursor: nesw-resize
  .left-side:
    position: absolute
    top: 50%
    left: 0em
    transform: translate(-100%, -50%)
  .right-side:
    position: absolute
    top: 50%
    right: 0em
    transform: translate(0, -50%)
  .hovered .right-side:
    transform: translate(100%, -50%)
  .above, .below, .left-side, .right-side:
    opacity: 0
    transition: all 0s, opacity 0.6s, transform 1s !important
  .hovered .above, .hovered .below, .hovered .left-side, .hovered .right-side:
    opacity: 1
  .hovered .window: null
  .window:
    height: 100%
    padding: 0.5em
    background: 'linear-gradient(to right, #303030, #101010)'
    border: '1px solid #ffffff30'
    overflow: hidden
    box-shadow: '-1em 1em 0.5em #00000080'
    cursor: move
    user-select: none
    z-index: 90
  .content:
    height: calc(100% - 2em)
    overflow: auto
  .auto-expand .content:
    max-height: 0
  .auto-expand:hover .content:
    max-height: none
  .footer:
    max-height: 0.5em
    overflow: hidden
  .footer:hover:
    max-height: 3em
  .handle:
    position: absolute
    right: 0
    bottom: 0
    width: 1em
    height: 1em
    background: '#ffffff20'
    cursor: se-resize
    user-select: none
_:
  examples:
    count: 0
name: ui-window
template: >-
  <div class="comp-ui-window" v-if="rect" :style="style" :class="Object.assign({
  hovered: (isFullSize), 'auto-expand': autoExpand }, (cssClass||{}))"
  @mouseenter="(e) =&gt; { isHovered++; $emit('mouseenter', e); }"
  @mouseleave="(e) =&gt; { isHovered=0; $emit('mouseleave', e); }"
  @dragenter="(e) =&gt; { isHovered++; }" @dragleave="(e) =&gt; { isHovered--;
  }" path="-1324571510."><div class="above" :style="{ width:
  rect1.size.width+'px' }" @dragenter="(e) =&gt; { isHovered++; }"
  @dragleave="(e) =&gt; { isHovered--; }" path="-1324571510.0"><slot
  name="above" path="-1324571510.0.0"></slot></div><div class="h-100pc"
  path="-1324571510.1"><div class="h-100pc" path="-1324571510.1.0"><ui-mouse
  @up="onMouseUp" @drag="onMouseDrag" path="-1324571510.1.0.0"></ui-mouse><div
  class="resize-handle en" @mousedown="() =&gt; isResizing = 'en'"
  path="-1324571510.1.0.1"></div><div class="resize-handle wn" @mousedown="()
  =&gt; isResizing = 'wn'" path="-1324571510.1.0.2"></div><div
  class="resize-handle ws" @mousedown="() =&gt; isResizing = 'ws'"
  path="-1324571510.1.0.3"></div><div class="resize-handle es" @mousedown="()
  =&gt; isResizing = 'es'" path="-1324571510.1.0.4"></div><div class="window"
  ref="window" :style="windowStyle" @click="() =&gt; { isHovered = 1;
  $emit('click'); }" path="-1324571510.1.0.5"><div class="header"
  v-if="showHeader" path="-1324571510.1.0.5.0"><div class="flex w-100pc"
  path="-1324571510.1.0.5.0.0"><div class="flex-grow-1"
  path="-1324571510.1.0.5.0.0.0"><slot name="header"
  path="-1324571510.1.0.5.0.0.0.0"></slot></div><div class="buttons"
  path="-1324571510.1.0.5.0.0.1"><div class="flex"
  path="-1324571510.1.0.5.0.0.1.0"><transition name="list2"
  path="-1324571510.1.0.5.0.0.1.0.0"><div :key="rect.is.minimized"
  v-text="rect.is.minimized ? 'ðŸ—–' : 'ðŸ—•'" @click="onMinimizeToggle"
  path="-1324571510.1.0.5.0.0.1.0.0.0"></div></transition></div></div></div></div><div
  class="content" v-if="showContent" :style="contentStyle"
  path="-1324571510.1.0.5.1"><slot name="content"
  path="-1324571510.1.0.5.1.0"></slot></div><div class="footer" v-if="false"
  path="-1324571510.1.0.5.2"><div class="flex justify-between"
  path="-1324571510.1.0.5.2.0"><div v-for="size in sizes"
  path="-1324571510.1.0.5.2.0.0"><ui-button :text="size.width + 'x' +
  size.height" @click="rect1.size = size"
  path="-1324571510.1.0.5.2.0.0.0"></ui-button></div></div></div></div></div><div
  class="left-side" path="-1324571510.1.1"><slot name="left-side"
  path="-1324571510.1.1.0"></slot></div><div class="right-side"
  path="-1324571510.1.2"><slot name="right-side"
  path="-1324571510.1.2.0"></slot></div></div><div class="below" :style="{
  width: rect1.size.width+'px' }" path="-1324571510.2"><slot name="below"
  path="-1324571510.2.0"></slot></div></div>
