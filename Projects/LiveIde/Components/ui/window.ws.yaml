dom:
  div: 
    ':class': '{ hovered: (isHovered || isResizing), ''auto-expand'': autoExpand }'
    @dragenter: (e) => isHovered++
    @dragleave: (e) => isHovered--
    @mouseenter: (e) => { isHovered++; $emit('mouseenter', e); }
    @mouseleave: (e) => { isHovered--; $emit('mouseleave', e); }
    ':style': style
    .above:
      @dragenter: (e) => isHovered++
      @dragleave: (e) => isHovered--
      @mouseenter: (e) => isHovered++
      @mouseleave: (e) => isHovered--
      slot: 
        name: above
    .window:
      ui.mouse:
        @up: onMouseUp
        @drag: onMouseDrag
      .buttons:
        .flex: 
          div: 
            v-text: '''🗕'''
          div: 
            v-text: '''⬜️'''
            title: Reset isHovered
            @click: () => isHovered = 1
      .flex: 
        slot: 
          name: title
      .content:
        ':style': contentStyle
        slot: 
          name: content
      .footer:
        v-if: 'false'
        .flex.justify-between:
          div: 
            v-for: size in sizes
            ui.button:
              ':text': size.width + 'x' + size.height
              @click: rect1.size = size
      .resize-handle-wn:
        v-text: ''
        @mousedown: () => isResizing = 'wn'
      .resize-handle-ws:
        v-text: ''
        @mousedown: () => isResizing = 'ws'
      .resize-handle-es:
        v-text: ''
        @mousedown: () => isResizing = 'es'
    .below:
      slot: 
        name: below
props:
  rect: null
  autoExpand: false
  centerCoords: false
  surfaceElement: null
data:
  sizes:
    - width: 300
      height: 200
    - width: 400
      height: 300
    - width: 500
      height: 400
  rect1:
    pos:
      x: 0
      'y': 0
    size:
      width: 300
      height: 200
  isDraggingMoving: false
  isDragging: false
  isResizing: false
  dragStartPos:
    x: 0
    'y': 0
  dragTimeout: null
  isHovered: 0
mounted: | #js
  function() {
  }
methods:
  move: | #js
    async function(pos) {
      this.rect1.pos = this.adjustPos(pos);
    }
  onMouseDrag: | #js
    async function(dpos) {
      if (!this.isDragging)
      {
        this.isDragging = true;
        this.dragStartPos = Objects.clone(this.rect1.pos);
      }
      if (this.isResizing)
      {
        const size = this.rect1.size;
        size.width += (dpos.dx * 2) * (this.isResizing.includes("e") ? 1 : -1);
        size.height += (dpos.dy * 2) * (this.isResizing.includes("s") ? 1 : -1);
        this.rect1.size = size;
        return;
      }
      this.isDraggingMoving = true;
      const pos = this.rect1.pos;
      pos.x += dpos.dx;
      pos.y -= dpos.dy;
      this.rect1.pos = pos;
      clearTimeout(this.dragTimeout);
      this.dragTimeout = setTimeout(() => {
        this.isDraggingMoving = false;
      }, 100);
    }
  onMouseUp: | #js
    async function() {
      if (!this.isDragging) return;
      const dragType = this.isResizing ? "resize" : "move";
      this.isDragging = false;
      this.isResizing = false;
      const pos = this.rect1.pos;
      const size = this.rect1.size;
      const rect = { pos, size };
      //if (Objects.areEqual(pos, this.dragStartPos)) return;
      this.$emit("drag-stop", rect, dragType);
    }
  getSurfaceCenter: | #js
    function(cssPosition) {
      const surfaceRect = this.getSurfaceRect();
      if (cssPosition == "fixed")
      {
        return {
          x: Math.round(surfaceRect.left + surfaceRect.width / 2),
          y: Math.round(surfaceRect.top + surfaceRect.height / 2)
        };
      }
      else
      {
        return {
          x: Math.round(surfaceRect.width / 2),
          y: Math.round(surfaceRect.height / 2)
        };
      }
    }
  getSurfaceRect: | #js
    function() {
      const surface = this.surfaceElement || window;
      const surfaceRect = this.$root.getAbsoluteRect(surface);
      return surfaceRect;
    }
  adjustRectCoords: | #js
    function(rect) {
      if (!this.centerCoords) return rect;
      const center = this.getSurfaceCenter();
      const pos = rect.pos;
      const size = rect.size;
      const x = pos.x + center.x;
      const y = center.y - pos.y;
      const width = size.width;
      const height = size.height;
      return { pos: { x, y }, size: { width, height } };
    }
  adjustPos: | #js
    function(pos) {
      if (!pos) return pos;
      if (!this.centerCoords) return pos;
      const center = this.getSurfaceCenter();
      const x = pos.x - center.x;
      const y = center.y - pos.y;
      return { x, y };
    }
  yamlify: | #js
    function(obj) {
      return jsyaml.dump(obj);
    }
computed:
  style: | #js
    function()
    {
      const center = this.getSurfaceCenter();
      const pos = this.rect1.pos;
      const size = this.rect1.size;
      const style = {};
      style.position = "absolute";
      style.left = `${center.x + pos.x - (size.width / 2)}px`;
      style.top = `${center.y - pos.y - (size.height / 2)}px`;
      style.width = (size.width + "px");
      style.height = (true || this.isHovered || this.isResizing) ? (size.height + "px") : "2.5em";
      if (!this.isDraggingMoving && !this.isResizing) style.transition = "0.3s";
      return style;
    }
  contentStyle: | #js
    function()
    {
      const style = {};
      const size = this.rect1.size;
      style.width = ((size.width - 20) + "px");
      //style.height = (size.height + "px");
      style.transition = "0.3s";
      return style;
    }
watch:
  rect:
    handler: | #js
      function(rect) {
        this.rect1 = Objects.clone(rect);
      }
    immediate: true
    deep: true
  rect1:
    handler: | #js
      function(rect) {
        this.$emit("input", rect);
      }
    deep: true
style:
  .buttons:
    position: absolute
    margin: 0.2em
    top: 0
    right: 0
    z-index: 100
  .buttons > div > div:
    aspect-ratio: 1
    width: 2em
    background: transparent
    padding: 0.2em
    margin: 0.1em
    text-align: center
    cursor: pointer
  .buttons > div > div:hover:
    background: '#ffffff10'
  .resize-handle-wn, .resize-handle-ws, .resize-handle-es, .resize-handle-en:
    position: absolute
    width: 1.5em
    height: 1.5em
    user-select: none
  .resize-handle-wn:
    top: 0
    left: 0
    cursor: nwse-resize
  .resize-handle-ws:
    bottom: 0
    left: 0
    cursor: nesw-resize
  .resize-handle-es:
    bottom: 0
    right: 0
    cursor: nwse-resize
  .resize-handle-en:
    top: 0
    right: 0
    cursor: nesw-resize
  .hovered:
    border: 2px solid red
  .above, .below:
    position: absolute
    width: 100%
    opacity: 0
    transition: 1s
  .below:
    transform: translate(0, -100%)
  .comp-ui-window.hovered .above, .comp-ui-window.hovered .below:
    opacity: 1
  .comp-ui-window.hovered .above:
    transform: translate(0, -100%)
  .comp-ui-window.hovered .below:
    transform: none
  .window:
    height: 100%
    padding: 0.5em
    background: 'linear-gradient(to right, #303030, #101010)'
    border: '1px solid #ffffff30'
    overflow: hidden
    box-shadow: '-0.5em 0.5em 0.5em #00000080'
    cursor: move
    user-select: none
    z-index: 10
  .content:
    overflow: auto
  .auto-expand .content:
    max-height: 0
  .auto-expand:hover .content:
    max-height: none
  .footer:
    opacity: 0
    max-height: 0.5em
    overflow: hidden
    transition: 0.3s
  .footer:hover:
    opacity: 1
    max-height: 3em
  .handle:
    position: absolute
    right: 0
    bottom: 0
    width: 1em
    height: 1em
    background: '#ffffff20'
    cursor: se-resize
    user-select: none
_:
  examples:
    count: 0
name: ui-window
template: >-
  <div class="comp-ui-window" :class="{ hovered: (isHovered || isResizing),
  'auto-expand': autoExpand }" @dragenter="(e) =&gt; isHovered++"
  @dragleave="(e) =&gt; isHovered--" @mouseenter="(e) =&gt; { isHovered++;
  $emit('mouseenter', e); }" @mouseleave="(e) =&gt; { isHovered--;
  $emit('mouseleave', e); }" :style="style" path="-1324571510."><div
  class="above" @dragenter="(e) =&gt; isHovered++" @dragleave="(e) =&gt;
  isHovered--" @mouseenter="(e) =&gt; isHovered++" @mouseleave="(e) =&gt;
  isHovered--" path="-1324571510.0"><slot name="above"
  path="-1324571510.0.0"></slot></div><div class="window"
  path="-1324571510.1"><ui-mouse @up="onMouseUp" @drag="onMouseDrag"
  path="-1324571510.1.0"></ui-mouse><div class="buttons"
  path="-1324571510.1.1"><div class="flex" path="-1324571510.1.1.0"><div
  v-text="'🗕'" path="-1324571510.1.1.0.0"></div><div v-text="'⬜️'" title="Reset
  isHovered" @click="() =&gt; isHovered = 1"
  path="-1324571510.1.1.0.1"></div></div></div><div class="flex"
  path="-1324571510.1.2"><slot name="title"
  path="-1324571510.1.2.0"></slot></div><div class="content"
  :style="contentStyle" path="-1324571510.1.3"><slot name="content"
  path="-1324571510.1.3.0"></slot></div><div class="footer" v-if="false"
  path="-1324571510.1.4"><div class="flex justify-between"
  path="-1324571510.1.4.0"><div v-for="size in sizes"
  path="-1324571510.1.4.0.0"><ui-button :text="size.width + 'x' + size.height"
  @click="rect1.size = size"
  path="-1324571510.1.4.0.0.0"></ui-button></div></div></div><div
  class="resize-handle-wn" @mousedown="() =&gt; isResizing = 'wn'"
  path="-1324571510.1.5"></div><div class="resize-handle-ws" @mousedown="()
  =&gt; isResizing = 'ws'" path="-1324571510.1.6"></div><div
  class="resize-handle-es" @mousedown="() =&gt; isResizing = 'es'"
  path="-1324571510.1.7"></div></div><div class="below"
  path="-1324571510.2"><slot name="below"
  path="-1324571510.2.0"></slot></div></div>
