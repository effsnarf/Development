dom:
  div: 
    ':class': class1
    ':style': style1
    ui.select:
      ':class': '{ corner: (type==''toggle'') }'
      ':options': (options||[]).map(option => _getOptionHtml(option))
      ':getUrl': getUrl
      ':direction': direction
      ':type': type
      ':can-select-none': canSelectNone
      @item-hover: onItemHover
      v-model: selectedTabIndex
    div: 
      class: flex-grow-1
      slot: 
        name: header
      div: 
        v-for: (option, index) in options
        class: not-selected
        transition:
          ':name': (transitionName||defaultTransitionName)
          .tab:
            v-if: (index == activeIndex)
            ':style': getTabStyle(index)
            slot: 
              ':name': '''tab'' + index'
props:
  options: null
  getOptionText: null
  getOptionHtml: null
  getUrl: null
  direction: vertical
  value: null
  transitionName: null
  canSelectNone: false
data:
  hoveredTabIndex: null
  selectedTabIndex: null
methods:
  getTabStyle: | #js
    function(index) {
      const style = {};
      if (index == this.selectedTabIndex) {
        style.opacity = "1 !important";
      }
      return style;
    }
  onItemHover: | #js
    function(e) {
      this.hoveredTabIndex = e.index;
    }
  _getOptionHtml: | #js
    function(option) {
      const getOptionHtml = (option) => {
        if (this.getOptionHtml) return this.getOptionHtml(option);
        if (this.getOptionText) return this.getOptionText(option)?.textToHtml();
        return option;
      }
      let html = getOptionHtml(option);
      if (['jpg', 'jpeg', 'png'].some(ext => html.endsWith('.' + ext))) {
        html = `<img src="${html}" />`;
      }
      return html;
    }
computed:
  activeIndex: | #js
    function() {
      if (this.selectedTabIndex != null) return this.selectedTabIndex;
      return this.hoveredTabIndex;
    }
  defaultTransitionName: | #js
    function() {
      if (this.direction === 'vertical') return 'slide-hor-ver';
      return 'slide';
    }
  type: | #js
    function() {
      if (this.direction === 'toggle') return 'toggle';
      return 'list';
    }
  class1: | #js
    function() {
      const cls = {};
      cls[this.direction] = true;
      return cls;
    }
  style1: | #js
    function() {
      const style = {};
      style.display = 'flex';
      style.flexDirection = ((this.direction == "vertical") ? "row" : "column");
      style.gap = "1em";
      return style;
    }
watch:
  selectedTabIndex:
    handler: | #js
      function(newIndex) {
        if (!this.options) return;
        this.$emit('input', newIndex);
      }
    immediate: true
  value: | #js
    function(value) {
      if (!this.options) return;
      const newIndex = value;
      if (newIndex == this.selectedTabIndex) return;
      this.selectedTabIndex = newIndex;
    }
style:
  .not-selected .tab:
    opacity: 0.3 !important
  .vertical li:
    display: flex
  .vertical li::after:
    content: '''❯'''
    opacity: 0.1 !important
    margin-left: 2em
    flex-grow: 1
    text-align: right
  .comp-ui-select div:
    width: 100%
  .comp-ui-select img:
    display: block
    width: 1.5em
    aspect-ratio: 1
    margin: auto
  .comp-ui-select:
    margin-bottom: 0.1em
  .corner:
    position: absolute
    z-index: 10
    transform: scale(1.5)
    top: '-0.6em'
    right: '-1em'
  li:
    margin-bottom: 0
name: ui-tabs
_:
  examples:
    count: 0
template: >-
  <div class="comp-ui-tabs" :class="class1" :style="style1"
  path="-484156776."><ui-select :class="{ corner: (type=='toggle') }"
  :options="(options||[]).map(option =&gt; _getOptionHtml(option))"
  :getUrl="getUrl" :direction="direction" :type="type"
  :can-select-none="canSelectNone" @item-hover="onItemHover"
  v-model="selectedTabIndex" path="-484156776.0"></ui-select><div
  class="flex-grow-1" path="-484156776.1"><slot name="header"
  path="-484156776.1.0"></slot><div class="not-selected" v-for="(option, index)
  in options" path="-484156776.1.1"><transition
  :name="(transitionName||defaultTransitionName)" path="-484156776.1.1.0"><div
  class="tab" v-if="(index == activeIndex)" :style="getTabStyle(index)"
  path="-484156776.1.1.0.0"><slot :name="'tab' + index"
  path="-484156776.1.1.0.0.0"></slot></div></transition></div></div></div>
