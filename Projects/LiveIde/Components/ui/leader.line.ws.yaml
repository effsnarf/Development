dom:
  div:
    ui.floating:
      ref: floating1
      v-if: 'false'
      ':attach-to': middleLabelElement
      attach-origin: center center
      slot:
        name: middle
props:
  from: null
  to: null
  visible: true
  color: yellow
  startPlug: null
  endPlug: null
  linePath: fluid
data:
  leaderLine: null
  leaderLineElement: null
  middleLabelElement: null
  flashColors: []
  isFlashing: false
mounted: | #js
  this.redraw();
  this.refresh();
unmounted: | #js
  this.remove();
methods:
  flash: | #js
    async function() {
      if (!this.leaderLine) return;
      const yellow = "#ffff00";
      this.flashColors = this.tweenColors(yellow, this.color, 20);
      if (!this.isFlashing) this.flashOneFrame();
      for (let i = 0; i < 10; i++) {
        setTimeout(() => {
          this.$refs.floating1?.refresh();
        }, i * 10);
      }
    }
  flashOneFrame: | #js
    async function() {
      this.isFlashing = true;
      if (!this.leaderLine) return;
      if (!this.flashColors.length) return;
      const color = this.flashColors.shift();
      this.leaderLine.color = color;
      if (!this.flashColors.length)
      {
        this.isFlashing = false;
        return;
      }
      setTimeout(this.flashOneFrame.bind(this), 1);
    }
  refresh: | #js
    function() {
      const fromEl = this.getEdgeElement(this.from);
      const toEl = this.getEdgeElement(this.to);

      if (this.leaderLine && (this.leaderLine.start == fromEl) && (this.leaderLine.end == toEl))
      {
        this.redraw();
        return;
      }

      this.remove();

      if ((!fromEl) || (!toEl)) return this.remove();
      if (!fromEl.isConnected || !toEl.isConnected) return this.remove();

      this.leaderLine = new LeaderLine(
        fromEl,
        toEl,
        {
          path: this.linePath,
          color: this.color,
          startPlug: this.startPlug,
          endPlug: this.endPlug,
          middleLabel: this.middleLabel,
          dropShadow: {
            dx: -3,
            dy: 3,
            blur: 0.2
          }
        }
      );

      // If fromEl or toEl's DOM position changes, redraw the leader line
      this.$root.html.when.element.moves(fromEl, this.redraw.bind(this));
      this.$root.html.when.element.moves(toEl, this.redraw.bind(this));
      
      this.setVisibility(this.visible);
    }
  redraw: | #js
    function(onlyOnce = false) {
      if (this.leaderLine)
      {
        if (this.isConnected(this.leaderLine))
        {
          this.leaderLine.position();
        }
        else
        {
          this.remove();
        }
      }

      if (this.$el.isConnected) {
        if (!onlyOnce)
        {
          //setTimeout(() => { this.redraw(false); }, 100);
        }
      }
      else
      {
        this.remove();
      }
    }
  setVisibility: | #js
    function(visible) {
      if (!this.leaderLine) return;
      if (visible) this.leaderLine.show();
      else this.leaderLine.hide();
    }
  isConnected: | #js
    function(leaderLine) {
      const fromEl = leaderLine.start;
      const toEl = leaderLine.end;
      return (fromEl.isConnected && toEl.isConnected);
    }
  remove: | #js
    function() {
      if (!this.leaderLine) return;
      this.leaderLine.remove();
      this.leaderLine = null;
    }
  getLeaderLineElement: | #js
    function() {
      if (!this.leaderLine) return null;
      return document.getElementById(`leader-line-${this.leaderLine._id}-line-path`).parentElement.parentElement;
    }
  getEdgeElement: | #js
    function(vue) {
      const getElement = () => {
        if (!vue) return null;
        if (typeof vue == "function") {
          const el = vue();
          if (el?.$el) return el.$el;
          return el;
        }
        return vue;
      }
      const el = getElement();
      return el;
    }
  tweenColors: | #js
    function(startColor, endColor, steps) {
      const start = {
        r: parseInt(startColor.substring(1, 3), 16),
        g: parseInt(startColor.substring(3, 5), 16),
        b: parseInt(startColor.substring(5, 7), 16),
      };

      const end = {
        r: parseInt(endColor.substring(1, 3), 16),
        g: parseInt(endColor.substring(3, 5), 16),
        b: parseInt(endColor.substring(5, 7), 16),
      };

      const step = {
        r: (end.r - start.r) / (steps - 1),
        g: (end.g - start.g) / (steps - 1),
        b: (end.b - start.b) / (steps - 1),
      };

      const colors = [];

      for (let i = 0; i < steps; i++) {
        const r = Math.round(start.r + step.r * i).toString(16).padStart(2, '0');
        const g = Math.round(start.g + step.g * i).toString(16).padStart(2, '0');
        const b = Math.round(start.b + step.b * i).toString(16).padStart(2, '0');
        colors.push(`#${r}${g}${b}`);
      }

      return colors;
    }
computed:
  middleLabel: | #js
    function() {
      return `&nbsp;`;
    }
watch:
  from: | #js
    function(from) {
      this.refresh();
    }
  to: | #js
    function(to) {
      this.refresh();
    }
  visible: | #js
    function(visible) {
      this.setVisibility(visible);
    }
  leaderLine: | #js
    function(leaderLine) {
      this.leaderLineElement = this.getLeaderLineElement();
    }
  leaderLineElement: | #js
    function(leaderLineElement) {
      // Find the <text> element with the text being the middle label
      const textElements = leaderLineElement?.querySelectorAll("text");
      this.middleLabelElement = textElements?.[0];
    }
style: null
_:
  examples:
    count: 0
name: ui-leader-line
template: >-
  <div class="comp-ui-leader-line" path="125299039."><ui-floating
  ref="floating1" v-if="false" :attach-to="middleLabelElement"
  attach-origin="center center" path="125299039.0"><slot name="middle"
  path="125299039.0.0"></slot></ui-floating></div>
