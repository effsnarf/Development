dom:
  div: null
props:
  fromVue: null
  toVue: null
  visible: true
  color: yellow
  startPlug: null
  endPlug: null
data:
  leaderLine: null
  isFlashing: false
mounted: | #js
  this.redraw();
  this.refresh();
unmounted: | #js
  this.remove();
methods:
  flash: | #js
    async function() {
      if (!this.leaderLine) return;
      if (this.isFlashing) return;
      this.isFlashing = true;
      try
      {
        const flashTimes = 1;
        const delay = 400;
        const flashOnce = (async (delayEnd = true) => {
          this.leaderLine.color = 'white';
          await this.$root.wait(delay);
          this.leaderLine.color = this.color;
          if (delayEnd) await this.$root.wait(delay);
        });
        for (let i = 0; i < flashTimes; i++) {
          await flashOnce((i < flashTimes - 1));
        }
      }
      finally
      {
        this.isFlashing = false;
      }
    }
  refresh: | #js
    function() {
      const fromEl = this.fromVue().$el;
      const toEl = this.toVue().$el;

      if (this.leaderLine && (this.leaderLine.start == fromEl) && (this.leaderLine.end == toEl))
      {
        this.redraw();
        return;
      }

      this.remove();

      if ((!fromEl) || (!toEl)) return this.remove();
      if (!fromEl.isConnected || !toEl.isConnected) return this.remove();

      this.leaderLine = new LeaderLine(
        fromEl,
        toEl,
        {
          path: 'fluid',
          color: this.color,
          startPlug: this.startPlug,
          endPlug: this.endPlug,
          dropShadow: {
            dx: -3,
            dy: 3,
            blur: 0.2
          }
        }
      );
      this.setVisibility(this.visible);
    }
  redraw: | #js
    function() {
      if (this.leaderLine)
      {
        if (this.isConnected(this.leaderLine))
        {
          this.leaderLine.position();
        }
        else
        {
          this.remove();
        }
      }
      if (this.$el.isConnected) {
        setTimeout(this.redraw.bind(this), 100);
      }
      else
      {
        this.remove();
      }
    }
  setVisibility: | #js
    function(visible) {
      if (!this.leaderLine) return;
      if (visible) this.leaderLine.show();
      else this.leaderLine.hide();
    }
  isConnected: | #js
    function(leaderLine) {
      const fromEl = leaderLine.start;
      const toEl = leaderLine.end;
      return (fromEl.isConnected && toEl.isConnected);
    }
  remove: | #js
    function() {
      if (this.leaderLine) this.leaderLine.remove();
      this.leaderLine = null;
    }
watch:
  fromVue: | #js
    function(fromVue) {
      this.refresh();
    }
  toVue: | #js
    function(toVue) {
      this.refresh();
    }
  visible: | #js
    function(visible) {
      this.setVisibility(visible);
    }
style: null
_:
  examples:
    count: 0
name: ui-leader-line
template: <div class="comp-ui-leader-line"></div>
