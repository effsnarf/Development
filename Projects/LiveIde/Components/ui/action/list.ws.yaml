dom:
  div: 
    v-if: actionStack
    transition.group:
      tag: ul
      name: slide
      class: actions
      li:
        v-for: (action, index) in allActions
        ':key': action._id
        ':class': getActionCssClass(action, index)
        div: 
          slot:
            ':action': action
props:
  actionStack: null
  action: null
data:
  actions: []
  allActions: []
mounted: | #js
  async function() {
    this.$root.$on("user.action", this.refresh.bind(this));
  }
methods:
  getActionCssClass: | #js
    function(action, index) {
      return {
        done: this.isActionDone(action)
      };
    }
  isActionDone: | #js
    function(action) {
      const doneAction = this.actionStack.doneAction;
      return (action._id <= doneAction._id.value);
    }
  refresh: | #js
    async function() {
      this.actions = await this.actionStack.getActions(this.action?._id);
      this.allActions = await this.actionStack.getAllActions();
    }
watch:
  action:
    handler: | #js
      async function(action) {
        await this.refresh();
      }
    immediate: true
style:
  li:
    padding: 0.2em 0.5em
    background-color: '#202020'
  .done, .done:hover:
    background-color: '#404040'
  li:hover, .done:hover:
    border: '1px solid #ffffff80'
  .done:first-child > td:first-child:
    border-radius: 0.5em 0 0 0
  .done:first-child > td:last-child:
    border-radius: 0 0.5em 0 0
  .done:last-child > td:first-child:
    border-radius: 0em 0 0 0.5em
  .done:last-child > td:last-child:
    border-radius: 0 0 0.5em 0
_:
  examples:
    count: 0
name: ui-action-list
template: >-
  <div class="comp-ui-action-list" v-if="actionStack"
  path="-877239044."><transition-group class="actions" tag="ul" name="slide"
  path="-877239044.0"><li v-for="(action, index) in allActions"
  :key="action._id" :class="getActionCssClass(action, index)"
  path="-877239044.0.0"><div path="-877239044.0.0.0"><slot :action="action"
  path="-877239044.0.0.0.0"></slot></div></li></transition-group></div>
