dom:
  div: 
    ':class': '{ preview: preview }'
    div: 
      v-if: isSimpleType(value)
      ':class': getCssClass(value)
      div: 
        ':class': '{ clickable: isLargeType(value) }'
        v-text: valueToString(value)
        @click: isMoreVisible = !isMoreVisible
      transition:
        name: slide
        ui.value.any:
          v-if: isLargeType(value) && isMoreVisible
          ':value': value
    ui.image:
      v-if: isImageUrl(value)
      ':url': value
    ui.value.preview.function:
      v-if: isFunction(value)
      ':value': value
props:
  value: null
  preview: true
data:
  isMoreVisible: false
computed:
  type: | #js
    function() {
      return Objects.getType(this.value)?.name.toLowerCase();
    }
  typeColor: | #js
    function() {
      if (this.type == "boolean") return this.value ? "green" : "red";
      return ({
        "string": "yellow",
        "number": "green",
        "object": "cyan",
        "array": "white"
      }[this.type]) || null;
    }
methods:
  isSimpleType: | #js
    function(value) {
      return (!this.isImageUrl(value) && !this.isFunction(value));
    }
  isLargeType: | #js
    function(value) {
      // object or array
      return (this.type == "object" || this.type == "array");
    }
  isImageUrl: | #js
    function(value) {
      if (typeof value != "string") return false;
      if (!value.startsWith("http")) return false;
      if ([".png", ".jpg", ".jpeg", ".gif"].some(ext => value.endsWith(ext))) return true;
      return false;
    }
  isFunction: | #js
    function(value) {
      return typeof value == "function";
    }
  getCssClass: | #js
    function(value) {
      const cls = [];
      if ([undefined, null].includes(value)) cls.push("opacity-30");
      cls.push(this.typeColor);
      return cls;
    }
  valueToString: | #js
    function(value) {
      if (value == undefined) return "undefined";
      if (value == null) return "null";
      if (typeof value == "string") return `${!this.preview ? value : value.shorten(20)}`;
      if (typeof value == "number") return value.toString();
      if (typeof value == "boolean") return value ? "✔️" : "✖";
      if (typeof value == "function") return value.toString();
      if (Array.isArray(value)) return `[${value.length}…]`;
      if (typeof value == "object") return `{${Object.keys(value).join(', ')}…}`;
      return value.toString();
    }
style:
  .comp-ui-image:
    width: 15em
  .preview .comp-ui-image:
    width: 4em
name: ui-value-preview
_:
  examples:
    count: 0
template: >-
  <div class="comp-ui-value-preview" :class="{ preview: preview }"
  path="-272450959."><div v-if="isSimpleType(value)" :class="getCssClass(value)"
  path="-272450959.0"><div :class="{ clickable: isLargeType(value) }"
  v-text="valueToString(value)" @click="isMoreVisible = !isMoreVisible"
  path="-272450959.0.0"></div><transition name="slide"
  path="-272450959.0.1"><ui-value-any v-if="isLargeType(value) &amp;&amp;
  isMoreVisible" :value="value"
  path="-272450959.0.1.0"></ui-value-any></transition></div><ui-image
  v-if="isImageUrl(value)" :url="value"
  path="-272450959.1"></ui-image><ui-value-preview-function
  v-if="isFunction(value)" :value="value"
  path="-272450959.2"></ui-value-preview-function></div>
