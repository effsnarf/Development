dom:
  .box1:
    ':class': '{ reversed: reverse }'
    ui.title:
      icon: ðŸ§Š
      text: Array
      ':number': value?.length
    ui.select:
      v-if: 'false'
      ':options': '[''table'', ''short-list'', ''expanded-list'']'
      input-type: value
      type: toggle
      v-model: view1
    transition: 
      name: slide
      table: 
        v-if: (view1.includes('list'))
        tbody: 
          tr: 
            v-for: (item, index) in items
            td: 
              class: opacity-50
              v-text: index
            td: 
              ui.value.preview: 
                v-if: (view1 == 'short-list')
                ':value': item
              ui.value.any:
                v-if: (view1 == 'expanded-list')
                ':value': item
    transition: 
      name: slide
      table: 
        v-if: (view1 == 'table')
        thead:
          tr: 
            th:
              v-for: field in fields
              v-text: field
        tbody: 
          tr: 
            v-for: (item, index) in items
            ':class': _getItemClass(item, index)
            td: 
              v-for: field in fields
              ui.value.preview: 
                ':value': item[field]
props:
  value: null
  reverse: false
  view: table
  getItemClass: null
data:
  view1: null
methods:
  getFieldType: | #js
    function(fieldName) {
      if (!this.value?.length) return null;
      if (this.isImageField(fieldName)) return "image";
      return (typeof this.value[0][fieldName]);
    }
  isImageField: | #js
    function(fieldName) {
      if (!this.value?.length) return false;
      if (['.jpg', '.jpeg', '.png'].some(ext => this.value.find(item => item[fieldName]?.toString().endsWith(ext)))) return true;
      return false;
    }
  _getItemClass: | #js
    function(item, index) {
      const classes = [];
      if (this.getItemClass) classes.push(this.getItemClass(item, index));
      return classes;
    }
computed:
  items: | #js
    return [...this.value].take(5);
  fields: | #js
    // Get all the field names from the array of objects
    const fields = this.value
      .filter(item => ((typeof item) == "object"))
      .map(item => Object.keys(item || {}))
      .flat()
      .distinct();
      //.sortBy(this.getFieldSortScore);
    return fields;
watch:
  view:
    handler: | #js
      function(view) {
        this.view1 = view;
      }
    immediate: true
style:
  .box1:
    border: '1px solid #ffffff80'
    border-radius: 0.5em
    padding: 0.5em
  .reversed > table > tbody:
    display: flex
    flex-direction: column-reverse
  tr *:
    max-height: 1.5em
    overflow: hidden
  img:
    width: 5em
  tr:
    transition: 0s
  tr:hover td:
    background-color: '#ffffff20'
    transition: 0s
  th:
    opacity: 0.5
  td:
    font-family: monospace
    padding: 0 0.5em
_:
  examples:
    count: 0
name: ui-value-array
template: >-
  <div class="comp-ui-value-array box1" :class="{ reversed: reverse }"
  path="-621945022."><ui-title icon="ðŸ§Š" text="Array" :number="value?.length"
  path="-621945022.0"></ui-title><ui-select v-if="false" :options="['table',
  'short-list', 'expanded-list']" input-type="value" type="toggle"
  v-model="view1" path="-621945022.1"></ui-select><transition name="slide"
  path="-621945022.2"><table v-if="(view1.includes('list'))"
  path="-621945022.2.0"><tbody path="-621945022.2.0.0"><tr v-for="(item, index)
  in items" path="-621945022.2.0.0.0"><td class="opacity-50" v-text="index"
  path="-621945022.2.0.0.0.0"></td><td
  path="-621945022.2.0.0.0.1"><ui-value-preview v-if="(view1 == 'short-list')"
  :value="item" path="-621945022.2.0.0.0.1.0"></ui-value-preview><ui-value-any
  v-if="(view1 == 'expanded-list')" :value="item"
  path="-621945022.2.0.0.0.1.1"></ui-value-any></td></tr></tbody></table></transition><transition
  name="slide" path="-621945022.3"><table v-if="(view1 == 'table')"
  path="-621945022.3.0"><thead path="-621945022.3.0.0"><tr
  path="-621945022.3.0.0.0"><th v-for="field in fields" v-text="field"
  path="-621945022.3.0.0.0.0"></th></tr></thead><tbody
  path="-621945022.3.0.1"><tr v-for="(item, index) in items"
  :class="_getItemClass(item, index)" path="-621945022.3.0.1.0"><td v-for="field
  in fields" path="-621945022.3.0.1.0.0"><ui-value-preview :value="item[field]"
  path="-621945022.3.0.1.0.0.0"></ui-value-preview></td></tr></tbody></table></transition></div>
