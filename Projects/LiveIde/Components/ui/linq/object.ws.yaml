dom:
  div:
    ui.checkbox:
      v-for: field in Object.keys(input)
      ':text': field
      ':value-array': fields
      ':value-key': field
      ':key': field
props:
  input: null
  value: null
data:
  fields: []
methods:
  qomToFields: | #js
    function(qom) {
      if (!qom) return [];
      if (qom.type != "select") throw new Error("Unsupported QOM type: " + qom.type);
      return [...qom.args.fields];
    }
  fieldsToQom: | #js
    function(fields) {
      return {
        type: "select",
        args: {
          fields: [...fields]
        }
      }
    }
watch:
  fields:
    handler: | #js
      function(fields) {
        const qom = this.fieldsToQom(fields);
        this.$emit("input", qom);
      }
    immediate: true
    deep: true
  value:
    handler: | #js
      function(value) {
        const fields = this.qomToFields(value);
        if (!Objects.areEqual(this.fields, fields)) this.fields = fields;
      }
    immediate: true
    deep: true
_:
  examples:
    count: 0
name: ui-linq-object
template: >-
  <div class="comp-ui-linq-object" path="1187848339."><ui-checkbox v-for="field
  in Object.keys(input)" :text="field" :value-array="fields" :value-key="field"
  :key="field" path="1187848339.0"></ui-checkbox></div>
