dom:
  div:
    transition.group:
      tag: ul
      name: list
      ':class': getMainCssClass()
      li:
        v-for: indexedItem in visibleItems
        ':key': _getItemKey(indexedItem.item)
        ':class': getCssClass(indexedItem.index)
        slot:
          ':index': indexedItem.index
          ':item': indexedItem.item
        @mouseenter: () => onItemHover(indexedItem)
        @mouseleave: '() => onItemHover({ item: null, index: null })'
        @click: () => onItemClick(indexedItem)
props:
  items: null
  selectedIndex: null
  direction: vertical
  isItemVisible: null
  getItemKey: null
  canSelectNone: true
data:
  mySelectedIndex: null
methods:
  _isItemVisible: | #js
    function(item) {
      if (this.isItemVisible) return this.isItemVisible(item);
      return true;
    }
  _getItemKey: | #js
    function(item) {
      const stringKey = (typeof item === 'string') ? item : JSON.stringify(item);
      if (this.getItemKey) return this.getItemKey(item) || stringKey;
      return this.$root.getKey(item) || stringKey;
    }
  getMainCssClass: | #js
    function() {
      const cls = {
        menu3: true,
      };
      cls[this.direction] = true;
      return cls;
    }
  onItemHover: | #js
    function(e) {
      this.$emit('item-hover', e);
    }
  onItemClick: | #js
    function(e) {
      const newIndex = (e.index == this.mySelectedIndex) ? null : e.index;
      if ((newIndex == null) && !this.canSelectNone) return;
      this.mySelectedIndex = newIndex;
      this.$emit('input', newIndex);
    }
  getCssClass: | #js
    function(index) {
      return {
        selected: (index == this.mySelectedIndex),
      };
    }
computed:
  visibleItems: | #js
    function() {
      return (this.items||[])
        .map((item, index) => ({
          item,
          index,
        }))
        .filter((item) => this._isItemVisible(item.item));
    }
  index: | #js
    function() {
      return this.mySelectedIndex;
    }
  item: | #js
    function() {
      if (!this.items) return null;
      return this.items[this.mySelectedIndex];
    }
  value: | #js
    function() {
      return this.mySelectedIndex;
    }
watch:
  selectedIndex:
    handler: | #js
      function() {
        this.mySelectedIndex = this.selectedIndex;
      }
    immediate: true
name: ui-list
style:
  .horizontal:
    display: flex
    flex-direction: row
  .horizontal > *:
    flex-grow: 1
    text-align: center
template: >-
  <div class="comp-ui-list" path="-484386888."><transition-group tag="ul"
  name="list" :class="getMainCssClass()" path="-484386888.0"><li
  v-for="indexedItem in visibleItems" :key="_getItemKey(indexedItem.item)"
  :class="getCssClass(indexedItem.index)" @mouseenter="() =&gt;
  onItemHover(indexedItem)" @mouseleave="() =&gt; onItemHover({ item: null,
  index: null })" @click="() =&gt; onItemClick(indexedItem)"
  path="-484386888.0.0"><slot :index="indexedItem.index"
  :item="indexedItem.item"
  path="-484386888.0.0.0"></slot></li></transition-group></div>
