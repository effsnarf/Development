dom:
  .row:
    :class: "{ selected: user.ui.is.selected }"
    @click: () => onClickUser(user)
    .check:
      input:
        type: checkbox
        v-if: "user.id != newEmptyUserID"
        v-model: user.ui.is.selected
    .icon:
      .circle:
        :style: "{ background: userColors[user.color.id] }"
        v-text: getInitials(user)
    .name-column:
      h3:
        class: name
        ui.input.text.box:
          v-model: user.ui.edited.name
          hint: "Name"
          :camouflage: "!user.ui.is.editing"
          :enabled: "user.ui.is.editing"
      .email:
        ui.input.text.box:
          v-model: user.ui.edited.email
          hint: "Email"
          :camouflage: "!user.ui.is.editing"
          :enabled: "user.ui.is.editing"
    .permission:
      div:
        v-if: "(user.permission.id != null)"
        :class: "'button button' + user.permission.id"
        v-text: permissionTexts[user.permission.id]
    .buttons:
      div:
        button:
          class: clear edit
          title: "Edit"
          v-if: "!user.ui.is.editing"
          v-text: "'✏️'"
          @click: () => startEditing(user)
        h3:
          .flex:
            button:
              class: save
              title: "Save"
              v-if: "showSaveButton(user)"
              v-text: "'Save'"
              @click: () => saveEditing(user)
            button:
              class: gray cancel
              title: "Cancel"
              v-if: "user.ui.is.editing"
              v-text: "'Cancel'"
              @click: () => cancelEditing(user)
      div:
        v-if: "!user.ui.is.editing"
        button:
          class: clear delete
          v-text: "'🗑️'"
          @click: () => deleteUser(user)

props:
  user: null
  newEmptyUserID: null

data:
  userColors: {}
  permissionTexts: ['Admin', 'Agent']

mounted: | #js
  function() {
    this.userColors = { '1': '#31F1AC', '2': '#1C40A3', '3': '#DE40A3' };
  }

methods:
  startEditing: | #js
    function(user) {
      user.ui.is.editing = true;
    }
  saveEditing: | #js
    function(user) {
      user.ui.is.editing = false;
      user.name = user.ui.edited.name;
      user.email = user.ui.edited.email;
      this.$emit('save', user);
    }
  deleteUser: | #js
    function(user) {
      this.$emit('delete', user);
    }
  cancelEditing: | #js
    function(user) {
      // If cancling a new user, remove it
      if (user.id == this.newEmptyUserID) {
        this.$emit('delete', user);
        return;
      }
      user.ui.is.editing = false;
    }
  onClickUser: | #js
    function(user) {
      if (user.id == this.newEmptyUserID) return;
      user.ui.is.selected = !user.ui.is.selected;
    }
  showSaveButton: | #js
    function(user) {
      if (!user.ui.is.editing) return false;
      if (!user.ui.edited.name?.length) return false;
      if (!user.ui.edited.email?.length) return false;
      return true;
    }
  getInitials: | #js
    function(user) {
      return user.name.split(' ')
        .map(n => n[0])
        .slice(0, 2)
        .join('')
        .toUpperCase();
    }

style:
  h3.name input:
    color: black
  .selected, .selected:hover:
    background: "linear-gradient(45deg, #ffffff10, #ffffff30)"
  .permission .button:
    padding: 0 0.8em
    color: gray
    border-radius: 0.7em
    font-size: 1.1rem
  .permission .button:hover:
    color: black
  .permission .button0:
    background: "#EFE2FE"
  .permission .button0:hover:
    background: "#AB91BA"
  .permission .button1:
    background: "#C8E7F9"
  .permission .button1:hover:
    background: "#8DB9D9"